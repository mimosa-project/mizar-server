:: Artin's Theorem towards the Existence of Algebraic Closures
::  by Christoph Schwarzweller
:: 
:: Received September 30, 2022
:: Copyright (c) 2022-2023 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies ARYTM_3, VECTSP_1, ALGSTR_0, TARSKI, EQREL_1, STRUCT_0, MOD_4,
      SUBSET_1, SUPINF_2, POLYNOM8, FUNCT_2, NAT_1, MESFUNC1, C0SP1, CARD_1,
      PRE_POLY, GROUP_6, POLYNOM1, POLYNOM3, FUNCSDOM, RLVECT_1, GROUP_2,
      EC_PF_1, HURWITZ, FINSEQ_1, FINSET_1, ORDINAL4, FUNCT_1, RELAT_1,
      BINOP_1, FUNCT_7, FINSEQ_5, RFINSEQ, XBOOLE_0, NUMBERS, POLYNOM5,
      GROUP_1, ORDINAL1, ZFMISC_1, AFINSQ_1, VECTSP_2, CARD_3, RATFUNC1,
      RING_1, RING_2, WELLORD2, RING_3, MSSUBFAM, LATTICES, IDEAL_1, CARD_FIL,
      GROUP_4, GROEB_2, FDIFF_1, UPROOTS, ALGNUM_1, ARYTM_1, FIELD_4, FIELD_2,
      FOMODEL1, REALSET1, CAT_3, WELLORD1, XXREAL_0, QUOFIELD, XCMPLX_0,
      NEWTON, FUNCOP_1, FUNCT_4, FIELD_1, PARTFUN1, POLYNOM2, POLYNOM4,
      POLYNOM7, WAYBEL20, ORDERS_1, FIELD_11;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, DOMAIN_1, BINOP_1, RELAT_1,
      RELSET_1, ORDINAL1, FUNCT_1, FUNCT_2, ORDERS_1, RECDEF_1, FINSEQ_5,
      RFINSEQ, NUMBERS, CARD_1, CARD_3, PARTFUN1, REALSET1, WELLORD1, WELLORD2,
      XCMPLX_0, XXREAL_0, NAT_1, NAT_D, FUNCOP_1, INT_1, VFUNCT_1, FUNCT_4,
      FUNCT_7, FINSET_1, ALGSEQ_1, FINSEQ_1, PRE_POLY, UPROOTS, POLYNOM3,
      POLYNOM1, POLYNOM2, POLYNOM5, POLYNOM4, POLYNOM7, STRUCT_0, GROUP_1,
      GROUP_4, GROUP_6, MOD_4, BINOM, ALGSTR_0, QUOFIELD, IDEAL_1, RLVECT_1,
      VECTSP_2, HURWITZ, VECTSP_1, C0SP1, EC_PF_1, RATFUNC1, RINGCAT1, EQREL_1,
      RING_1, RING_2, RING_3, RING_4, ALGNUM_1, FIELD_1, FIELD_2, FIELD_3,
      FIELD_4;
 constructors BINOP_1, REAL_1, FINSOP_1, BINARITH, VECTSP_2, POLYNOM3, C0SP1,
      ALGSTR_1, MCART_1, NUMBERS, RING_1, ZFMISC_1, RELAT_1, HURWITZ, VALUED_0,
      VECTSP_1, STRUCT_0, POLYNOM4, XBOOLE_0, RELSET_1, ARYTM_3, QUOFIELD,
      PARTFUN1, RLVECT_1, FUNCT_7, NAT_D, FINSEQ_1, VFUNCT_1, CARD_1, FINSET_1,
      TSEP_1, RATFUNC1, FINSEQ_3, GCD_1, GROUP_6, FUNCT_5, REALSET1, ALGSTR_2,
      BINOM, RINGCAT1, MEMBERED, IDEAL_1, RING_3, EC_PF_1, FINSEQ_5, ALGSEQ_1,
      RING_2, PRE_POLY, EQREL_1, POLYDIFF, RLVECT_5, RING_4, FUNCOP_1, GROUP_4,
      ALGNUM_1, GROUP_1, RECDEF_1, POLYNOM1, POLYNOM2, FVSUM_1, CARD_3, MOD_4,
      ORDINAL2, WELLORD2, POLYNOM7, ORDERS_1, UPROOTS, INT_1, POLYNOM5,
      FIELD_4, FIELD_1, FIELD_2, FIELD_5, FIELD_6, RFINSEQ, FIELD_7;
 registrations XBOOLE_0, ORDINAL1, RELSET_1, FUNCOP_1, XXREAL_0, XREAL_0,
      NAT_1, INT_1, STRUCT_0, VECTSP_1, ALGSTR_1, GCD_1, EC_PF_1, VALUED_0,
      FUNCT_2, ALGSTR_0, ALGSEQ_1, SUBSET_1, RLVECT_1, QUOFIELD, PRE_POLY,
      MOD_4, POLYDIFF, FUNCT_1, PARTFUN1, VFUNCT_1, CARD_1, FINSET_1, RATFUNC1,
      EQREL_1, RELAT_1, RINGCAT1, FINSEQ_1, RING_1, RING_2, RING_3, RING_4,
      RING_5, GROUP_1, GROUP_4, GROUP_6, IDEAL_1, WELLORD2, REALSET1, POLYNOM1,
      POLYNOM2, POLYNOM3, POLYNOM4, POLYNOM5, POLYNOM7, ALGNUM_1, FIELD_1,
      FIELD_2, FIELD_4, FIELD_7;
 requirements NUMERALS, SUBSET, BOOLE, REAL, ARITHM;


begin

:: Preliminaries about bags and multivariate polynomials

theorem :: FIELD_11:1
for n,m being Ordinal
for b1,b2 being bag of n
st support b1 = {m} & support b2 = {m} holds b1 <=' b2 iff b1.m <= b2.m;

theorem :: FIELD_11:2
for n,m being Ordinal
for b1,b2 being bag of n st support b1 = {m}
holds b2 divides b1 iff (b2 = EmptyBag n or (support b2 = {m} & b2.m <= b1.m));

theorem :: FIELD_11:3
for F being Field,
    m,n being Ordinal
for b being bag of n st support b = {m} holds
len(divisors b) = b.m + 1 &
for k being Nat, S being finite Subset of n st S = {m} &
     k in dom(divisors b) holds (divisors b).k = (S,k-'1)-bag;

registration
let n be Ordinal;
let L be right_zeroed add-associative right_complementable
         right_unital distributive non degenerated doubleLoopStr;
cluster Polynom-Ring(n,L) -> non degenerated;
end;

theorem :: FIELD_11:4
for R being non degenerated comRing
for S being comRingExtension of R
for n being Ordinal
holds Polynom-Ring(n,S) is comRingExtension of Polynom-Ring(n,R);

definition
let R be non degenerated Ring;
let n be Ordinal;
let p be Polynomial of n,R;
func Leading-Term p -> bag of n equals
:: FIELD_11:def 1
  SgmX(BagOrder n,Support p).(len SgmX(BagOrder n,Support p)) if p <> 0_(n,R)
  otherwise EmptyBag n;
end;

definition
let R be non degenerated Ring;
let n be Ordinal;
let p be Polynomial of n,R;
func Leading-Coefficient p -> Element of R equals
:: FIELD_11:def 2
  p.(Leading-Term p);
end;

definition
let R be non degenerated Ring;
let n be Ordinal;
let p be Polynomial of n,R;
func Leading-Monomial p -> Monomial of n,R equals
:: FIELD_11:def 3
  Monom(Leading-Coefficient p,Leading-Term p);
end;

notation
let R be non degenerated Ring;
let n be Ordinal;
let p be Polynomial of n,R;
synonym LC p for Leading-Coefficient p;
synonym Lt p for Leading-Term p;
synonym LM p for Leading-Monomial p;
end;

theorem :: FIELD_11:5
for R being non degenerated Ring
for n being Ordinal
for p being Polynomial of n,R holds p = 0_(n,R) iff Support p = {};

theorem :: FIELD_11:6
for R being non degenerated Ring
for n being Ordinal
for p being Polynomial of n,R holds LC p = 0.R iff p = 0_(n,R);

theorem :: FIELD_11:7
for R being non degenerated Ring
for n being Ordinal
for p being Polynomial of n,R
for b being bag of n st b in Support p
holds b = Lt p iff for b1 being bag of n st b1 in Support p holds b1 <=' b;

theorem :: FIELD_11:8
for R being non degenerated Ring
for n being Ordinal
for p being Polynomial of n,R holds Support(LM p) c= Support p;

theorem :: FIELD_11:9
for F being Field
for n being Ordinal
for p being Monomial of n,F holds LC p = coefficient p & Lt p = term p;

theorem :: FIELD_11:10
for R being non degenerated Ring
for n being Ordinal
for p being Polynomial of n,R
holds Support(LM p) = {} or Support(LM p) = {Lt p};

theorem :: FIELD_11:11
for R being non degenerated Ring
for n being Ordinal
for p being Polynomial of n,R holds LM p = 0_(n,R) iff p = 0_(n,R);

theorem :: FIELD_11:12
for R being non degenerated Ring
for n being Ordinal
for p being Polynomial of n,R
holds (LM p).(Lt p) = LC p &
      for b being bag of n st b <> Lt p holds (LM p).b = 0.R;

theorem :: FIELD_11:13
for R being non degenerated Ring
for n being Ordinal
for p being Polynomial of n,R holds Lt (LM p) = Lt p & LC (LM p) = LC p;

theorem :: FIELD_11:14
for n being Ordinal
for R being non degenerated Ring
for a,b being Element of R holds a|(n,R) + b|(n,R) = (a + b)|(n,R);

theorem :: FIELD_11:15
for n being Ordinal
for R being non degenerated Ring
for a,b being Element of R holds a|(n,R) *' (b|(n,R)) = (a * b)|(n,R);

:: Extended evaluation of multivariate polynomials

definition
let R,S be non degenerated comRing;
let n be Ordinal;
let p be Polynomial of n,R;
let x be Function of n,S;
func Ext_eval(p,x) -> Element of S means
:: FIELD_11:def 4
  ex y being FinSequence of S
  st it = Sum y & len y = len SgmX(BagOrder n, Support p) &
  for i being Element of NAT st 1 <= i & i <= len y
  holds y.i = In( (p * SgmX(BagOrder n, Support p)).i, S) *
              eval(SgmX(BagOrder n, Support p)/.i,x);
end;

theorem :: FIELD_11:16
for R,S being non degenerated comRing
for n being Ordinal
for x being Function of n,S holds Ext_eval(0_(n,R),x) = 0.S;

theorem :: FIELD_11:17
for R,S being non degenerated comRing
for n being Ordinal
for x being Function of n,S
st R is Subring of S holds Ext_eval(1_(n,R),x) = 1.S;

theorem :: FIELD_11:18
for R,S being non degenerated comRing
for n being Ordinal
for p being Polynomial of n,R
for b being bag of n st Support p = {b}
for x being Function of n,S holds Ext_eval(p,x) = In(p.b,S) * eval(b,x);

theorem :: FIELD_11:19
for R,S being non degenerated comRing
for n being Ordinal
for p,q being Polynomial of n,R
for x being Function of n,S
st R is Subring of S holds Ext_eval(p+q,x) = Ext_eval(p,x) + Ext_eval(q,x);

theorem :: FIELD_11:20
for R,S being non degenerated comRing
for n being Ordinal
for p,q being Polynomial of n,R
for x being Function of n,S
st R is Subring of S holds Ext_eval(p*'q,x) = Ext_eval(p,x) * Ext_eval(q,x);


:: "... To each polynomial f in K[X] we associate a letter X_f and we let
:: S be the set of all such letters X_f (so that S is in bijection with the
:: set of all polynomials in K[X] of degree >= 1). We form the polynomial
:: ring K[S], ..."


:: First a bijection between the set of all polynomials in K[X] of degree >= 1
:: and S = n, where n = card {p in K[X] | deg p > = 1}, is shown to exist.

definition
let F be Field;
func nonConstantPolys F ->
                      non empty Subset of the carrier of Polynom-Ring F equals
:: FIELD_11:def 5
  the set of all p where p is
                     non constant Element of the carrier of Polynom-Ring F;
end;

registration
let F be Field;
cluster card(nonConstantPolys F) -> non empty;
end;

registration
let F be Field;
cluster bijective for
              Function of (nonConstantPolys F),card(nonConstantPolys F);
end;

definition
let F be Field;
let g be Function of (nonConstantPolys F),card(nonConstantPolys F);
let p be non constant Element of the carrier of Polynom-Ring F;
redefine func g.p -> Ordinal;
end;


:: Translation of polynomials from K[X] into K[X1,X2,...] = K[n]:
:: For p in K[X] we have Poly(m,p) = p(Xm) where m is the m-th variable of
:: n = card { p in K[X] | deg p >= 1 }
:: --- if not m in n, then Poly(m,p) is the constant polynomial given by p(0)


definition
let F be Field;
let m be Ordinal;
let p be Polynomial of F;
func Poly(m,p) -> Polynomial of card(nonConstantPolys F),F means
:: FIELD_11:def 6
   it.(EmptyBag card(nonConstantPolys F)) = p.0 &
   (for b being bag of card(nonConstantPolys F)
                                  st support b = {m} holds it.b = p.(b.m)) &
   (for b being bag of card(nonConstantPolys F)
                   st support b <> {} & support b <> {m} holds it.b = 0.F);
end;

definition
let F be Field;
let g be bijective Function of (nonConstantPolys F),card(nonConstantPolys F);
func nonConstantPolys(g,F) ->
            non empty Subset of Polynom-Ring(card(nonConstantPolys F),F) equals
:: FIELD_11:def 7
  the set of all Poly(g.p,p)
        where p is non constant Element of the carrier of Polynom-Ring F;
end;

registration
let F be Field;
let m be Ordinal;
let p be Polynomial of F;
cluster Poly(m,LM p) -> monomial-like;
end;

theorem :: FIELD_11:21
for F being Field
for m being Ordinal st m in card(nonConstantPolys F)
for p being Polynomial of F
holds Poly(m,p) = 0_(card(nonConstantPolys F),F) iff p = 0_.(F);

theorem :: FIELD_11:22
for F being Field
for m being Ordinal st m in card(nonConstantPolys F)
for p being Polynomial of F
for a being Element of F
holds Poly(m,p) = a|(card(nonConstantPolys F),F) iff p = a|F;

theorem :: FIELD_11:23
for F being Field
for m being Ordinal st m in card(nonConstantPolys F)
for p being non zero Element of the carrier of Polynom-Ring F
holds Support Poly(m,p) = {EmptyBag card(nonConstantPolys F)} iff p is constant
;

theorem :: FIELD_11:24
for F being Field
for m1,m2 being Ordinal
st m1 in card(nonConstantPolys F) & m2 in card(nonConstantPolys F)
for p1,p2 being non constant Polynomial of F
st Poly(m1,p1) = Poly(m2,p2) holds m1 = m2 & p1 = p2;

theorem :: FIELD_11:25
for F being Field
for m being Ordinal st m in card(nonConstantPolys F)
for p being constant Polynomial of F
holds Lt Poly(m,p) = EmptyBag card(nonConstantPolys F) & LC Poly(m,p) = p.0;

theorem :: FIELD_11:26
for F being Field
for m being Ordinal st m in card(nonConstantPolys F)
for p being non constant Polynomial of F
holds (Lt Poly(m,p)).m = deg p &
      for o being Ordinal st o <> m holds (Lt Poly(m,p)).o = 0;

theorem :: FIELD_11:27
for F being Field
for m being Ordinal st m in card(nonConstantPolys F)
for p being Polynomial of F
holds LC Poly(m,LM p) = LC Poly(m,p) & Lt Poly(m,LM p) = Lt Poly(m,p);

theorem :: FIELD_11:28
for F being Field
for m being Ordinal st m in card(nonConstantPolys F)
for p being Polynomial of F holds
Poly(m,LM p) = Monom(LC Poly(m,p),Lt Poly(m,p));

theorem :: FIELD_11:29
for F being Field
for m being Ordinal st m in card(nonConstantPolys F)
for p being Polynomial of F holds LM Poly(m,p) = Poly(m,LM p);

theorem :: FIELD_11:30
for F being Field
for m being Ordinal
for p,q being Polynomial of F holds Poly(m,p+q) = Poly(m,p) + Poly(m,q);

theorem :: FIELD_11:31
for F being Field
for m being Ordinal
for p being Polynomial of F holds Poly(m,-p) = - Poly(m,p);

theorem :: FIELD_11:32
for F being Field,
    a being non zero Element of F,
    i being Nat, m being Ordinal st m in card(nonConstantPolys F)
holds Poly(m,anpoly(a,0)) *' Poly(m,anpoly(1.F,i)) = Poly(m,anpoly(a,i));

theorem :: FIELD_11:33
for F being Field,
    i being Element of NAT,
    m being Ordinal st m in card(nonConstantPolys F)
holds Poly(m,anpoly(1.F,1)) *' Poly(m,anpoly(1.F,i)) = Poly(m,anpoly(1.F,i+1));

theorem :: FIELD_11:34
for F being Field,
    i being Nat
for m being Ordinal st m in card(nonConstantPolys F) holds
(power Polynom-Ring(card(nonConstantPolys F),F)).(Poly(m,anpoly(1.F,1)),i)
    = Poly(m,anpoly(1.F,i));

theorem :: FIELD_11:35
for F being Field
for p being non constant Element of the carrier of Polynom-Ring F
for m being Ordinal st m in card(nonConstantPolys F)
holds Poly(m,anpoly(LC p,deg p)) = LM Poly(m,p);


:: "... and contend that the ideal generated by all the polynomials
:: f(X_f) in K[S] is not the unit ideal. ..."


theorem :: FIELD_11:36
for F being Field
for P being finite Subset of the carrier of Polynom-Ring F
ex E being FieldExtension of F
st for p being non constant Element of the carrier of Polynom-Ring F
st p in P holds p is_with_roots_in E;

theorem :: FIELD_11:37
for F being Field, E being FieldExtension of F
for m being Ordinal st m in card(nonConstantPolys F)
for p being Polynomial of F
for x being Function of card(nonConstantPolys F),E
holds Ext_eval(Poly(m,p),x) = Ext_eval(p,x/.m);

theorem :: FIELD_11:38
for R being non degenerated comRing
for M being non empty Subset of R
for o being object
holds o in M-Ideal iff
      ex P being non empty finite Subset of R,
         L being LinearCombination of P st P c= M & o = Sum L;


:: "... If it is, then there is a finite combination of elements in our ideal
:: which is equal to 1: g1 * f1(X_f1) + ... + gn * fn(X_fn) = 1 with gi in K[S].
:: For simplicity, write Xi instead of X_fi. ...
:: Let F be a finite extension in which each polynomial f1, ..., fn has a root,
:: say ai is a root of fi in F, for i = 1,..., n. Let ai = 0 for i > n.
:: Substitute ai for Xi in our relation. We get 0 = 1, contradiction. ... "


registration
let F be Field;
let g be bijective Function of (nonConstantPolys F),card(nonConstantPolys F);
cluster nonConstantPolys(g,F)-Ideal -> proper;
end;


:: "... Let m be a maximal ideal generated by all polynomials f(X_f) in K[S].
:: Then K[S]/m is a field, ..."


definition
let R be non degenerated commutative Ring;
let I be proper Ideal of R;
mode maxIdeal of I -> Ideal of R means
:: FIELD_11:def 8
  I c= it & it is maximal;
end;

registration
let R be non degenerated commutative Ring;
let I be proper Ideal of R;
cluster -> maximal for maxIdeal of I;
end;

definition
let F be Field;
let g be bijective Function of (nonConstantPolys F),card(nonConstantPolys F);
let I be maxIdeal of nonConstantPolys(g,F)-Ideal;
func KroneckerField(F,g,I) -> Field equals
:: FIELD_11:def 9
  Polynom-Ring(card(nonConstantPolys F),F) / I;
end;


:: " ... and we have a canonical map sigma: K[S] -> K[S]/m.
:: For any polynomial f in K[X] of degree >= 1, the polynomial sigma(f) has
:: a root in K[S]/m, which is an extension of sigma(K). ..."


:: Embedding F in KroneckerField(F,b,I)

definition
let n be Ordinal;
let R be non degenerated Ring;
func canHom(n,R) -> Function of R,Polynom-Ring(n,R) means
:: FIELD_11:def 10
  for a being Element of R holds it.a = a|(n,R);
end;

registration
let n be Ordinal;
let R be non degenerated comRing;
cluster canHom(n,R) -> additive multiplicative unity-preserving;
end;

registration
let n be Ordinal;
let R be non degenerated comRing;
cluster canHom(n,R) -> monomorphism;
end;

definition
let F be Field;
let g be bijective Function of (nonConstantPolys F),card(nonConstantPolys F);
let I be maxIdeal of nonConstantPolys(g,F)-Ideal;
func emb(F,I,g) -> Function of F,KroneckerField(F,g,I) equals
:: FIELD_11:def 11
  (canHom I) * (canHom(card(nonConstantPolys F),F));
end;

registration
let F be Field;
let g be bijective Function of (nonConstantPolys F),card(nonConstantPolys F);
let I be maxIdeal of nonConstantPolys(g,F)-Ideal;
cluster emb(F,I,g) -> additive multiplicative unity-preserving;
end;

registration
let F be Field;
let g be bijective Function of (nonConstantPolys F),card(nonConstantPolys F);
let I be maxIdeal of nonConstantPolys(g,F)-Ideal;
cluster emb(F,I,g) -> monomorphism;
end;

registration
let F be Field;
let g be bijective Function of (nonConstantPolys F),card(nonConstantPolys F);
let I be maxIdeal of nonConstantPolys(g,F)-Ideal;
cluster KroneckerField(F,g,I) -> F-monomorphic F-homomorphic;
end;

::  the roots are - analogous to Kronecker's construction - the classes [Xm]

definition
let F be Field;
let m be Ordinal;
let g be bijective Function of (nonConstantPolys F),card(nonConstantPolys F);
let I be maxIdeal of nonConstantPolys(g,F)-Ideal;
func KrRoot(I,m) -> Element of KroneckerField(F,g,I) equals
:: FIELD_11:def 12
  Class(EqRel(Polynom-Ring(card(nonConstantPolys F),F),I),Poly(m,<%0.F,1.F%>));
end;

theorem :: FIELD_11:39
for F being Field
for g being bijective Function of (nonConstantPolys F),card(nonConstantPolys F)
for I being maxIdeal of nonConstantPolys(g,F)-Ideal
for a being Element of F holds
emb(F,I,g).a = Class(EqRel(Polynom-Ring(card(nonConstantPolys F),F),I),
                     a|(card(nonConstantPolys F),F));

theorem :: FIELD_11:40
for F being Field
for g being bijective Function of (nonConstantPolys F),card(nonConstantPolys F)
for I being maxIdeal of nonConstantPolys(g,F)-Ideal
for p being Element of the carrier of Polynom-Ring F
for n being Element of NAT holds
((PolyHom emb(F,I,g)).p).n =
    Class(EqRel(Polynom-Ring(card(nonConstantPolys F),F),I),
          (p.n)|(card(nonConstantPolys F),F));

theorem :: FIELD_11:41
for F being Field
for g being bijective Function of (nonConstantPolys F),card(nonConstantPolys F)
for I being maxIdeal of nonConstantPolys(g,F)-Ideal
for p being Element of the carrier of Polynom-Ring F
for m being Ordinal st m in card(nonConstantPolys F)
holds eval((PolyHom emb(F,I,g)).p,KrRoot(I,m)) =
      Class(EqRel(Polynom-Ring(card(nonConstantPolys F),F),I), Poly(m,p));

theorem :: FIELD_11:42
for F being Field
for g being bijective Function of (nonConstantPolys F),card(nonConstantPolys F)
for I being maxIdeal of nonConstantPolys(g,F)-Ideal
for p being non constant Element of the carrier of Polynom-Ring F
holds KrRoot(I,g.p) is_a_root_of (PolyHom emb(F,I,g)).p;


:: "... Using the same set-theoretic argument as in Proposition 2.3, we conclude
:: that there exists an extension E1 of K in which every polynomial f in K[X] of
:: degree >= 1 has a root in E1."


theorem :: FIELD_11:43 :: Artin
for F being Field
ex E1 being FieldExtension of F
st for p being non constant Element of the carrier of Polynom-Ring F
   holds p is_with_roots_in E1;


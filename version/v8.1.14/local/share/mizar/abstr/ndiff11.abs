:: Implicit Function Theorem -- Part {III } and Inverse Function Theorem -- 
:: Part {II}
::  by Kazuhisa Nakasho and Yasunari Shidama
:: 
:: Received September 30, 2022
:: Copyright (c) 2022-2023 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NDIFF11, NUMBERS, REAL_1, ZFMISC_1, NORMSP_1, PRE_TOPC, PARTFUN1,
      FUNCT_1, NAT_1, FDIFF_1, SUBSET_1, RELAT_1, LOPBAN_1, RCOMP_1, SQUARE_1,
      TARSKI, ARYTM_3, VALUED_1, ALGSTR_0, PRALG_1, FUNCT_2, ARYTM_1, SEQ_2,
      ORDINAL2, SUPINF_2, FCONT_1, STRUCT_0, CARD_1, XXREAL_0, XBOOLE_0,
      FINSEQ_1, RLVECT_1, CFCONT_1, NDIFF_7, MCART_1, CARD_3, METRIC_1,
      ORDINAL4, FINSEQ_2, COMPLEX1, RVSUM_1, RFINSEQ, VECTSP_1, MATRIX_1,
      MATRIX_3, MATRLIN2, REAL_NS1, EUCLID, XCMPLX_0, FUNCOP_1, FUNCT_7,
      MSSUBFAM, RLVECT_5, VALUED_0, QC_LANG1, FVSUM_1, INCSP_1, TREES_1,
      MATRIXR1, PDIFF_1, BORSUK_1, AFINSQ_1, EUCLID_7;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, FUNCT_1, ORDINAL1, RELSET_1,
      PARTFUN1, FUNCT_2, BINOP_1, FUNCOP_1, NUMBERS, XCMPLX_0, XXREAL_0,
      XREAL_0, SQUARE_1, FINSEQ_1, FINSEQ_2, VALUED_1, RVSUM_1, RFINSEQ,
      FINSEQ_7, MATRIX_0, STRUCT_0, ALGSTR_0, PRE_TOPC, RLVECT_1, VECTSP_1,
      NORMSP_0, NORMSP_1, MATRIX_1, FVSUM_1, MATRIX_3, RLVECT_5, EUCLID,
      LOPBAN_1, MATRIX_6, NFCONT_1, NDIFF_1, NDIFF_2, REAL_NS1, PDIFF_1,
      LOPBAN_5, EUCLID_7, PDIFF_7, PRVECT_3, MATRTOP1, NDIFF_7, MATRIX15,
      NDIFF_8, LOPBAN13;
 constructors SQUARE_1, NDIFF_1, RELSET_1, NDIFF_2, NDIFF_7, NDIFF_8, LOPBAN_5,
      LOPBAN13, RFINSEQ, MATRTOP1, MATRIX_3, MATRIX_6, REAL_NS3, RSSPACE,
      FVSUM_1, MONOID_0, BINOP_2, FDIFF_1, EUCLID_7, FINSEQ_7, FINSOP_1,
      PDIFF_1, PDIFF_7, LAPLACE, MATRIX15;
 registrations RELSET_1, STRUCT_0, XREAL_0, MEMBERED, XBOOLE_0, LOPBAN_1,
      PRVECT_3, EUCLID, SQUARE_1, VALUED_0, NAT_1, VECTSP_1, REAL_NS1,
      FINSEQ_2, CARD_1, ORDINAL1, FINSEQ_1, FINSEQ_9, FUNCT_1, FUNCT_2,
      MONOID_0, NUMBERS, RELAT_1, VALUED_1, XXREAL_0, NDIFF_1, FUNCOP_1,
      PDIFF_1, NORMSP_3;
 requirements SUBSET, BOOLE, NUMERALS, ARITHM, REAL;


begin :: Matrix and linear transformation on Euclidean spaces

registration
  let n be Nat;
  cluster REAL-NS n -> finite-dimensional;
end;

theorem :: NDIFF11:1
  for n be non zero Nat,
      X be RealNormSpace,
      f be LinearOperator of REAL-NS n,X
  holds f is Lipschitzian;

theorem :: NDIFF11:2
  for m be non zero Nat,
    s,t be FinSequence of REAL m
    st 1 <= len s & s = t | len(s)
  holds
    for i be Nat st 1 <= i <= len s
    holds (accum t).i = (accum s).i;

theorem :: NDIFF11:3
  for m be non zero Nat,
    s,s1 be FinSequence of REAL m,
      s0 be Element of REAL m
    st s1 = s ^ <*s0*>
  holds Sum s1 = Sum s + s0;

theorem :: NDIFF11:4
  for m be non zero Nat,
      s be FinSequence of REAL m,
      j be Nat
    st 1 <= j <= m
  holds
    ex t be FinSequence of REAL
    st len t = len s
      & ( for i be Nat st 1 <= i <= len s
          holds
          ex si be Element of REAL m
          st si = s.i & t.i = si.j )
      & (Sum s).j = Sum t;

theorem :: NDIFF11:5
  for m be non zero Nat
  for x be Element of REAL m
  holds
    ex s be FinSequence of REAL m
    st dom s = Seg m
      & (for i be Nat st 1 <= i <= m
        holds
          ex ei be Element of REAL m
          st ei = reproj(i, 0* m).1
            & s.i = proj(i,m).x * ei)
      & Sum s = x;

theorem :: NDIFF11:6
  for m,n be non zero Element of NAT,
        M be Matrix of m,n,F_Real
  holds
    Mx2Tran(M) is Lipschitzian LinearOperator
    of REAL-NS m,REAL-NS n;

theorem :: NDIFF11:7
  for m be non zero Element of NAT,
      f be LinearOperator of REAL-NS m,REAL-NS m
    st f is bijective
  holds
    ex g be Lipschitzian LinearOperator of REAL-NS m,REAL-NS m
    st g = f" & g is one-to-one onto;

theorem :: NDIFF11:8
  for m be non zero Element of NAT,
      f be LinearOperator of REAL-NS m,REAL-NS m
    st f is bijective
  holds
    ex g be Point of R_NormSpace_of_BoundedLinearOperators(REAL-NS m,REAL-NS m)
    st g = f & g is invertible;

theorem :: NDIFF11:9
  for m,n be non zero Element of NAT,
        M be Matrix of m, F_Real
  holds
    Mx2Tran(M) is bijective
      iff
    Det M <> 0.F_Real;

theorem :: NDIFF11:10
  for m,n be non zero Element of NAT,
        M be Matrix of m, F_Real
  holds
    Mx2Tran(M) is bijective
      iff
    M is invertible;

theorem :: NDIFF11:11
  for m be non zero Element of NAT,
      f be Point of R_NormSpace_of_BoundedLinearOperators(REAL-NS m,REAL-NS m)
    st f is one-to-one & rng f = the carrier of REAL-NS m
  holds f is invertible;

theorem :: NDIFF11:12
  for m be non zero Element of NAT,
      f be Point of
        R_NormSpace_of_BoundedLinearOperators(REAL-NS m, REAL-NS m),
      M be Matrix of m, F_Real
    st f = Mx2Tran(M)
  holds
    f is invertible
      iff
    M is invertible;

theorem :: NDIFF11:13
  for m be non zero Element of NAT,
      f be Point of
        R_NormSpace_of_BoundedLinearOperators(REAL-NS m, REAL-NS m),
      M be Matrix of m, F_Real
    st f = Mx2Tran(M)
  holds
    f is invertible
      iff
    Det M <> 0.F_Real;

theorem :: NDIFF11:14
  for m,n be non zero Element of NAT
  ex f be Function of [:REAL m,REAL n:], REAL(m+n)
  st ( for x be Element of REAL m, y be Element of REAL n
        holds f.(x,y) = x ^ y )
    & f is one-to-one & f is onto;

theorem :: NDIFF11:15
  for m,n be non zero Element of NAT
  ex f be Function of [:REAL-NS m,REAL-NS n:], REAL-NS(m+n)
  st f is one-to-one & f is onto
    & ( for x be Element of REAL m, y be Element of REAL n
        holds f.(x, y) = x ^ y )
    & ( for u,v be Point of [:REAL-NS m,REAL-NS n:]
        holds f.(u + v) = f.u + f.v )
    & ( for u be Point of [:REAL-NS m,REAL-NS n:], r be Real
        holds f.(r * u) = r * f.u )
  & f.(0.[:REAL-NS m,REAL-NS n:]) = 0.(REAL-NS(m+n))
  & ( for u be Point of [:REAL-NS m,REAL-NS n:]
      holds ||.f.u.|| = ||.u.|| );

begin :: Total derivative and partial derivative

theorem :: NDIFF11:16
  for X,Y be RealNormSpace,
        x be Point of X,
        f be Lipschitzian LinearOperator of X,Y
  holds f is_differentiable_in x
      & f = diff(f,x);

theorem :: NDIFF11:17
  for n be non zero Nat,
      i be Nat,
      x be Point of REAL-NS n
    st 1 <= i <= n
  holds
    Proj(i,n) is_differentiable_in x
      &
    diff(Proj(i,n),x) = Proj(i,n);

theorem :: NDIFF11:18
  for m, n be non zero Nat
  for f be PartFunc of REAL m,REAL n
  for x be Element of REAL m
  holds
    f is_differentiable_in x
      iff
    for i be Nat st 1 <= i <= n
    holds
    ex fi be PartFunc of REAL m,REAL 1
    st fi = Proj(i,n) * f
     & fi is_differentiable_in x;

theorem :: NDIFF11:19
  for m, n be non zero Nat
  for f be PartFunc of REAL m,REAL n
  for x be Element of REAL m
  holds
    f is_differentiable_in x
      iff
    for i be Nat st 1 <= i <= n
    holds
    ex fi be PartFunc of REAL m,REAL
    st fi = proj(i,n) * f
     & fi is_differentiable_in x;

theorem :: NDIFF11:20
  for m, n be non zero Nat
  for f be PartFunc of REAL m,REAL n
  for x be Element of REAL m
  st f is_differentiable_in x
  holds
    for i be Nat,
       fi be PartFunc of REAL m,REAL
    st 1 <= i <= n
     & fi = proj(i,n) * f
    holds
        fi is_differentiable_in x
      & diff(fi,x) = proj(i,n) * diff(f,x);

theorem :: NDIFF11:21
  for m,n be non zero Nat,
        f be PartFunc of REAL m,REAL n,
        x be Element of REAL m
   st f is_differentiable_in x
  holds
    for i,j be Nat
     st 1 <= i <= m
      & 1 <= j <= n
    holds f is_partial_differentiable_in x,i,j;

theorem :: NDIFF11:22
  for m,n be non zero Nat,
        f be PartFunc of REAL-NS m,REAL-NS n,
        x be Element of REAL-NS m
   st f is_differentiable_in x
  holds
    for i,j be Nat
     st 1 <= i <= m
      & 1 <= j <= n
    holds f is_partial_differentiable_in x,i,j;

theorem :: NDIFF11:23
  for m be non zero Nat
  for f be PartFunc of REAL m,REAL
  for x be Element of REAL m
    st f is_differentiable_in x
  holds
    for u,v be Element of REAL m
    holds diff(f,x).(u+v) = diff(f,x).u + diff(f,x).v;

theorem :: NDIFF11:24
  for m be non zero Nat
  for f be PartFunc of REAL m,REAL
  for x be Element of REAL m
    st f is_differentiable_in x
  holds
    for u be Element of REAL m, a be Real
    holds diff(f,x).(a*u) = a * diff(f,x).u;

theorem :: NDIFF11:25
  for m be non zero Nat
  for f be PartFunc of REAL m,REAL
  for x be Element of REAL m
    st f is_differentiable_in x
  holds
    for s be FinSequence of REAL m,
        t be FinSequence of REAL
      st dom s = dom t
       & for i be Nat st i in dom s
         holds t.i = diff(f,x).(s.i)
    holds diff(f,x).(Sum s) = Sum t;

theorem :: NDIFF11:26
  for m be non zero Nat
  for f be PartFunc of REAL m,REAL
  for x be Element of REAL m
    st f is_differentiable_in x
  holds
    for dx be Element of REAL m
    ex dy be FinSequence of REAL
    st dom dy = Seg m
     & ( for i be Nat st 1 <= i <= m
         holds dy.i = proj(i,m).dx * partdiff(f,x,i) )
    & diff(f,x).dx = Sum dy;

theorem :: NDIFF11:27
  for m,n be non zero Element of NAT,
        X be Subset of REAL-NS m,
        f be PartFunc of REAL-NS m,REAL-NS n
    st X is open & X c= dom f
  holds
    f is_differentiable_on X & f `| X is_continuous_on X
      iff
    for i,j be Nat st 1 <= i <= m & 1 <= j <= n
    holds
      Proj(j,n) * f is_partial_differentiable_on X,i
    & (Proj(j,n) * f) `partial| (X,i) is_continuous_on X;

begin :: Jacobian matrix

definition
  let m,n be non zero Nat;
  let f be PartFunc of REAL m,REAL n;
  let x be Element of REAL m;

  func Jacobian(f,x) -> Matrix of m,n,F_Real
  means
:: NDIFF11:def 1

  for i,j be Nat st i in Seg m & j in Seg n
  holds it * (i,j) = partdiff(f,x,i,j);
end;

theorem :: NDIFF11:28
  for m,n be non zero Nat
  for f be PartFunc of REAL m,REAL n
  for x be Element of REAL m
   st f is_differentiable_in x
  holds diff(f,x) = Mx2Tran(Jacobian(f,x));

definition
  let m,n be non zero Nat;
  let f be PartFunc of REAL-NS m,REAL-NS n;
  let x be Point of REAL-NS m;
  func Jacobian(f,x) -> Matrix of m,n,F_Real
  means
:: NDIFF11:def 2

  ex g be PartFunc of REAL m,REAL n,
     y be Element of REAL m
  st g = f & y = x
   & it = Jacobian(g,y);
end;

theorem :: NDIFF11:29
  for m,n be non zero Element of NAT,
        x be Point of REAL-NS m,
        f be PartFunc of REAL-NS m,REAL-NS n
    st f is_differentiable_in x
  holds diff(f,x) = Mx2Tran(Jacobian(f,x));

begin

theorem :: NDIFF11:30
  for m be non zero Element of NAT,
      f be PartFunc of REAL-NS m, REAL-NS m,
      x be Point of REAL-NS m
    st f is_differentiable_in x
  holds
    diff(f,x) is invertible
      iff
    Jacobian(f,x) is invertible;

theorem :: NDIFF11:31
  for m be non zero Element of NAT,
      f be PartFunc of REAL-NS m, REAL-NS m,
      x be Point of REAL-NS m
    st f is_differentiable_in x
  holds
    diff(f,x) is invertible
      iff
    Det(Jacobian(f,x)) <> 0.F_Real;

begin :: Implicit and inverse function theorems on Euclidean spaces

theorem :: NDIFF11:32
  for l,m,n be non zero Element of NAT,
          Z be Subset of [:REAL-NS l,REAL-NS m:],
          f be PartFunc of [:REAL-NS l,REAL-NS m:], REAL-NS n,
          a be Point of REAL-NS l,
          b be Point of REAL-NS m,
          c be Point of REAL-NS n,
          z be Point of [:REAL-NS l,REAL-NS m:]
   st Z is open & dom f = Z
    & f is_differentiable_on Z
    & f `| Z is_continuous_on Z
    & [a,b] in Z & f.(a,b) = c
    & z = [a,b]
    & partdiff`2(f,z) is invertible
  holds
    ex r1,r2 be Real
    st 0 < r1 & 0 < r2
     & [:Ball(a,r1),cl_Ball(b,r2):] c= Z
     & ( for x be Point of REAL-NS l st x in Ball(a,r1) holds
         ex y be Point of REAL-NS m
         st y in Ball(b,r2) & f.(x,y) = c )
     & ( for x be Point of REAL-NS l st x in Ball(a,r1) holds
         for y1,y2 be Point of REAL-NS m
         st y1 in Ball(b,r2) & y2 in Ball(b,r2)
          & f.(x,y1) = c & f.(x,y2) = c
         holds y1 = y2 )
     & ( ex g be PartFunc of REAL-NS l,REAL-NS m
         st dom g = Ball(a,r1) & rng g c= Ball(b,r2)
          & g is_continuous_on Ball(a,r1)
          & g.a = b
          & ( for x be Point of REAL-NS l st x in Ball(a,r1)
              holds f.(x,g.x) = c )
          & g is_differentiable_on Ball(a,r1)
          & g `| Ball(a,r1) is_continuous_on Ball(a,r1)
          & ( for x be Point of REAL-NS l,
                  z be Point of [:REAL-NS l,REAL-NS m:]
              st x in Ball(a,r1) & z = [x,g.x]
              holds diff(g,x) = - (Inv partdiff`2(f,z)) * partdiff`1(f,z) )
          & ( for x be Point of REAL-NS l,
                  z be Point of [:REAL-NS l,REAL-NS m:]
              st x in Ball(a,r1) & z = [x,g.x]
              holds partdiff`2(f,z) is invertible ) )
     & ( for g1,g2 be PartFunc of REAL-NS l,REAL-NS m
         st dom g1 = Ball(a,r1)
          & rng g1 c= Ball(b,r2)
          & ( for x be Point of REAL-NS l st x in Ball(a,r1)
              holds f.(x,g1.x) = c )
          & dom g2 = Ball(a,r1)
          & rng g2 c= Ball(b,r2)
          & ( for x be Point of REAL-NS l st x in Ball(a,r1)
              holds f.(x,g2.x) = c )
         holds g1 = g2);

theorem :: NDIFF11:33
  for l,m be non zero Element of NAT,
        Z be Subset of [:REAL-NS l,REAL-NS m:],
        f be PartFunc of [:REAL-NS l,REAL-NS m:], REAL-NS m,
        a be Point of REAL-NS l,
        b,c be Point of REAL-NS m,
        z be Point of [:REAL-NS l,REAL-NS m:]
    st Z is open & dom f = Z
     & f is_differentiable_on Z
     & f `| Z is_continuous_on Z
     & [a,b] in Z & f.(a,b) = c
     & z = [a,b]
     & Det(Jacobian(f * (reproj2 z),z`2)) <> 0.F_Real
    holds
      ex r1,r2 be Real
      st 0 < r1 & 0 < r2
       & [:Ball(a,r1),cl_Ball(b,r2):] c= Z
       & ( for x be Point of REAL-NS l st x in Ball(a,r1) holds
           ex y be Point of REAL-NS m
           st y in Ball(b,r2) & f.(x,y) = c )
       & ( for x be Point of REAL-NS l st x in Ball(a,r1) holds
           for y1,y2 be Point of REAL-NS m
           st y1 in Ball(b,r2) & y2 in Ball(b,r2)
            & f.(x,y1) = c & f.(x,y2) = c
           holds y1 = y2 )
       & ( ex g be PartFunc of REAL-NS l,REAL-NS m
           st dom g = Ball(a,r1) & rng g c= Ball(b,r2)
            & g is_continuous_on Ball(a,r1)
            & g.a = b
            & ( for x be Point of REAL-NS l st x in Ball(a,r1)
                holds f.(x,g.x) = c )
            & g is_differentiable_on Ball(a,r1)
            & g `| Ball(a,r1) is_continuous_on Ball(a,r1)
            & ( for x be Point of REAL-NS l,
                    z be Point of [:REAL-NS l,REAL-NS m:]
                st x in Ball(a,r1) & z = [x,g.x]
                holds diff(g,x) = - ( Inv partdiff`2(f,z)) * partdiff`1(f,z) )
            & ( for x be Point of REAL-NS l,
                    z be Point of [:REAL-NS l,REAL-NS m:]
                st x in Ball(a,r1) & z = [x,g.x]
                holds partdiff`2(f,z) is invertible ) )
       & ( for g1,g2 be PartFunc of REAL-NS l,REAL-NS m
           st dom g1 = Ball(a,r1)
            & rng g1 c= Ball(b,r2)
            & ( for x be Point of REAL-NS l st x in Ball(a,r1)
                holds f.(x,g1.x) = c )
            & dom g2 = Ball(a,r1)
            & rng g2 c= Ball(b,r2)
            & ( for x be Point of REAL-NS l st x in Ball(a,r1)
                holds f.(x,g2.x) = c )
          holds g1 = g2 );

theorem :: NDIFF11:34
  for m be non zero Element of NAT,
      Z be Subset of REAL-NS m,
      f be PartFunc of REAL-NS m,REAL-NS m,
      a be Point of REAL-NS m,
      b be Point of REAL-NS m
  st Z is open & dom f = Z
   & f is_differentiable_on Z
   & f `| Z is_continuous_on Z
   & a in Z & f.a = b
   & Det ( Jacobian(f,a) ) <> 0.F_Real
  holds
    ex A be Subset of REAL-NS m,B be Subset of REAL-NS m,
       g be PartFunc of REAL-NS m,REAL-NS m
    st A is open & B is open
     & A c= dom f
     & a in A & b in B
     & f.:A = B
     & dom g = B & rng g = A
     & dom(f|A) = A & rng(f|A) = B
     & (f|A) is one-to-one
     & g is one-to-one
     & g = (f|A)"
     & (f|A) = g"
     & g.b = a
     & g is_continuous_on B
     & g is_differentiable_on B
     & g `| B is_continuous_on B
     & ( for y be Point of REAL-NS m st y in B
         holds diff(f,g/.y) is invertible )
     & ( for y be Point of REAL-NS m st y in B
         holds diff(g,y) = Inv diff(f,g/.y) );

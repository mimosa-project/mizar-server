:: {O}n {B}ag of 1. {P}art {I}
::  by Yasushige Watase
:: 
:: Received March 31, 2023
:: Copyright (c) 2023 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, SUBSET_1, RELAT_1, FINSEQ_1, XBOOLE_0, BINOP_1, CARD_3,
      FUNCT_1, XXREAL_0, TARSKI, NAT_1, ARYTM_3, ORDERS_1, FINSET_1, ZFMISC_1,
      CARD_1, PARTFUN1, ORDINAL1, ARYTM_1, FUNCOP_1, FUNCT_2, PRE_POLY,
      GROUP_1, ALGSTR_0, RLVECT_1, VECTSP_1, LATTICES, SUPINF_2, MESFUNC1,
      MOD_4, POLYNOM1, ALGSEQ_1, POLYNOM3, FUNCT_4, VECTSP_2, QUOFIELD,
      MSSUBFAM, RING_3, FUNCSDOM, RING_2, FDIFF_1, C0SP1, STRUCT_0, REALSET1,
      POLYALG1, ALGSTR_1, PRGCOR_2, POLYALGX;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, RELAT_1, FUNCT_1, ORDINAL1,
      RELSET_1, PARTFUN1, FUNCT_2, BINOP_1, DOMAIN_1, FUNCT_3, FUNCOP_1,
      REALSET1, FINSET_1, CARD_1, ORDERS_1, NUMBERS, XCMPLX_0, XXREAL_0,
      XREAL_0, NAT_1, NAT_D, XXREAL_2, FINSEQ_1, RECDEF_1, FUNCT_7, AFINSQ_1,
      PRE_POLY, STRUCT_0, ALGSTR_0, RLVECT_1, GROUP_1, VECTSP_1, ALGSTR_1,
      VECTSP_2, VFUNCT_1, POLYNOM1, GROUP_6, RINGCAT1, MOD_4, QUOFIELD,
      POLYNOM3, POLYALG1, POLYNOM7, C0SP1, RING_2, RING_3;
 constructors RELSET_1, FUNCT_3, REALSET1, ORDERS_1, NAT_D, XXREAL_2, RECDEF_1,
      FUNCT_7, AFINSQ_1, VFUNCT_1, RINGCAT1, POLYNOM5, UPROOTS, POLYALG1,
      POLYNOM7, RING_3;
 registrations RELAT_1, FUNCT_1, ORDINAL1, FINSET_1, XREAL_0, NAT_1, CARD_1,
      FINSEQ_1, VALUED_0, RELSET_1, FUNCT_2, RFUNCT_2, STRUCT_0, VECTSP_1,
      NAT_6, RING_4, POLYNOM1, PRE_POLY, VFUNCT_1, MEMBERED, POLYNOM2, FVSUM_1,
      MOD_4, AFINSQ_1, POLYNOM3, FUNCOP_1, SUBSET_1, PBOOLE, RINGCAT1,
      POLYALG1, REALSET1, XXREAL_2, NEWTON04, RVSUM_4, GCD_1;
 requirements NUMERALS, REAL, SUBSET, BOOLE, ARITHM;


begin :: Preliminaries

 reserve o,o1,o2 for object;
 reserve n for Ordinal;
 reserve R,L for non degenerated comRing;
 reserve b for bag of 1;

theorem :: POLYALGX:1
   for f be sequence of R holds
   Support f = {} iff f = 0_.R;

theorem :: POLYALGX:2
   for f be sequence of R st Support f is finite holds
   f is finite-Support sequence of R;

theorem :: POLYALGX:3
   for f be sequence of R st f is finite-Support sequence of R holds
   Support f is finite;

::$N Translation Bags 1 notation to NAT.

theorem :: POLYALGX:4
    for b be bag of 1 holds dom b = {0} & rng b = {b.0};

theorem :: POLYALGX:5
   for b be bag of 1 holds b = 1 --> b.0;

theorem :: POLYALGX:6
   for b1,b2 be bag of 1 holds b1 + b2 = 1 --> ((b1.0) + (b2.0));

theorem :: POLYALGX:7
    for b1,b2 be bag of 1 holds b1 -' b2 = 1 --> ((b1.0) -' (b2.0));

:::Order of Bags 1
theorem :: POLYALGX:8
   for b1,b2 be bag of 1 holds b1.0 <= b2.0 iff b1 divides b2;

theorem :: POLYALGX:9
   for n being Ordinal holds BagOrder n linearly_orders Bags n;

::$N NBag1 is avvriv. for function NAT to Bags 1
definition
   func NBag1 -> Function of NAT, Bags 1 means
:: POLYALGX:def 1
   for m being Element of NAT holds it.m = 1 --> m;
end;

definition
   func BagN1 -> Function of Bags 1, NAT means
:: POLYALGX:def 2
   for b being Element of Bags 1 holds it.b = b.0;
end;

theorem :: POLYALGX:10
   (BagN1)*(NBag1) = id NAT;

theorem :: POLYALGX:11
   (NBag1)*(BagN1) = id(Bags 1);

registration
  cluster NBag1 -> one-to-one onto;
  cluster BagN1 -> one-to-one onto;
end;

theorem :: POLYALGX:12
   for b1,b2 be bag of 1 holds (b2 in rng divisors b1 iff b2.0 <= b1.0) &
   (b2 in rng divisors b1 iff b2 divides b1);

theorem :: POLYALGX:13
   for b be bag of 1 holds
   rng(divisors b) = {x where x is bag of 1 : x.0 <= b.0};

theorem :: POLYALGX:14
   for b be bag of 1 holds
   rng(NBag1|(Segm ((b.0)+1))) = {x where x is bag of 1 : x.0 <= b.0};

theorem :: POLYALGX:15
   for b be bag of 1 holds len (divisors b) = (b.0) + 1;

begin :: Construct Algebra of Multivariate Formal Power Series

:: Construct mutlivariable Formal Series
:: same manner as POLYALG1:def 2

definition
  let n be Ordinal;
  let L;
  func Formal-Series(n,L) -> strict non empty AlgebraStr over L means
:: POLYALGX:def 3

  (for x be set holds x in the carrier of it iff x is Series of n,L) &
  (for x,y be Element of it, p,q be Series of n,L st x = p & y = q holds
    x+y = p+q) &
  (for x,y be Element of it, p,q be Series of n,L st x = p & y = q holds
    x*y = p*'q) &
  (for a be Element of L, x be Element of it, p be Series of n,L st x = p
    holds a*x = a*p) & 0.it = 0_(n,L) & 1.it = 1_(n,L);
end;

registration
  let n be Ordinal;
  let L;
  cluster Formal-Series(n,L) -> Abelian;
  cluster Formal-Series(n,L) -> add-associative;
  cluster Formal-Series(n,L) -> right_zeroed;
  cluster Formal-Series(n,L) -> right_complementable;
  cluster Formal-Series(n,L) -> commutative;
  cluster Formal-Series(n,L) -> associative;
end;

registration
  cluster add-associative associative right_zeroed left_zeroed well-unital
    right_complementable distributive for non empty doubleLoopStr;
end;

registration
  let n be Ordinal;
  let L;
  cluster Formal-Series(n,L) -> well-unital;
  cluster Formal-Series(n,L) -> right-distributive;
  cluster Formal-Series(n,L) -> left-distributive;
end;

theorem :: POLYALGX:16
   for n be Ordinal,L
   for a being Element of L, p,q being Series of n,L holds a*(p+q)=a*p + a*q;

theorem :: POLYALGX:17
   for n be Ordinal, L
   for a,b being Element of L, p being Series of n,L holds (a+b)*p = a*p + b*p;

theorem :: POLYALGX:18
   for n be Ordinal,L
   for a,b being Element of L, p being Series of n,L holds (a*b)*p = a*(b*p);

theorem :: POLYALGX:19
   for n be Ordinal,L
   for p being Series of n,L holds 1.L*p = p;

registration
  let n be Ordinal, L;
  cluster Formal-Series(n,L) -> vector-distributive scalar-distributive
    scalar-associative scalar-unital;
end;

theorem :: POLYALGX:20
   for n be Ordinal, L holds Formal-Series(n,L) is mix-associative;

registration
  let n be Ordinal;
  let L;
  cluster Formal-Series(n,L) -> mix-associative;
end;

begin :: Construction of Isomorphism from Formal-Series(1,R) to Formal-Series R.

theorem :: POLYALGX:21
    Polynom-Ring(n,R) is Subring of Formal-Series(n,R);

theorem :: POLYALGX:22
   for R holds (0_(1,R))*NBag1 = 0_.R;

theorem :: POLYALGX:23
   for R holds (0_(1,R)+*(EmptyBag 1,1.R))*NBag1 = 0_.R +* (0,1.R);

theorem :: POLYALGX:24
   for R holds (0_(1,R)+*(1-->1,1.R))*NBag1 = 0_.R +* (1,1.R);

theorem :: POLYALGX:25
    for b be bag of 1 holds
    SgmX((BagOrder 1),rng(divisors b)) = XFS2FS(NBag1|(Segm ((b.0)+1))) &
    divisors b = XFS2FS(NBag1|(Segm ((b.0)+1)));

begin :: Construct Isomorphism Formal-Series(1,R) -> Formal-Series R

definition
   let R;
   func BSFSeri(R) -> Function of Formal-Series(1,R), Formal-Series R means
:: POLYALGX:def 4

   for x being object st x in the carrier of Formal-Series(1,R) holds
   ex x1 being Series of 1,R st x1 = x & it.x = x1*(NBag1);
 end;

registration
  let R;
  cluster BSFSeri(R) -> one-to-one onto;
end;

theorem :: POLYALGX:26
   for R be Ring, f,g be Series of 1,R holds
   (f+g)*(NBag1) = f*(NBag1) + g*(NBag1);

theorem :: POLYALGX:27
   for f,g be Element of Formal-Series(1,R) holds
   (BSFSeri(R)).(f+g) = (BSFSeri(R)).f + (BSFSeri(R)).g;

theorem :: POLYALGX:28
   for f,g be Series of 1,R holds (f*'g)*(NBag1) = (f*(NBag1)) *' (g*(NBag1));

theorem :: POLYALGX:29
   for f,g be Element of Formal-Series(1,R) holds
   (BSFSeri(R)).(f*g) = (BSFSeri(R)).f * (BSFSeri(R)).g;

theorem :: POLYALGX:30
   for R holds (BSFSeri(R)).(1.Formal-Series(1,R)) = 1.(Formal-Series R);

registration
  let R;
  cluster BSFSeri(R) -> additive multiplicative unity-preserving;
end;

theorem :: POLYALGX:31
   for R holds BSFSeri(R) is RingIsomorphism &
   Formal-Series R is (Formal-Series(1,R))-isomorphic;

registration
  let R;
  cluster Formal-Series R -> (Formal-Series(1,R))-homomorphic
                             (Formal-Series(1,R))-monomorphic
                             (Formal-Series(1,R))-isomorphic;
end;

definition
   let R;
   func SBFSeri(R) -> Function of Formal-Series R, Formal-Series(1,R) means
:: POLYALGX:def 5

   for x being object st x in the carrier of Formal-Series R holds
   ex x1 being sequence of R st x1 = x & it.x = x1*(BagN1);
 end;

theorem :: POLYALGX:32
   for R holds (BSFSeri(R))" = SBFSeri(R);

registration
  let R;
  cluster SBFSeri(R) -> one-to-one onto;
end;

theorem :: POLYALGX:33
  for R holds SBFSeri(R) is RingHomomorphism;

registration
  let R;
  cluster SBFSeri(R) -> additive multiplicative unity-preserving;
end;

theorem :: POLYALGX:34
   for R holds SBFSeri(R) is RingIsomorphism &
   Formal-Series(1,R) is (Formal-Series R)-isomorphic;

registration
  let R;
  cluster Formal-Series(1,R) -> (Formal-Series R)-homomorphic
                                (Formal-Series R)-monomorphic
                                (Formal-Series R)-isomorphic;
end;

begin :: Construct Isomorphism Polynom-Ring(1,R) to Polynom-Ring R.

theorem :: POLYALGX:35
    Polynom-Ring R is Subring of Formal-Series R;

theorem :: POLYALGX:36
   for f1,g1 be sequence of R holds (f1+g1)*(BagN1) = f1*(BagN1) + g1*(BagN1);

theorem :: POLYALGX:37
   for f be sequence of the carrier of R holds f = (f*(BagN1))*NBag1;

theorem :: POLYALGX:38
   for f be Series of 1,R holds f = (f*(NBag1))*BagN1;

theorem :: POLYALGX:39
   for f be sequence of R holds NBag1.:(Support f) = Support (f*BagN1);

theorem :: POLYALGX:40
   for B be Subset of NAT holds card(B) = card((NBag1).:B);

theorem :: POLYALGX:41
   for f be sequence of R holds card (Support f) = card Support(f*BagN1);

theorem :: POLYALGX:42
   for f be Series of 1,R holds BagN1.:(Support f) = Support(f*NBag1);

theorem :: POLYALGX:43
   for B be Subset of Bags 1 holds card(B) = card((BagN1).:B);

theorem :: POLYALGX:44
   for f be Series of 1,R holds card (Support f) = card Support(f*NBag1);

definition
   let R;
   func BSPoly(R) -> Function of Polynom-Ring(1,R), Polynom-Ring R equals
:: POLYALGX:def 6
   (BSFSeri(R))|[#]Polynom-Ring(1,R);
 end;

theorem :: POLYALGX:45
   for R holds BSPoly(R) is one-to-one onto;

registration
  let R;
  cluster BSPoly(R) -> one-to-one onto;
end;

theorem :: POLYALGX:46
   for p,q be Element of Polynom-Ring(1,R),
   f,g be Element of Formal-Series(1,R) st p = f & q = g holds p+q = f + g;

theorem :: POLYALGX:47
   for p,q be Element of Polynom-Ring(1,R),
   f,g be Element of Formal-Series(1,R) st p = f & q = g holds p*q = f * g;

theorem :: POLYALGX:48
    for f,g be Element of Polynom-Ring(1,R) holds
      (BSPoly(R)).(f+g) = (BSPoly(R)).f + (BSPoly(R)).g;

theorem :: POLYALGX:49
    for f,g be Element of Polynom-Ring(1,R)
    holds (BSPoly(R)).(f*g) = (BSPoly(R)).f * (BSPoly(R)).g;

theorem :: POLYALGX:50
    for R holds (BSPoly(R)).(1.Polynom-Ring(1,R)) = 1.(Polynom-Ring R);

registration
  let R;
  cluster BSPoly(R) -> additive multiplicative unity-preserving;
end;

theorem :: POLYALGX:51
   for R holds BSPoly(R) is RingIsomorphism &
   Polynom-Ring R is (Polynom-Ring(1,R))-isomorphic;

registration
  let R;
  cluster Polynom-Ring R -> (Polynom-Ring(1,R))-homomorphic
                            (Polynom-Ring(1,R))-monomorphic
                            (Polynom-Ring(1,R))-isomorphic;
end;

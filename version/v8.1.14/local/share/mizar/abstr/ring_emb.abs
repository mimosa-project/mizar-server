:: Embedding Principle for Rings and Abelian Groups
::  by Yasushige Watase
:: 
:: Received November 21, 2023
:: Copyright (c) 2023 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, SUBSET_1, RELAT_1, XBOOLE_0, BINOP_1, FUNCT_1, TARSKI,
      NAT_1, ARYTM_3, ZFMISC_1, CARD_1, ARYTM_1, FUNCOP_1, FUNCT_2, PRE_POLY,
      GROUP_1, ALGSTR_0, RLVECT_1, VECTSP_1, LATTICES, SUPINF_2, MESFUNC1,
      MOD_4, POLYNOM1, ALGSEQ_1, POLYNOM2, HILBASIS, POLYNOM3, FUNCT_4,
      VECTSP_2, QUOFIELD, MSSUBFAM, FUNCSDOM, FDIFF_1, C0SP1, FIELD_2,
      STRUCT_0, RING_3, REALSET1, WELLORD1, POLYNOM7, FINSEQ_1, POLYNOM4,
      GROUP_6, RING_EMB;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, RELAT_1, FUNCT_1, RELSET_1,
      PARTFUN1, FUNCT_2, BINOP_1, DOMAIN_1, FUNCOP_1, REALSET1, PBOOLE,
      NUMBERS, XCMPLX_0, NAT_D, FUNCT_7, PRE_POLY, STRUCT_0, ALGSTR_0,
      RLVECT_1, GROUP_1, VECTSP_1, VECTSP_2, POLYNOM1, ALGSEQ_1, GROUP_6,
      RINGCAT1, MOD_4, QUOFIELD, POLYNOM3, POLYNOM4, POLYNOM7, C0SP1, RING_3,
      RING_4;
 constructors RELSET_1, WELLORD2, REALSET1, NAT_D, FUNCT_7, ALGSEQ_1, RINGCAT1,
      POLYNOM4, RING_3, FIELD_11;
 registrations RELAT_1, FUNCT_1, ORDINAL1, XREAL_0, NAT_1, CARD_1, VALUED_0,
      RELSET_1, FUNCT_2, STRUCT_0, VECTSP_1, RING_4, POLYNOM1, PRE_POLY, MOD_4,
      POLYNOM3, FUNCOP_1, SUBSET_1, RINGCAT1, REALSET1, RVSUM_4, XBOOLE_0,
      RING_3, POLYNOM6, POLYNOM4, RLVECT_1, POLYDIFF;
 requirements NUMERALS, SUBSET, BOOLE, ARITHM;


begin :: Preliminaries from Set Theory

 reserve a for non empty set;
 reserve b, x, o for object;

theorem :: RING_EMB:1
    for a holds
    ex b be object st (for x be set holds not [x,b] in a);

theorem :: RING_EMB:2
    for a,b be non empty set holds ex c be non empty set st a /\ c = {} &
    (ex f be Function st f is one-to-one & dom f = b & rng f = c );

::$N Apply Embedding Principle to Rings.

theorem :: RING_EMB:3
    for A be Ring, X be non empty set, f be Function of A,X,
    a,b be Element of X st f is bijective holds
    f.((the addF of A).(f".a,f".b)) is Element of X;

definition
  let A be Ring, X be non empty set;
  let f be Function of A,X;
  let a,b be Element of X;
  assume
 f is bijective;
  func addemb(f,a,b) -> Element of X equals
:: RING_EMB:def 1
  f.((the addF of A).(f".a,f".b));
end;

theorem :: RING_EMB:4
   for A be Ring, X be non empty set, f be Function of A,X,
   a,b,c be Element of X st f is bijective holds
   addemb(f,a,addemb(f,b,c)) = addemb(f,addemb(f,a,b),c);

definition
  let A be Ring, X be non empty set;
  let f be Function of A,X;
  func addemb f -> BinOp of X means
:: RING_EMB:def 2

  for a,b being Element of X holds it.(a,b) = addemb(f,a,b);
end;

theorem :: RING_EMB:5
    for A be Ring, X be non empty set, f be Function of A,X,
    a,b be Element of X st f is bijective holds
    f.((the multF of A).(f".a,f".b)) is Element of X;

definition
  let A be Ring, X be non empty set;
  let f be Function of A,X;
  let a,b be Element of X;
  assume
 f is bijective;
  func multemb(f,a,b) -> Element of X equals
:: RING_EMB:def 3
  f.((the multF of A).(f".a,f".b));
end;

definition
  let A be Ring, X be non empty set;
  let f be Function of A,X;
  func multemb f -> BinOp of X means
:: RING_EMB:def 4
  for a,b being Element of X holds it.(a,b) = multemb(f,a,b);
end;

definition
  let A be Ring, X be non empty set;
  let f be Function of A,X;
  func emb_Ring(f) -> strict non empty doubleLoopStr equals
:: RING_EMB:def 5
  doubleLoopStr(# X, addemb f, multemb f, f.1.A, f.0.A #);
end;

theorem :: RING_EMB:6
    for A be Ring, X be non empty set, f be Function of A,X
    st f is bijective holds emb_Ring(f) is Ring;

theorem :: RING_EMB:7
    for A be comRing, X be non empty set, f be Function of A,X
    st f is bijective holds emb_Ring(f) is comRing;

theorem :: RING_EMB:8
    for A, B be Ring, i be Function of A,B st i is RingHomomorphism
    & i = id A holds A is Subring of B;

theorem :: RING_EMB:9
    for A,B be Ring
    for f being Function of A,B st f is monomorphism & ([#]B \ rng f) <> {}
    holds
    ex C be Ring, X be set, h be Function, G be Function of B,C
    st X /\ [#]A = {} & h is one-to-one & dom h = [#]B \ rng f & rng h = X &
    [#]C = X \/ [#]A &
    A is Subring of C &
    G is RingIsomorphism & id A = G*f;

::$N Embedding Principle Applied to AbGroups.

definition
  let G be AbGroup;
  mode SubAbGr of G -> AbGroup means
:: RING_EMB:def 6

   the carrier of it c= the carrier of G  &
   the addF of it = (the addF of G)||the carrier of it & 0.it = 0.G;
end;

definition
  let G,H be AbGroup, f be Homomorphism of G,H;
  func Image f -> strict addLoopStr means
:: RING_EMB:def 7
  the carrier of it = rng f &
  the addF of it = (the addF of H)||(rng f) &
  the ZeroF of it = 0.H;
end;

theorem :: RING_EMB:10
    for A be AbGroup, X be non empty set, f be Function of A,X,
    a,b be Element of X st f is bijective holds
    f.((the addF of A).(f".a,f".b)) is Element of X;

definition
  let A be AbGroup, X be non empty set;
  let f be Function of A,X;
  let a,b be Element of X;
  assume
 f is bijective;
  func addemb(f,a,b) -> Element of X equals
:: RING_EMB:def 8
  f.((the addF of A).(f".a,f".b));
end;

theorem :: RING_EMB:11
   for A be AbGroup, X be non empty set, f be Function of A,X,
   a,b,c be Element of X st f is bijective holds
   addemb(f,a,addemb(f,b,c)) = addemb(f,addemb(f,a,b),c);

definition
  let A be AbGroup, X be non empty set;
  let f be Function of A,X;
  func addemb f -> BinOp of X means
:: RING_EMB:def 9

  for a,b being Element of X holds it.(a,b) = addemb(f,a,b);
end;

definition
  let A be AbGroup, X be non empty set;
  let f be Function of A,X;
  func emb_AbGr(f) -> strict non empty addLoopStr equals
:: RING_EMB:def 10
  addLoopStr(# X, addemb f, f.0.A #);
end;

theorem :: RING_EMB:12
    for A be AbGroup, X be non empty set, f be Function of A,X
    st f is bijective holds emb_AbGr(f) is AbGroup;

theorem :: RING_EMB:13
    for A, B be AbGroup, i be Homomorphism of A,B st
    i = id A holds A is SubAbGr of B;

theorem :: RING_EMB:14
    for A,B be AbGroup
    for f being Homomorphism of A,B st f is one-to-one & ([#]B \ rng f) <> {}
    holds
    ex C be AbGroup, X be set, h be Function, G be Function of B,C
    st X /\ [#]A = {} & h is one-to-one & dom h = [#]B \ rng f & rng h = X &
    [#]C = X \/ [#]A &
    A is SubAbGr of C &
    G is Homomorphism of B,C & id A = G*f;

::$N Relation with Polynomial Rings

theorem :: RING_EMB:15
    for b be bag of 0 holds dom b = {} & b = EmptyBag {} & rng b = 0 &
    EmptyBag {} = {} --> 0  & Bags {} = {EmptyBag {}};

reserve R for right_zeroed add-associative right_complementable Abelian
  well-unital distributive associative non trivial non trivial doubleLoopStr;

theorem :: RING_EMB:16
    for f be Polynomial of 0,R holds dom f = Bags 0 & Bags 0 = {{}}
    & rng f = {f.(EmptyBag 0)};

theorem :: RING_EMB:17
    for f be Polynomial of 0,R holds f is Constant;

theorem :: RING_EMB:18
    for f be Polynomial of 0,R holds ex a being Element of R st f = a |(0,R);

definition
  let R;
  func 1_1(R) -> sequence of R equals
:: RING_EMB:def 11
  (0_.R) +* (1,1.R);
end;

theorem :: RING_EMB:19
    for R be non degenerated comRing holds Support(1_1(R)) = {1};

registration
  let R;
  cluster 1_1(R) -> finite-Support;
end;

theorem :: RING_EMB:20
    Leading-Monomial(1_1(R)) = 1_1(R);

theorem :: RING_EMB:21
    for m be Element of R holds eval(1_1(R),m) = m;

reserve R for non degenerated comRing;

theorem :: RING_EMB:22
   for p0 be Element of Polynom-Ring(0,R) holds
   not p0 is Polynomial of Polynom-Ring(0,R);

theorem :: RING_EMB:23
   for R being non degenerated comRing  holds
   Polynom-Ring (Polynom-Ring(0,R)),Polynom-Ring(1,R) are_isomorphic;

::ThQ3:
::    for R being non degenerated comRing holds
::    Polynom-Ring(1,R),Polynom-Ring R are_isomorphic
::    proof
::      let R being non degenerated comRing;
::      BSPoly(R) is RingIsomorphism;
::      hence thesis by QUOFIELD:def 23;
::    end;

::ThQ4:
::   for R being non degenerated comRing holds
::   Polynom-Ring(Polynom-Ring(0,R)),Polynom-Ring R are_isomorphic
::   proof
::     let R being non degenerated comRing;
::A1: Polynom-Ring (Polynom-Ring(0,R)),Polynom-Ring(1,R) are_isomorphic by ThQ1;
::     Polynom-Ring(1,R),Polynom-Ring R are_isomorphic by ThQ3;
::     hence thesis by A1,RING_3:44;
::   end;

theorem :: RING_EMB:24
    for R be non degenerated Ring holds
    [#]Polynom-Ring R \ rng (canHom R) <> {};

theorem :: RING_EMB:25
    for R be non degenerated Ring holds
    ex PR be non degenerated Ring, X be set, h be Function,
    G be Function of Polynom-Ring R,PR
    st R is Subring of PR & G is RingIsomorphism & id R = G*(canHom R) &
    X /\ [#]R = {} & h is one-to-one &
    dom h = [#]Polynom-Ring R \ rng (canHom R) & rng h = X &
    [#]PR = X \/ [#]R;

theorem :: RING_EMB:26
   [#]Polynom-Ring(0,R) /\ [#]Polynom-Ring (Polynom-Ring(0,R)) = {};

theorem :: RING_EMB:27
    for R be non degenerated Ring holds
    ex PR be non degenerated Ring, X be set, h be Function,
    G be Function of Polynom-Ring(Polynom-Ring(0,R)),PR
    st Polynom-Ring(0,R) is Subring of PR & G is RingIsomorphism &
    id Polynom-Ring(0,R) = G*(canHom Polynom-Ring(0,R)) &
    X /\ [#]Polynom-Ring(0,R) = {} & h is one-to-one &
    dom h =
    [#]Polynom-Ring(Polynom-Ring(0,R)) \ rng (canHom (Polynom-Ring(0,R))) &
     rng h = X &
    [#]PR = X \/ [#]Polynom-Ring(0,R);

definition
  let R;
  let A be R-monomorphic comRing;
  let x be Element of A;
  attr x is indeterminate means
:: RING_EMB:def 12
  ex g being Function of Polynom-Ring R,A st g is isomorphism &
  x = g.1_1(R);
end;

theorem :: RING_EMB:28
    for R be non degenerated comRing holds
    ex X be Element of Polynom-Ring R st X is indeterminate & X = 1_1(R);

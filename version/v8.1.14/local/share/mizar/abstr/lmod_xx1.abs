:: Ring of {E}ndomorphisms \& {M}odules over a {R}ing
::  by Yasushige Watase
:: 
:: Received September 30, 2022
:: Copyright (c) 2022-2023 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies FUNCSDOM, VECTSP_1, STRUCT_0, XBOOLE_0, VECTSP_2, SUBSET_1,
      FUNCT_1, RELAT_1, FUNCT_2, FUNCOP_1, UNIALG_1, GRCAT_1, ARYTM_3, GROUP_6,
      ALGSTR_0, RLVECT_1, MSSUBFAM, RMOD_2, SUPINF_2, BINOP_1, ZFMISC_1,
      PARTFUN1, ARYTM_1, MESFUNC1, LMOD_7, GROUP_1, PRALG_1, MOD_4, LATTICES,
      QUOFIELD, REALSET1, FUNCT_5, FDIFF_1, CAT_4, FIB_NUM, CAT_1, CONLAT_1,
      VECTSP10, ALTCAT_1, NATTRA_1, LMOD_XX1;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, RELAT_1, RELSET_1, FUNCT_1,
      PARTFUN1, FUNCT_2, BINOP_1, DOMAIN_1, FUNCT_3, FUNCOP_1, REALSET1,
      FUNCT_5, STRUCT_0, ALGSTR_0, RLVECT_1, GROUP_1, VECTSP_1, FUNCSDOM,
      VECTSP_2, GRCAT_1, MOD_2, GROUP_6, RINGCAT1, MOD_4, VECTSP10, QUOFIELD,
      ZMODUL01;
 constructors RELSET_1, REALSET1, FUNCT_5, VECTSP_2, GRCAT_1, RINGCAT1,
      MODCAT_1, RING_2;
 registrations STRUCT_0, RELSET_1, SUBSET_1, GRCAT_1, MOD_2, FUNCT_2, FUNCOP_1,
      VECTSP_1, VECTSP_2, ALGSTR_0, FUNCT_1;
 requirements SUBSET, BOOLE;


begin :: Construct the ring of Endomorphism of Abelian group M

definition
  let M,N be AbGroup;
  func ADD(M,N) -> BinOp of Funcs(the carrier of M,the carrier of N)
  means
:: LMOD_XX1:def 1
  for f,g being Element of Funcs(the carrier of M,the carrier of N) holds
  it.(f,g) = (the addF of N).:(f,g);
end;

theorem :: LMOD_XX1:1
   for M,N be AbGroup,
   f,g,h be Element of Funcs(the carrier of M, the carrier of N) holds
   h = ADD(M,N).(f,g) iff
   for x being Element of the carrier of M holds h.x = f.x + g.x;

theorem :: LMOD_XX1:2
   for M,N be AbGroup
   for f,g be Homomorphism of M,N holds ADD(M,N).(f,g) is Homomorphism of M,N;

definition
  let M be AbGroup;
  func set_End(M) -> non empty Subset of
  Funcs(the carrier of M,the carrier of M) equals
:: LMOD_XX1:def 2
  {f where f is Function of M,M : f is Endomorphism of M };
end;

definition
  let M be AbGroup;
  func add_End(M) -> BinOp of set_End(M) equals
:: LMOD_XX1:def 3
  (ADD(M,M))|[:set_End(M),set_End(M):];
end;

theorem :: LMOD_XX1:3
   for M be AbGroup
   for f,g be Endomorphism of M holds
   f in Funcs(the carrier of M,the carrier of M) &
   g in Funcs(the carrier of M,the carrier of M) &
   (add_End(M)).[f,g] = (ADD(M,M)).(f,g) &
   (ADD(M,M)).(f,g) is Endomorphism of M;

reserve M,N for AbGroup;

definition
  let M be AbGroup,f,g be Element of Funcs(the carrier of M,the carrier of M);
  redefine func g*f -> Element of Funcs(the carrier of M,the carrier of M);
end;

::$INSERT prepare Composition of Homomorphisms
definition
  let M be AbGroup;
  func FuncComp(M) -> BinOp of Funcs(the carrier of M,the carrier of M) means
:: LMOD_XX1:def 4

  for f, g being Element of Funcs(the carrier of M,the carrier of M)
  holds it.(f,g) = f*g;
end;

theorem :: LMOD_XX1:4
   for M,N be AbGroup
   for f,g be Element of Funcs(the carrier of M, the carrier of N)
   holds (ADD(M,N)).(f,g) = (ADD(M,N)).(g,f);

::$N Endomorphism of M is closed under Composition
theorem :: LMOD_XX1:5
   for M be AbGroup
   for f,g be Endomorphism of M holds (FuncComp(M)).(f,g) is Endomorphism of M;

definition
  let M be AbGroup;
  func mult_End(M) -> BinOp of set_End(M) equals
:: LMOD_XX1:def 5
  (FuncComp(M))|[:set_End(M),set_End(M):];
end;

theorem :: LMOD_XX1:6
  for M be AbGroup for f,g be Endomorphism of M holds
    f in Funcs(the carrier of M,the carrier of M) &
    g in Funcs(the carrier of M,the carrier of M) &
    (mult_End(M)).[f,g] = (FuncComp(M)).(f,g) &
    (FuncComp(M)).(f,g) is Endomorphism of M;

definition
  let M be AbGroup;
  func 0_End(M) -> Element of set_End(M) equals
:: LMOD_XX1:def 6
ZeroMap(M,M);
  func 1_End(M) -> Element of set_End(M) equals
:: LMOD_XX1:def 7
id M;
end;

definition
  let M be AbGroup;
  let f be Element of set_End(M);
  func Inv(f) -> Element of set_End(M) means
:: LMOD_XX1:def 8
  for x being Element of M holds it.x = f.(-x);
end;

theorem :: LMOD_XX1:7
   for M be AbGroup
   for f be Element of set_End(M) holds (ADD(M,M)).(f,Inv(f)) = ZeroMap(M,M);

::$INSERT Define the Ring of Endomorphism of M as a structure.
definition
  let M be AbGroup;
  func End_Ring(M) -> strict non empty doubleLoopStr equals
:: LMOD_XX1:def 9
  doubleLoopStr(# set_End(M), add_End(M), mult_End(M), 1_End(M),0_End(M) #);
end;

::$N the structure of End_Ring(M) turns to be a Ring.
theorem :: LMOD_XX1:8
  for M be AbGroup holds End_Ring(M) is Ring;

registration
  let M be AbGroup;
  cluster End_Ring(M) -> Abelian add-associative right_zeroed
  right_complementable associative well-unital distributive;
end;

registration
  let M be AbGroup;
  cluster End_Ring(M) -> strict;
end;

 reserve R for Ring;
 reserve r for Element of R;

::$N the Def. of \cite{MOD_4.abs} cannot be applied since no ring-hom. is used.
definition
  let R;
  let M,N be LeftMod of R;
  mode Homomorphism of R,M,N -> Function of M,N means
:: LMOD_XX1:def 10
  it is additive & it is homogeneous;
end;

theorem :: LMOD_XX1:9
   for M,N be LeftMod of R, f be Homomorphism of R,M,N holds
   f is one-to-one onto implies
   f" is Homomorphism of R,N,M;

definition
  let R;
  let M,N be LeftMod of R;
  pred M ~= N means
:: LMOD_XX1:def 11
  ex f be Homomorphism of R,M,N st f is one-to-one onto;
end;

definition
  let R;
  let M be LeftMod of R;
  mode Endomorphism of R,M is Homomorphism of R,M,M;
end;

theorem :: LMOD_XX1:10
   for M be LeftMod of R holds M ~= M;

theorem :: LMOD_XX1:11
   for M,N be LeftMod of R holds M ~= N implies N ~= M;

definition
  let R;
  let M,N be LeftMod of R;
  redefine pred M ~= N;
  reflexivity;
  symmetry;
end;

theorem :: LMOD_XX1:12
   for L,M,N be LeftMod of R holds L ~= M & M ~= N implies L ~= N;

theorem :: LMOD_XX1:13
    for M,N be LeftMod of R, f be Homomorphism of R,M,N holds
    f is one-to-one iff ker(f) = {0.M};

definition
  let R;
  let M be AbGroup, s be Function of R,End_Ring(M);
  func LModlmult(M,s) ->
  Function of [:the carrier of R, the carrier of M:], the carrier of M
  means
:: LMOD_XX1:def 12

  for x be Element of the carrier of R,
  y be Element of the carrier of M holds ex h be Endomorphism of M st
  h = s.x & it.(x,y) = h.y;
end;

definition
   let R;
   let M be AbGroup, s be Function of R,End_Ring(M);
   func AbGrLMod(M,s) -> strict non empty ModuleStr over R equals
:: LMOD_XX1:def 13
   ModuleStr(# the carrier of M, the addF of M, 0.M, LModlmult(M,s) #);
end;

theorem :: LMOD_XX1:14
    for R for M be AbGroup, s be Function of R,End_Ring(M) st
    s is RingHomomorphism holds AbGrLMod(M,s) is LeftMod of R;

::$N the set of all functions from R-module M, to R-module N form R-module.
reserve M,N for LeftMod of R;

definition
  let R,M,N;
  func 0_Funcs(M,N) -> Element of Funcs(the carrier of M,the carrier of N)
  equals
:: LMOD_XX1:def 14
  ZeroMap(M,N);
end;

definition
  let R,M,N;
  func ADD(M,N) -> BinOp of Funcs(the carrier of M,the carrier of N)
  means
:: LMOD_XX1:def 15
  for f,g being Element of Funcs(the carrier of M,the carrier of N) holds
  it.(f,g) = (the addF of N).:(f,g);
end;

reserve f,g,h for Element of Funcs(the carrier of M, the carrier of N);

theorem :: LMOD_XX1:15
   for R,M,N,f,g,h holds
   h = ADD(M,N).(f,g) iff for x being Element of the carrier of M
   holds h.x = f.x + g.x;

definition
  let R,M,N;
  let F be Function of [:the carrier of R,the carrier of N:], the carrier of N;
  let a be Element of the carrier of R;
  let f be Function of M,N;
  redefine func F[;](a,f) ->
  Element of Funcs(the carrier of M, the carrier of N);
end;

definition
  let R,M,N;
  func LMULT(M,N) ->
  Function of [:the carrier of R,Funcs(the carrier of M,the carrier of N):],
  Funcs(the carrier of M,the carrier of N) means
:: LMOD_XX1:def 16

  for a being Element of the carrier of R, f being Element of
  Funcs(the carrier of M,the carrier of N),
  x being Element of the carrier of M holds (it.[a,f]).x = a*(f.x);
end;

definition
  let R,M,N;
  func Func_Mod(R,M,N)  -> non empty ModuleStr over R equals
:: LMOD_XX1:def 17
  ModuleStr(# Funcs(the carrier of M,the carrier of N),
              ADD(M,N), 0_Funcs(M,N), LMULT(M,N) #);
end;

theorem :: LMOD_XX1:16
  for R,M,N holds
  for a be Element of the carrier of R,
  f,h be Element of Funcs(the carrier of M, the carrier of N) holds
  h = (LMULT(M,N)).[a,f] iff for x being Element of M holds h.x = a*(f.x);

::vector-distributive
reserve a,b for Element of the carrier of R;

registration
  let R, M,N;
  cluster Func_Mod(R,M,N) -> Abelian add-associative right_zeroed
  right_complementable vector-distributive scalar-distributive
  scalar-associative scalar-unital;
end;

theorem :: LMOD_XX1:17
  for R for M,N holds Func_Mod(R,M,N) is LeftMod of R;

reserve R for comRing;
reserve M,M1,N,N1 for LeftMod of R;

::$N Hom(M,N) the set of all R Homomorphisms form left R-Module
theorem :: LMOD_XX1:18
   for R,M,N
   for f,g be Homomorphism of R,M,N holds
   ADD(M,N).(f,g) is Homomorphism of R,M,N;

definition
  let R,M1,M,N;
  let f be Element of Funcs(the carrier of M1,the carrier of M),
                g be Element of Funcs(the carrier of M,the carrier of N);
  redefine func g*f -> Element of Funcs(the carrier of M1,the carrier of N);
end;

theorem :: LMOD_XX1:19
   for M,N,M1 be LeftMod of R,
   f be Homomorphism of R,M,N, u be Homomorphism of R,M1,M holds
   f*u is Homomorphism of R,M1,N;

::$N commutativity matters (r*a)*g.x .= (a*r)*g.x by VECTSP_1:def 16
theorem :: LMOD_XX1:20
   for R,M,N
   for a be Element of the carrier of R, g be Homomorphism of R,M,N holds
   LMULT(M,N).[a,g] is Homomorphism of R,M,N;

definition
  let R,M,N;
  func set_Hom(M,N) -> non empty Subset of
  Funcs(the carrier of M,the carrier of N) equals
:: LMOD_XX1:def 18
  {f where f is Function of M,N : f is Homomorphism of R,M,N };
end;

definition
  let R,M,N;
  func add_Hom(M,N) -> BinOp of set_Hom(M,N) equals
:: LMOD_XX1:def 19
  (ADD(M,N))|[:set_Hom(M,N),set_Hom(M,N):];
end;

definition
  let R,M,N;
  let F be Function of [:the carrier of R,the carrier of N:], the carrier of N;
  let a be Element of the carrier of R;
  let f be Function of M,N;
  redefine func F[;](a,f) ->
  Element of Funcs(the carrier of M, the carrier of N);
end;

definition
  let R,M,N;
  func lmult_Hom(M,N) ->
  Function of [:the carrier of R,set_Hom(M,N):], set_Hom(M,N) equals
:: LMOD_XX1:def 20
  (LMULT(M,N))|[:the carrier of R,set_Hom(M,N):];
end;

definition
  let R,M,N;
  func 0_Hom(M,N) -> Element of set_Hom(M,N) equals
:: LMOD_XX1:def 21
  ZeroMap(M,N);
end;

definition
  let R,M,N;
  func Hom(R,M,N) -> non empty ModuleStr over R equals
:: LMOD_XX1:def 22
  ModuleStr(# set_Hom(M,N), add_Hom(M,N), 0_Hom(M,N), lmult_Hom(M,N) #);
end;

registration
    let R,M,N;
    cluster Hom(R,M,N) -> non empty;
end;

theorem :: LMOD_XX1:21
   for f,g be Homomorphism of R,M,N holds
   f in Funcs(the carrier of M,the carrier of N) &
   g in Funcs(the carrier of M,the carrier of N) &
   (add_Hom(M,N)).[f,g] = (ADD(M,N)).(f,g) &
   (ADD(M,N)).(f,g) is Homomorphism of R,M,N;

theorem :: LMOD_XX1:22
  for a be Element of the carrier of R,
  f be Homomorphism of R,M,N holds
  (lmult_Hom(M,N)).[a,f] = (LMULT(M,N)).[a,f] &
  (LMULT(M,N)).[a,f] is Homomorphism of R,M,N;

theorem :: LMOD_XX1:23
   for R,M,N
   for f1,g1 be Element of Func_Mod(R,M,N),
   f,g be Element of Hom(R,M,N) st f1=f & g1= g holds f + g = f1 + g1;

theorem :: LMOD_XX1:24
   for R for M,N holds Hom(R,M,N) is LeftMod of R;

registration
  let R,M,N;
  cluster Hom(R,M,N)  -> Abelian add-associative right_zeroed
  right_complementable vector-distributive scalar-distributive
  scalar-associative scalar-unital;
end;

definition
  let R,M1,M,N;
  let u be Homomorphism of R,M1,M;
  func tau(N,u) -> Function of Hom(R,M,N), Hom(R,M1,N) means
:: LMOD_XX1:def 23

  for f be Element of Hom(R,M,N) holds
  ex f1 be Homomorphism of R,M,N st f = f1 & it.f =f1*u;
end;

registration
  let R,M1,M,N;
  let u be Homomorphism of R,M1,M;
  cluster tau(N,u) -> additive homogeneous;
end;

theorem :: LMOD_XX1:25
   for R,M1,M,N
   for u be Homomorphism of R,M1,M holds
   tau(N,u) is Homomorphism of R, Hom(R,M,N), Hom(R,M1,N);

definition
  let R,M,N,N1;
  let u be Homomorphism of R,N,N1;
  func phi(M,u) -> Function of Hom(R,M,N), Hom(R,M,N1) means
:: LMOD_XX1:def 24

  for f be Element of Hom(R,M,N) holds
  ex f1 be Homomorphism of R,M,N st f = f1 & it.f =u*f1;
end;

registration
  let R,M,N,N1;
  let u be Homomorphism of R,N,N1;
  cluster phi(M,u) -> additive homogeneous;
end;

theorem :: LMOD_XX1:26
    for R,M,N,N1
    for u be Homomorphism of R,N,N1 holds
    phi(M,u) is Homomorphism of R, Hom(R,M,N), Hom(R,M,N1);

::$N A formal proof of Hom(R,M) ~= M.
theorem :: LMOD_XX1:27
    for R,M holds Hom(R,LeftModule(R),M) ~= M;

::$N Correspondence between Abelian Group and Left R-Module
definition  ::forget lmult from ModuleStr
  let R,M;
  func AbGr(M) -> non empty strict AbGroup equals
:: LMOD_XX1:def 25
  addLoopStr (# the carrier of M, the addF of M, 0.M #);
end;

definition
  let R,M,N;
  let f be Homomorphism of R,M,N;
  func AbGr(f) -> Function of AbGr(M), AbGr(N) means
:: LMOD_XX1:def 26
  for x being object st x in the carrier of AbGr(M) holds it.x = f.x;
  end;

theorem :: LMOD_XX1:28
    for R,M,N for f be Homomorphism of R,M,N holds
    AbGr(f) is Homomorphism of AbGr(M),AbGr(N);

theorem :: LMOD_XX1:29
    for f,g,h be Endomorphism of R,M holds
    AbGr(h) = (FuncComp(AbGr(M))).(AbGr(f),AbGr(g)) iff
    for x being Element of the carrier of AbGr(M)
    holds (AbGr(h)).x = (AbGr(f) * (AbGr(g))).x;

theorem :: LMOD_XX1:30
   for f,g,h be Endomorphism of R,M st
   h = f*g holds AbGr(h) = AbGr(f) * AbGr(g);

theorem :: LMOD_XX1:31
   for f,g,h be Endomorphism of R,M holds
   AbGr(h) = ADD(AbGr(M),AbGr(M)).(AbGr(f),AbGr(g)) iff
   for x being Element of the carrier of AbGr(M) holds
   (AbGr(h)).x = (AbGr(f)).x + (AbGr(g)).x;

theorem :: LMOD_XX1:32
    for f,g,h be Endomorphism of R,M st
    h = ADD(M,M).(f,g) holds AbGr(h) = ADD(AbGr(M),AbGr(M)).(AbGr(f),AbGr(g));

theorem :: LMOD_XX1:33
  for R be Ring, M be LeftMod of R, a be Element of R, m be Element of M
  holds ((curry (the lmult of M)).a ).m = a*m;

theorem :: LMOD_XX1:34  ::(a*b)*m by VECTSP_1:def 16 .= (b*a)*m
    for R be comRing, M be LeftMod of R, a be Element of R holds
    (curry (the lmult of M)).a is Endomorphism of R,M;

theorem :: LMOD_XX1:35
    for f,g,h be Endomorphism of R,M st
    h = f*g
    holds AbGr(h) = (FuncComp(AbGr(M))).(AbGr(f),AbGr(g));

definition
  let R be comRing, M be LeftMod of R; :::ThM3 requires comRing
  func canHom(M) -> Function of R, End_Ring(AbGr(M)) means
:: LMOD_XX1:def 27

  for x being object st x in the carrier of R holds
  ex f be Endomorphism of R,M st
  f = (curry (the lmult of M)).x & it.x = AbGr(f);
  end;

registration
  let R be comRing, M be LeftMod of R;
  cluster canHom(M) -> additive;
end;

theorem :: LMOD_XX1:36
    for R be comRing, M be LeftMod of R,a be Element of R holds
    (canHom(M)).a is Homomorphism of AbGr(M),AbGr(M);

registration
  let R be comRing, M be LeftMod of R;
  cluster canHom(M) -> linear;
end;

registration
  let R be comRing, M be LeftMod of R;
  cluster AbGrLMod(AbGr(M),canHom(M)) -> non empty
  Abelian add-associative right_zeroed right_complementable
  vector-distributive scalar-distributive scalar-associative scalar-unital;
end;

theorem :: LMOD_XX1:37
   for R be comRing, M be LeftMod of R holds
   LModlmult(AbGr(M),canHom(M)) = the lmult of M;

theorem :: LMOD_XX1:38
   for R be comRing, M be strict LeftMod of R holds
   AbGrLMod(AbGr(M),canHom(M)) = M;

definition  ::[A-Module]->[AbGr]
  let R be comRing, M be LeftMod of R;
  func rho(M) -> Function of M, AbGrLMod(AbGr(M),canHom(M)) equals
:: LMOD_XX1:def 28
  id M;
end;

theorem :: LMOD_XX1:39
   for R be comRing,M be LeftMod of R holds rho(M) is additive homogeneous;

registration
  let R be comRing, M be LeftMod of R;
  cluster rho(M) -> additive homogeneous;
end;

theorem :: LMOD_XX1:40
   for R be comRing,M be LeftMod of R holds rho(M) is one-to-one onto;

theorem :: LMOD_XX1:41
   for R be comRing,M be LeftMod of R holds
   M ~= AbGrLMod(AbGr(M),canHom(M));

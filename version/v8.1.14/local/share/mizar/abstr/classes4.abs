:: Non-trivial Universes and Sequences of Universes
::  by Roland Coghetto
:: 
:: Received April 30, 2022
:: Copyright (c) 2022-2023 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies CARD_1, ORDINAL1, FUNCT_1, CLASSES1, TARSKI, ZFMISC_1, XBOOLE_0,
      RELAT_1, CARD_3, FUNCT_2, SUBSET_1, FINSET_1, ORDINAL2, CLASSES2,
      CLASSES4, PBOOLE, FACIRC_1, MCART_1, NAGATA_1, FUNCOP_1, CLASSES3,
      NUMBERS, ARYTM_2, ARYTM_3, MSAFREE, NAT_1, MATHMORP, YELLOW_6, QUATERNI,
      FINSEQ_1, FINSEQ_2, MATRIX_1, XXREAL_0;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, CARD_1, FINSET_1, RELAT_1,
      FUNCT_1, FUNCT_2, CLASSES1, CARD_3, ENS_1, PBOOLE, FUNCT_4, RELSET_1,
      ARYTM_2, ARYTM_3, MSAFREE, FUNCOP_1, XTUPLE_0, ORDINAL7, YELLOW_6,
      QUATERNI, EUCLID, FINSEQ_1, FINSEQ_2, MATRIX_0, CLASSES3, WELLORD2,
      DOMAIN_1, CLASSES2, XXREAL_0, ORDINAL1, NUMBERS, NAT_1, ORDINAL2,
      ORDERS_1;
 constructors CLASSES1, RELSET_1, CLASSES3, ARYTM_2, ENS_1, ORDINAL7, YELLOW_6,
      QUATERNI, EUCLID, MATRIX_0, CLASSES2, DOMAIN_1, BINARITH;
 registrations XBOOLE_0, SUBSET_1, ORDINAL1, CARD_1, CLASSES1, PBOOLE, FUNCT_4,
      RELSET_1, FUNCT_2, CLASSES2, CLASSES3, MSAFREE, ORDINAL5, FINSET_1,
      CARD_3, XTUPLE_0, FINSEQ_2, NUMBERS, SETFAM_1, XXREAL_0;
 requirements SUBSET, BOOLE, NUMERALS, ARITHM;


begin :: Preliminaries

theorem :: CLASSES4:1
  for X being set holds proj1 X in bool union union X &
  proj2 X in bool union union X;

theorem :: CLASSES4:2
  REAL * = the set of all X where X is FinSequence of REAL;

registration
  cluster empty for Grothendieck;
end;

registration
  cluster non empty for Grothendieck;
end;

registration
  let X be set;
  cluster -> non empty for Grothendieck of X;
end;

begin :: Original definitions of Grothendieck's universe

definition
  let GU be set;
  attr GU is axiom_GU1 means
:: CLASSES4:def 1
  for x,y being set st x in GU & y in x holds y in GU;

  attr GU is axiom_GU2 means
:: CLASSES4:def 2
  for x,y being set st x in GU & y in GU holds {x,y} in GU;

  attr GU is axiom_GU3 means
:: CLASSES4:def 3
  for x being set st x in GU holds bool x in GU;
end;

definition
  let GU be non empty set;
  attr GU is axiom_GU4 means
:: CLASSES4:def 4
  for I being Element of GU
  for x being GU-valued ManySortedSet of I holds union rng x in GU;
end;

begin :: Equivalences of definitions

theorem :: CLASSES4:3
  for X being set holds X is axiom_GU1 iff X is epsilon-transitive;

theorem :: CLASSES4:4
  for X being non empty set holds X is axiom_GU4 iff X is FamUnion-closed;

theorem :: CLASSES4:5
  for X being FamUnion-closed set, f being Function st dom f in X & rng f c= X
  holds union rng f in X;

registration
  cluster -> axiom_GU1 axiom_GU2 axiom_GU3 for Grothendieck;
end;

registration
  cluster -> axiom_GU4 for non empty Grothendieck;
end;

theorem :: CLASSES4:6
  for G being non empty set st G is axiom_GU1 & G is axiom_GU2 &
  G is axiom_GU3 & G is axiom_GU4 holds G is non empty Grothendieck;

theorem :: CLASSES4:7
  for X being set holds X is Universe iff X is non empty Grothendieck;

theorem :: CLASSES4:8
  for X being set holds
  Tarski-Class the_transitive-closure_of {X} is Grothendieck of X;

theorem :: CLASSES4:9
  for X being set holds the_universe_of {X} is Grothendieck of X;

theorem :: CLASSES4:10
  for X being set holds Universe_closure {X} = GrothendieckUniverse X;

begin :: Equivalences of MacLane definition

theorem :: CLASSES4:11
  for U being Grothendieck st omega in U holds
  (for x,u being set st x in u in U holds x in U) &
  (for u,v being set st u in U & v in U holds {u,v} in U & [u,v] in U &
                                              [:u,v:] in U) &
  (for x being set st x in U holds bool x in U & union x in U) &
  (omega in U) &
  (for a,b being set for f being Function of a,b st dom f = a &
  f is onto & a in U & b c= U holds b in U);

theorem :: CLASSES4:12
  for U being set st
  (for x,u being set st x in u in U holds x in U) &
  (for x being set st x in U holds bool x in U & union x in U) &
  (omega in U) &
  (for a,b being set for f being Function of a,b st
  dom f = a & f is onto & a in U & b c= U holds b in U)
  holds U is Grothendieck;

begin :: Properties of Univers, following CLASSES2

reserve X for set;
reserve UN for Universe;

theorem :: CLASSES4:13
  X is axiom_GU1 & X is axiom_GU3
  implies
  (for y being set,
       x being Subset of y st y in X holds x in X) &
  (for x,y being set st x c= y & y in X holds x in X)&
  (X is non empty implies {} in X);

definition
  let UN be Universe;
  func {}UN -> Element of UN equals
:: CLASSES4:def 5
{};
end;

theorem :: CLASSES4:14
  UN is Grothendieck of {};

theorem :: CLASSES4:15
  for u,v being Element of UN holds
  Funcs(u,v) c= the set of all f where f is Function of u,v;

definition
  let UN be Universe;
  let u be Element of UN;
  redefine func succ u -> Element of UN;
end;

theorem :: CLASSES4:16
  for n being Nat holds n in UN;

theorem :: CLASSES4:17
  omega c= UN;

theorem :: CLASSES4:18
  NAT in UN or NAT,UN are_equipotent;

registration
  cluster -> infinite for Universe;
end;

theorem :: CLASSES4:19
  FinSETS is denumerable;

registration
  cluster denumerable for Universe;
end;

theorem :: CLASSES4:20
  not UN is denumerable iff omega in UN;

registration
  cluster non denumerable for Universe;
end;

definition
  let UN be Universe;
  attr UN is trivial means
:: CLASSES4:def 6

  not omega in UN;
end;

theorem :: CLASSES4:21
  FinSETS is trivial & SETS is non trivial;

registration
  cluster trivial for Universe;
end;

registration
  cluster non trivial for Universe;
end;

registration
  cluster -> non denumerable for non trivial Universe;
end;

theorem :: CLASSES4:22
  for x being Element of UN for y,z being object st x = [y,z] holds
  y is Element of UN & z is Element of UN;

registration
  let UN being Universe;
  cluster pair for Element of UN;
end;

theorem :: CLASSES4:23
  for u,v being Element of UN holds
  the set of all f where f is Function of u,v is Element of UN;

definition
  let UN being Universe,
      I being Element of UN,
      x being UN-valued ManySortedSet of I;
  redefine func product x -> Element of UN;
end;

definition
  let UN being Universe;
  let x,y being Element of UN;
  func disjoint-union(x,y) -> Element of UN
  equals
:: CLASSES4:def 7
    (x,y) --> ({}UN, {{}UN});
end;

theorem :: CLASSES4:24
  for x,y being Element of UN holds
  disjoint-union(x,y) is Subset of [:{x,y},{ {}, {{}} }:];

theorem :: CLASSES4:25
  for u being Element of UN holds
  disjoint-union(u,u) = { [ u , {{}} ] };

definition
  let UN be Universe;
  let I be Element of UN;
  let x be UN-valued ManySortedSet of I;
  redefine func dom x -> Element of UN;
end;

definition
  let UN be Universe;
  let I be Element of UN;
  let x be UN-valued ManySortedSet of I;
  redefine func Union x -> Element of UN;
end;

definition
  let UN be Universe;
  let I be Element of UN;
  let x be UN-valued ManySortedSet of I;
  redefine func disjoin x -> UN-valued ManySortedSet of I;
end;

definition
  let UN be Universe;
  let I be Element of UN;
  let x be UN-valued ManySortedSet of I;
  func disjoint-union x -> Element of UN equals
:: CLASSES4:def 8
Union disjoin x;
end;

theorem :: CLASSES4:26
  for I being Element of UN
  for x being UN-valued ManySortedSet of I holds
  Union coprod x is Element of UN;

theorem :: CLASSES4:27
  for I being Element of UN,
      x being UN-valued ManySortedSet of I
  holds disjoint-union x is Subset of [: union rng x,I :];

theorem :: CLASSES4:28
  X is axiom_GU2
  implies
  (for x being set st x in X holds {x} in X);

theorem :: CLASSES4:29
  for u being Element of UN holds card u in UN;

theorem :: CLASSES4:30
  for u being Element of UN holds
  not u,UN are_equipotent & card u in card UN;

theorem :: CLASSES4:31
  for u,v being Element of UN holds
  { [u, {} ], [v, {{}} ] } = [: {u}, { {} } :] \/ [: {v}, { {{}} }:];

theorem :: CLASSES4:32
  for I,a,b,u,v being Element of UN
  for x being UN-valued ManySortedSet of I st
  I = { a, b } & x.a = u & x.b = v holds
  disjoint-union x = [: u, { a } :] \/ [: v, { b }:];

theorem :: CLASSES4:33
  for I,u,v being Element of UN
  for x being UN-valued ManySortedSet of I st
  I = { {}, {{}} } & x.{} = u & x.{{}} = v holds
  disjoint-union x = [: u, { {} } :] \/ [: v, { {{}} }:];

theorem :: CLASSES4:34
  for I,u,v being Element of UN
  for x being UN-valued ManySortedSet of I st
  I = { {}, {{}} } & x.{} = {u} & x.{{}} = {v} & u <> v holds
    disjoint-union x = disjoint-union (u,v);

theorem :: CLASSES4:35
  for x being Element of UN
  for y,z being object st x = [y,z] holds y is Element of UN &
  z is Element of UN;

registration
  let UN being Universe;
  cluster pair for Element of UN;
end;

definition
  let UN be Universe;
  let u be pair Element of UN;
  redefine func u`1 -> Element of UN;
  redefine func u`2 -> Element of UN;
end;

theorem :: CLASSES4:36
  for X being Element of UN holds proj1 X is Element of UN &
  proj2 X is Element of UN;

theorem :: CLASSES4:37
  for R being Relation st R in UN holds dom R in UN & rng R in UN;

theorem :: CLASSES4:38
  for R being Relation st dom R is Element of UN &
  rng R is Element of UN holds R is Element of UN;

theorem :: CLASSES4:39
  for X being set,Y being non empty set, f being Function of X,Y st
  f in UN holds X in UN;

theorem :: CLASSES4:40
  for A,B being non empty set st [:A,B:] is Element of UN holds
  A is Element of UN & B is Element of UN;

theorem :: CLASSES4:41
  for X being set st id X is Element of UN holds X is Element of UN;

theorem :: CLASSES4:42
  for x,y,z being Element of UN holds (x,y) .--> z is Element of UN;

begin

theorem :: CLASSES4:43
  omega c< FinSETS;

theorem :: CLASSES4:44
  for X being set holds Tarski-Class {} c= Tarski-Class X;

theorem :: CLASSES4:45
  for G being Grothendieck of X holds FinSETS c= G;

theorem :: CLASSES4:46
  GrothendieckUniverse {} = FinSETS & GrothendieckUniverse {} = UNIVERSE {};

theorem :: CLASSES4:47
  for X being set
  for G being Grothendieck of X
  holds GrothendieckUniverse {} c= GrothendieckUniverse X c= G;

theorem :: CLASSES4:48
  for n being Element of FinSETS holds GrothendieckUniverse n = FinSETS;

theorem :: CLASSES4:49
  the empty Grothendieck c< omega c< GrothendieckUniverse {} c<
    GrothendieckUniverse omega;

theorem :: CLASSES4:50
  for G being non empty Grothendieck st
  G <> GrothendieckUniverse omega holds
  GrothendieckUniverse omega in G or G in GrothendieckUniverse omega;

theorem :: CLASSES4:51
  Tarski-Class omega = GrothendieckUniverse omega;

theorem :: CLASSES4:52
  for N1,N2 being set st N1 = [:NAT,NAT:] \/ NAT &
                         N2 = N1 \/ bool N1 holds
  REAL c= N2 \/ [:NAT,N2:];

theorem :: CLASSES4:53
  for UN being non trivial Universe holds REAL is Element of UN;

theorem :: CLASSES4:54
  for UN being non trivial Universe holds ExtREAL is Element of UN;

theorem :: CLASSES4:55
  for UN being non trivial Universe holds COMPLEX in UN;

theorem :: CLASSES4:56
  for UN being non trivial Universe holds QUATERNION in UN;

theorem :: CLASSES4:57
  for n being Nat holds Seg n in UN;

theorem :: CLASSES4:58
  for D being set st D in UN holds for n being Nat holds n-tuples_on D in UN;

theorem :: CLASSES4:59
  for UN being non trivial Universe, n being Nat holds REAL n in UN;

theorem :: CLASSES4:60
  for X being set st X in UN holds for n being Nat holds n-tuples_on X in UN;

theorem :: CLASSES4:61
  for X being set for n being Nat holds n-tuples_on X c= X*;

theorem :: CLASSES4:62
  for X being non empty set for x being object st x in X* holds
  ex n being Nat st x in n-tuples_on X;

theorem :: CLASSES4:63
  for X being non empty set ex f being Function st dom f = NAT &
  (for n being Nat holds f.n = n-tuples_on X) & union rng f = X*;

theorem :: CLASSES4:64
  for UN being non trivial Universe, X being non empty set st X in UN
  holds X* in UN;

theorem :: CLASSES4:65
  for UN being non trivial Universe holds REAL * in UN;

theorem :: CLASSES4:66
  for UN being non trivial Universe holds ExtREAL * in UN;

theorem :: CLASSES4:67
  for UN being non trivial Universe holds COMPLEX * in UN;

theorem :: CLASSES4:68
  for UN being non trivial Universe holds QUATERNION * in UN;

theorem :: CLASSES4:69
  for UN being Universe
  for X being set st X in UN holds
  for s being FinSequence of X holds s in UN;

theorem :: CLASSES4:70
  for X being empty set
  for f being FinSequence of X* holds f = (len f) |-> 0;

theorem :: CLASSES4:71
  for UN being non trivial Universe, D being non empty set st D in UN holds
  for M being Matrix of D holds M in UN;

theorem :: CLASSES4:72
  FinSETS in SETS & NAT in SETS & REAL in SETS & ExtREAL in SETS;

theorem :: CLASSES4:73
  for X being set
  for U1 being Universe st U1 in Tarski-Class X
  holds Tarski-Class U1 c= Tarski-Class X;

theorem :: CLASSES4:74
  FinSETS in Tarski-Class omega;

theorem :: CLASSES4:75
  SETS = Tarski-Class omega;

theorem :: CLASSES4:76
  GrothendieckUniverse omega = SETS;

theorem :: CLASSES4:77
  GrothendieckUniverse omega = GrothendieckUniverse FinSETS = SETS;

theorem :: CLASSES4:78
  for X being non empty set
  for GX being Grothendieck of X
  for G being Universe st X misses G
  holds GX <> G;

theorem :: CLASSES4:79
  for X being non empty set
  for GX being Grothendieck of X
  for G being Universe st X misses G
  holds GX in G or G in GX;

theorem :: CLASSES4:80
  for UN1,UN2 being Universe
  for a being Element of UN1 st not a in UN2 holds UN2 in UN1;

theorem :: CLASSES4:81
  for G being Grothendieck holds union G = G;

registration
  cluster -> limit_ordinal for Grothendieck;
end;

theorem :: CLASSES4:82
  for UN being Universe, V being non empty Element of UN
  holds Funcs(V) is Subset of UN;

begin :: How to get out of a universe ?

theorem :: CLASSES4:83
  ex a being set st not a in UN;

theorem :: CLASSES4:84
  ex A being Subset of UN st not A in UN;

theorem :: CLASSES4:85
  not the set of all u where u is Element of UN is Element of UN;

theorem :: CLASSES4:86
  for X being Element of UN holds not UN \ X is Element of UN;

theorem :: CLASSES4:87
  not bool UN in UN;

begin :: A sequence of universes

theorem :: CLASSES4:88
  for X being set
  ex f being Function st dom f = NAT & f.0 = X &
  for n being Nat holds f.(n+1) = GrothendieckUniverse (f.n);

definition
  let X be set;
  func sequence_univers(X) -> Function means
:: CLASSES4:def 9

  dom it = NAT & it.0 = X &
  for n be Nat holds it.(n+1) = GrothendieckUniverse (it.n);
end;

theorem :: CLASSES4:89
  for X being set holds sequence_univers X is Sequence;

theorem :: CLASSES4:90
  for X being set for S being Sequence st dom S = NAT holds
  last S = S.NAT;

theorem :: CLASSES4:91
  for S being Sequence st dom S = NAT holds S.NAT = {} & last S = {};

theorem :: CLASSES4:92
  for X being set for S being Sequence st S = sequence_univers X holds
  last S = {} & S.NAT = {};

definition
  let X be set;
  func union_sequence_univers X -> non empty set equals
:: CLASSES4:def 10
  union rng sequence_univers X;
end;

theorem :: CLASSES4:93
  for X being set holds rng sequence_univers X c= union_sequence_univers X;

definition
  func sequence_univers -> sequence of union_sequence_univers {} equals
:: CLASSES4:def 11
  sequence_univers {};
end;

theorem :: CLASSES4:94
  {} in rng sequence_univers & FinSETS in rng sequence_univers &
  SETS in rng sequence_univers;

theorem :: CLASSES4:95
  not union rng sequence_univers is Grothendieck;

theorem :: CLASSES4:96
  Tarski-Class FinSETS = GrothendieckUniverse FinSETS &
  Tarski-Class SETS = GrothendieckUniverse SETS;

theorem :: CLASSES4:97
  for X being set for n being Nat holds
  (sequence_univers X).(n+1) is epsilon-transitive &
  Tarski-Class ((sequence_univers X).(n+1))
    = GrothendieckUniverse ((sequence_univers X).(n+1));

theorem :: CLASSES4:98
  for n being Nat holds Tarski-Class ((sequence_univers FinSETS).n)
    = GrothendieckUniverse ((sequence_univers FinSETS).n);

theorem :: CLASSES4:99
  for n being Nat holds UNIVERSE n in UNIVERSE (n+1);

theorem :: CLASSES4:100
  for n being Nat holds (sequence_univers FinSETS).n = UNIVERSE n;

theorem :: CLASSES4:101
  for n being Nat holds
  GrothendieckUniverse((sequence_univers {}).n)
    = (sequence_univers GrothendieckUniverse {}).n;

theorem :: CLASSES4:102
  for n being Nat holds sequence_univers.(n+1) = UNIVERSE n;

registration
  cluster non empty for Element of union rng sequence_univers;
end;

theorem :: CLASSES4:103
  FinSETS in GrothendieckUniverse sequence_univers &
  SETS in GrothendieckUniverse sequence_univers;

theorem :: CLASSES4:104
  for n being Nat holds
  (sequence_univers).(n+1) in GrothendieckUniverse sequence_univers;

definition
  func super_univers -> non trivial Universe equals
:: CLASSES4:def 12
  GrothendieckUniverse sequence_univers;
end;

theorem :: CLASSES4:105
  for n being Nat holds (sequence_univers).n c= (sequence_univers).(n+1);

definition
  let X being Element of union rng sequence_univers;
  func rank_univers X -> Nat means
:: CLASSES4:def 13

  X in (sequence_univers).it &
  for n being Nat st n < it holds not X in (sequence_univers).n;
end;

theorem :: CLASSES4:106
  for X being Element of union rng sequence_univers
  for n being Nat st rank_univers X <= n holds
  X in (sequence_univers).n;

theorem :: CLASSES4:107
  for i being Nat ex x being set st
  x in (sequence_univers).(i+1) \ (sequence_univers).i;

theorem :: CLASSES4:108
  for n being Nat holds not UNIVERSE (n + 1) \ UNIVERSE n in UNIVERSE(n + 1);

definition
  func ComplUniverse -> Function of NAT,union rng sequence_univers means
:: CLASSES4:def 14

  for n being Nat holds it.n = UNIVERSE (n + 1) \ UNIVERSE n;
end;

theorem :: CLASSES4:109
  for n being Nat holds ComplUniverse.n is non empty;

theorem :: CLASSES4:110
  for n being Nat holds ComplUniverse.n c= UNIVERSE (n+1);

theorem :: CLASSES4:111
  ex f being Function of NAT,union union rng sequence_univers st
  (for i being Nat holds f.i in ComplUniverse.i);

theorem :: CLASSES4:112
  for f being Function of NAT,union rng sequence_univers holds
  f in super_univers;

theorem :: CLASSES4:113
  for f being Function of NAT,union union rng sequence_univers holds
  f in super_univers;

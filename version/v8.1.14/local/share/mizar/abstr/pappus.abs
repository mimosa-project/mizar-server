:: Pappus's Hexagon Theorem in Real Projective Plane
::  by Roland Coghetto
:: 
:: Received June 30, 2021
:: Copyright (c) 2021-2023 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies PRE_TOPC, RVSUM_1, STRUCT_0, TARSKI, REAL_1, XCMPLX_0, ANPROJ_1,
      MCART_1, EUCLID_5, ALGSTR_0, ARYTM_1, ARYTM_3, CARD_1, EUCLID, FINSEQ_1,
      FUNCT_1, MATRIX_1, MATRIX_3, NUMBERS, RELAT_1, SUBSET_1, SUPINF_2,
      VECTSP_1, AFF_2, ANPROJ_2, MATRIXR1, ANPROJ_8, ANPROJ_9, PASCAL,
      PENCIL_1;
 notations PRE_TOPC, RVSUM_1, TARSKI, ORDINAL1, NUMBERS, XCMPLX_0, XREAL_0,
      FUNCT_1, FINSEQ_1, EUCLID, DOMAIN_1, ANPROJ_1, FUNCT_2, VECTSP_1,
      MATRIX_0, MATRIX_1, MATRIX_3, GROUP_1, RLVECT_1, ANPROJ_2, COLLSP,
      EUCLID_5, MATRIXR1, MATRIXR2, MATRIX_6, ANPROJ_8, ANPROJ_9, PASCAL,
      STRUCT_0;
 constructors BINOP_2, FINSEQ_4, MONOID_0, EUCLID_5, MATRIX13, REALSET1,
      ANPROJ_2, MATRIXR2, ANPROJ_8, ANPROJ_9, PASCAL;
 registrations ANPROJ_1, MATRTOP1, STRUCT_0, VECTSP_1, NUMBERS, XREAL_0,
      MEMBERED, MONOID_0, EUCLID, VALUED_0, ANPROJ_2, SUBSET_1, RLTOPSP1,
      XCMPLX_0, PASCAL;
 requirements BOOLE, SUBSET, NUMERALS, ARITHM;


begin :: Preliminaries

reserve a,b,c,d,e,f,g,h,i for Real,
                        M for Matrix of 3,REAL;

theorem :: PAPPUS:1
  M = <*<*a,b,c*>,
        <*d,e,f*>,
        <*g,h,i*>*> implies
  Det M = a*e*i - c*e*g - a*f*h + b*f*g - b*d*i + c*d*h;

theorem :: PAPPUS:2
  for P1,P4,P5 being Element of ProjectiveSpace TOP-REAL 3
  for p1,p2,p3,p4,p5 being Element of TOP-REAL 3 st
  p1 is non zero & P1 = Dir p1 &
  p4 is non zero & P4 = Dir p4 &
  p5 is non zero & P5 = Dir p5 &
  P1,P4,P5 are_collinear
  holds
  |{p1,p2,p4}| * |{p1,p3,p5}| = |{p1,p2,p5}| * |{p1,p3,p4}|;

theorem :: PAPPUS:3
  for r416,r415,r413,r418,r419,r412,
  r712,r746,r716,r742,r715,r743,r713,r745,
  r749,r718,r719,r748 being non zero Real st
  (- r412) * (- r713) = (- r413) * (- r712) &
  (- r415) * (- r719) = (- r419) * (- r715) &
  (- r418) * (- r716) = (- r416) * (- r718) &
  (- r745) * r416 = (- r746) * r415 &
  (- r748) * r413 = (- r743) * r418 &
  (- r742) * r419 = (- r749) * r412 &
  r712 * r746 = r716 * r742 &
  r715 * r743 = r713 * r745 holds
  r718 * r749 = r719 * r748;

begin :: Some technical lemmas proved by Prover9 and translated with help of ott2miz

reserve                           PCPP for CollProjectiveSpace,
        c1,c2,c3,c4,c5,c6,c7,c8,c9,c10 for Element of PCPP;

theorem :: PAPPUS:4
  c2 <> c1 & c3 <> c1 & c3 <> c2 & c4 <> c2 &
  c4 <> c3 & c5 <> c1 & c6 <> c1 & c6 <> c5 &
  c7 <> c5 & c7 <> c6 &
  (not c1,c4,c7 are_collinear) &
  (c1,c4,c2 are_collinear) & (c1,c4,c3 are_collinear) &
  (c1,c7,c5 are_collinear) & (c1,c7,c6 are_collinear) &
  (c4,c5,c8 are_collinear) & (c7,c2,c8 are_collinear) &
  (c4,c6,c9 are_collinear) & (c3,c7,c9 are_collinear) &
  (c2,c6,c10 are_collinear) & (c3,c5,c10 are_collinear) implies
  not c4,c7,c2 are_collinear & not c4,c10,c3 are_collinear &
  not c4,c7,c3 are_collinear & not c4,c10,c2 are_collinear &
  not c4,c7,c5 are_collinear & not c4,c10,c8 are_collinear &
  not c4,c7,c8 are_collinear & not c4,c10,c5 are_collinear &
  not c4,c7,c9 are_collinear & not c4,c10,c6 are_collinear &
  not c4,c7,c6 are_collinear & not c4,c10,c9 are_collinear &
  not c7,c10,c5 are_collinear & not c7,c4,c6 are_collinear &
  not c7,c10,c9 are_collinear & not c7,c4,c3 are_collinear &
  not c7,c10,c3 are_collinear & not c7,c4,c9 are_collinear &
  not c7,c10,c2 are_collinear & not c7,c4,c8 are_collinear &
  not c10,c4,c2 are_collinear & not c10,c7,c6 are_collinear &
  not c10,c4,c6 are_collinear & not c10,c7,c2 are_collinear &
  not c10,c4,c5 are_collinear & not c10,c7,c3 are_collinear &
  not c10,c4,c3 are_collinear & not c10,c7,c5 are_collinear;

theorem :: PAPPUS:5
  not c2=c1 & not c3=c2 &
  not c5=c1 & not c7=c5 &
  not c7=c6 & not c1,c4,c7 are_collinear &
  c1,c4,c2 are_collinear & c1,c4,c3 are_collinear &
  c1,c7,c5 are_collinear & c1,c7,c6 are_collinear &
  c4,c5,c8 are_collinear & c7,c2,c8 are_collinear &
  c2,c6,c10 are_collinear & c3,c5,c10 are_collinear implies
  not c10,c7,c8 are_collinear;

theorem :: PAPPUS:6
  not c1,c4,c7 are_collinear &
  c1,c4,c2 are_collinear & c1,c4,c3 are_collinear &
  c1,c7,c5 are_collinear & c1,c7,c6 are_collinear &
  c4,c5,c8 are_collinear & c7,c2,c8 are_collinear &
  c4,c6,c9 are_collinear & c3,c7,c9 are_collinear &
  c2,c6,c10 are_collinear & c3,c5,c10 are_collinear
  implies
  c4,c2,c3 are_collinear & c4,c5,c8 are_collinear &
  c4,c9,c6 are_collinear & c7,c5,c6 are_collinear &
  c7,c9,c3 are_collinear & c7,c2,c8 are_collinear &
  c10,c2,c6 are_collinear & c10,c5,c3 are_collinear;

theorem :: PAPPUS:7
  c3 <> c1 & c3 <> c2 & c6 <> c1 & c6 <> c5 &
  not c1,c2,c5 are_collinear &
  c1,c2,c3 are_collinear & c1,c5,c6 are_collinear
  implies not c2,c3,c5 are_collinear & not c2,c3,c6 are_collinear &
  not c2,c5,c6 are_collinear & not c3,c5,c6 are_collinear;

theorem :: PAPPUS:8
  c3 <> c1 & c4 <> c1 & c4 <> c3 &
  c3 <> c2 & c4 <> c2 & c6 <> c1 &
  c7 <> c1 & c7 <> c6 & c6 <> c5 &
  c7 <> c5 &
  not c1,c2,c5 are_collinear &
  c1,c2,c3 are_collinear & c1,c2,c4 are_collinear &
  c1,c5,c6 are_collinear & c1,c5,c7 are_collinear implies
  not c1,c3,c6 are_collinear &
  c1,c3,c4 are_collinear & c1,c6,c7 are_collinear &
  c3 <> c1 &  c2 <> c1 &  c3 <> c2 &  c4 <> c3 & c4 <> c2 &
  c6 <> c1 &  c5 <> c1 &  c6 <> c5 &  c7 <> c6 &  c7 <> c5 &
  not c1,c4,c7 are_collinear &
  c1,c4,c3 are_collinear & c1,c4,c2 are_collinear &
  c1,c7,c6 are_collinear & c1,c7,c5 are_collinear;

theorem :: PAPPUS:9
  c4 <> c2 & c4 <> c3 & c8 <> c2 &
  not c2,c3,c6 are_collinear implies
  not c2,c3,c4 are_collinear or
  not c2,c6,c8 are_collinear or
  not c3,c4,c8 are_collinear;

theorem :: PAPPUS:10
  c4 <> c1 & c6 <> c5 & not c1,c2,c5 are_collinear implies
  not (c1,c2,c4 are_collinear) or not (c1,c5,c6 are_collinear) or
    not (c4,c6,c8 are_collinear) or (c8 <> c5);

theorem :: PAPPUS:11
  c4 <> c2 & c6 <> c1 &
  not c1,c2,c5 are_collinear &
  c1,c2,c4 are_collinear & c1,c5,c6 are_collinear &
  c4,c6,c8 are_collinear implies c8 <> c2;

theorem :: PAPPUS:12
  not c1,c2,c5 are_collinear &
  c1,c2,c3 are_collinear & c1,c2,c4 are_collinear implies
  c2,c3,c4 are_collinear;

theorem :: PAPPUS:13
  not c1,c2,c5 are_collinear &
  c1,c5,c6 are_collinear & c1,c5,c7 are_collinear
  implies c5,c6,c7 are_collinear;

theorem :: PAPPUS:14
  c3 <> c1 &
  not c1,c2,c5 are_collinear &
  c1,c2,c3 are_collinear & c1,c5,c7 are_collinear implies
  c7 <> c3;

theorem :: PAPPUS:15
  c4 <> c1 & c4 <> c3 &
  not c1,c2,c5 are_collinear &
  c1,c2,c3 are_collinear & c1,c2,c4 are_collinear &
  c4,c5,c9 are_collinear implies
  c9 <> c3;

theorem :: PAPPUS:16
  c4 <> c1 & c4 <> c2 & c6 <> c1 &
  c7 <> c6 & c7 <> c5 &
  not c1,c2,c5 are_collinear &
  c1,c2,c4 are_collinear & c1,c5,c6 are_collinear &
  c1,c5,c7 are_collinear & c2,c7,c9 are_collinear &
  c4,c5,c9 are_collinear implies
  not c9,c2,c5 are_collinear;

begin :: The real projective plane and Pappus's Theorem

reserve o,p1,p2,p3,q1,q2,q3,r1,r2,r3 for Element of ProjectiveSpace TOP-REAL 3;

::$N Pappus theorem
theorem :: PAPPUS:17
  o<>p2 & o<>p3 & p2<>p3 &
  p1<>p2 & p1<>p3 & o<>q2 & o<>q3 & q2<>q3 & q1<> q2 & q1<>q3 &
  not o,p1,q1 are_collinear & o,p1,p2 are_collinear & o,p1,p3 are_collinear &
  o,q1,q2 are_collinear & o,q1,q3 are_collinear & p1,q2,r3 are_collinear &
  q1,p2,r3 are_collinear & p1,q3,r2 are_collinear & p3,q1,r2 are_collinear &
  p2,q3,r1 are_collinear & p3,q2,r1 are_collinear
  implies r1,r2,r3 are_collinear;

theorem :: PAPPUS:18
  ProjectiveSpace TOP-REAL 3 is Pappian Desarguesian CollProjectivePlane;

begin :: Version 2

reserve v0,v1,v2,v3,v4,
        c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,
        v100,v101,v102,v103 for Element of ProjectiveSpace TOP-REAL 3;

theorem :: PAPPUS:19
  c1 <> c2 & c1 <> c3 & c2 <> c3 & c2 <> c4 & c3 <> c4 & c1 <> c5 & c1 <> c6 &
  c5 <> c6 & c5 <> c7 & c6 <> c7 & (not c1,c4,c7 are_collinear) &
  (c1,c4,c2 are_collinear) & (c1,c4,c3 are_collinear) &
  (c1,c7,c5 are_collinear) & (c1,c7,c6 are_collinear) &
  (c4,c5,c8 are_collinear) & (c7,c2,c8 are_collinear) &
  (c4,c6,c9 are_collinear) & (c3,c7,c9 are_collinear) &
  (c2,c6,c10 are_collinear) & (c3,c5,c10 are_collinear)
  implies not(
  (c4,c2,c7 are_collinear or c4,c3,c7 are_collinear or c2,c3,c7
  are_collinear or c4,c2,c5 are_collinear or c4,c2,c6 are_collinear or
  c4,c3,c5 are_collinear or c4,c3,c6 are_collinear or c2,c7,c5
  are_collinear or c2,c7,c6 are_collinear or c3,c7,c5 are_collinear or
  c3,c7,c6 are_collinear or c2,c3,c5 are_collinear or c2,c3,c6
  are_collinear or c7,c5,c4 are_collinear or c7,c6,c4 are_collinear or
  c5,c6,c4 are_collinear or c5,c6,c2 are_collinear or not c4,c5,c8
  are_collinear or not c4,c6,c9 are_collinear or not c2,c7,c8
  are_collinear or not c2,c6,c10 are_collinear or not c3,c7,c9
  are_collinear or not c3,c5,c10 are_collinear));

theorem :: PAPPUS:20
  conic(0,0,0,0,0,0) = the carrier of ProjectiveSpace TOP-REAL 3;

theorem :: PAPPUS:21
  o<>p2 & o<>p3 & p2<>p3 &
  p1<>p2 & p1<>p3 & o<>q2 & o<>q3 & q2<>q3 & q1<> q2 & q1<>q3 &
  not o,p1,q1 are_collinear & o,p1,p2 are_collinear & o,p1,p3 are_collinear &
  o,q1,q2 are_collinear & o,q1,q3 are_collinear & p1,q2,r3 are_collinear &
  q1,p2,r3 are_collinear & p1,q3,r2 are_collinear & p3,q1,r2 are_collinear &
  p2,q3,r1 are_collinear & p3,q2,r1 are_collinear
  implies p1,p2,p3,q1,q2,q3,r1,r2,r3 are_in_Pascal_configuration;

::$N Pappus theorem
theorem :: PAPPUS:22
  o<>p2 & o<>p3 & p2<>p3 &
  p1<>p2 & p1<>p3 & o<>q2 & o<>q3 & q2<>q3 & q1<> q2 & q1<>q3 &
  not o,p1,q1 are_collinear & o,p1,p2 are_collinear & o,p1,p3 are_collinear &
  o,q1,q2 are_collinear & o,q1,q3 are_collinear & p1,q2,r3 are_collinear &
  q1,p2,r3 are_collinear & p1,q3,r2 are_collinear & p3,q1,r2 are_collinear &
  p2,q3,r1 are_collinear & p3,q2,r1 are_collinear
  implies r1,r2,r3 are_collinear;

:::::::::::::::::::::::
:: Prover9 + ott2miz ::
:::::::::::::::::::::::

::**********************************************************************
:: VERSION 1: Some Lemmas
::**********************************************************************

:: set(ignore_option_dependencies). % GUI handles dependencies

:: if(Prover9). % Options for Prover9
::   assign(max_weight, 1000).
::   assign(max_seconds, 60).
:: end_if.

:: if(Mace4).   % Options for Mace4
::   assign(max_seconds, 60).
:: end_if.

:: formulas(assumptions).

:: ((x = y) | (x = z) | (y = z)) -> f(x,y,z) #label(COLLSP2).
:: ((x != y) & f(x,y,z) & f(x,y,u) & f(x,y,v)) -> f(z,u,v) #label(COLLSP3).
:: f(x,y,z) -> (f(y,x,z) & f(x,z,y)) #label(COLLSP4). 
:: f(x,y,z) -> f(y,z,x) #label(COLLSP8).

:: end_of_list.

:: formulas(goals).

:: %all xo all xp1 all xp2 all xp3 
:: set(ignore_option_dependencies). % GUI handles dependencies

:: if(Prover9). % Options for Prover9
::   assign(max_weight, 1000).
::   assign(max_seconds, 60).
:: end_if.

:: if(Mace4).   % Options for Mace4
::   assign(max_seconds, 60).
:: end_if.

:: formulas(assumptions).

:: ((x = y) | (x = z) | (y = z)) -> f(x,y,z) #label(COLLSP2).
:: ((x != y) & f(x,y,z) & f(x,y,u) & f(x,y,v)) -> f(z,u,v) #label(COLLSP3).
:: f(x,y,z) -> (f(y,x,z) & f(x,z,y)) #label(COLLSP4).
:: f(x,y,z) -> f(y,z,x) #label(COLLSP8).

:: end_of_list.

:: formulas(goals).
:: %all xq1 all xq2 all xq3 
:: %all xr1 all xr2 all xr3 
:: ((xo != xp2) & (xo != xp3) & (xp2 != xp3) & (xp1 != xp2) & (xp1 != xp3) & 
:: (xo != xq2) & (xo != xq3) & (xq2 != xq3) & (xq1 != xq2) & (xq1 != xq3) &
:: -f(xo,xp1,xq1) & 
:: f(xo,xp1,xp2) & f(xo,xp1,xp3) & 
:: f(xo,xq1,xq2) & f(xo,xq1,xq3) & 
:: f(xp1,xq2,xr3) & f(xq1,xp2,xr3) & 
:: f(xp1,xq3,xr2) & f(xp3,xq1,xr2) & 
:: f(xp2,xq3,xr1) & f(xp3,xq2,xr1) ) 

:: ->
:: -f(xp1,xq1,xp2) & -f(xp1,xr1,xp3) & -f(xp1,xq1,xp3) & -f(xp1,xr1,xp2) &
:: -f(xp1,xq1,xq2) & -f(xp1,xr1,xr3) & -f(xp1,xq1,xr3) & -f(xp1,xr1,xq2) &
:: -f(xp1,xq1,xr2) & -f(xp1,xr1,xq3) & -f(xp1,xq1,xq3) & -f(xp1,xr1,xr2) &
:: -f(xq1,xr1,xq2) & -f(xq1,xp1,xq3) & -f(xq1,xr1,xq2) & -f(xq1,xp1,xq3) &
:: -f(xq1,xr1,xr2) & -f(xq1,xp1,xp3) & -f(xq1,xr1,xp3) & -f(xq1,xp1,xr2) &
:: -f(xq1,xr1,xp2) & -f(xq1,xp1,xr3) & -f(xq1,xr1,xp2) & -f(xq1,xp1,xr3) &
:: -f(xr1,xp1,xp2) & -f(xr1,xq1,xq3) & -f(xr1,xp1,xq3) & -f(xr1,xq1,xp2) &
:: -f(xr1,xp1,xq2) & -f(xr1,xq1,xp3) & -f(xr1,xp1,xp3) & -f(xr1,xq1,xq2).

:: end_of_list.

:: ============================== prooftrans ============================
:: Prover9 (32) version Dec-2007, Dec 2007.
:: Process 8264 was started by RC on 
:: Thu Sep 15 21:13:31 2016
:: The command was "/cygdrive/c/Program Files (x86)/Prover9-Mace4/bin-win32/prover9".
:: ============================== end of head ===========================

:: ============================== end of input ==========================

:: ============================== PROOF =================================

:: % -------- Comments from original proof --------
:: % Proof 1 at 0.84 (+ 0.08) seconds.
:: % Length of proof is 189.
:: % Level of proof is 54.
:: % Maximum clause weight is 112.
:: % Given clauses 1760.

:: 1 x = y | x = z | y = z -> f(x,y,z) # label(COLLSP2) # label(non_clause).  [assumption].
:: 2 x != y & f(x,y,z) & f(x,y,u) & f(x,y,w) -> f(z,u,w) # label(COLLSP3) # label(non_clause).  [assumption].
:: 3 f(x,y,z) -> f(y,x,z) & f(x,z,y) # label(COLLSP4) # label(non_clause).  [assumption].
:: 4 f(x,y,z) -> f(y,z,x) # label(COLLSP8) # label(non_clause).  [assumption].
:: 5 x != y & x != z & y != z & u != y & u != z & x != w & x != v5 & w != v5 & v6 != w & v6 != v5 & -f(x,u,v6) & f(x,u,y) & f(x,u,z) & f(x,v6,w) & f(x,v6,v5) & f(u,w,v7) & f(v6,y,v7) & f(u,v5,v8) & f(z,v6,v8) & f(y,v5,v9) & f(z,w,v9) -> -f(u,v6,y) & -f(u,v9,z) & -f(u,v6,z) & -f(u,v9,y) & -f(u,v6,w) & -f(u,v9,v7) & -f(u,v6,v7) & -f(u,v9,w) & -f(u,v6,v8) & -f(u,v9,v5) & -f(u,v6,v5) & -f(u,v9,v8) & -f(v6,v9,w) & -f(v6,u,v5) & -f(v6,v9,w) & -f(v6,u,v5) & -f(v6,v9,v8) & -f(v6,u,z) & -f(v6,v9,z) & -f(v6,u,v8) & -f(v6,v9,y) & -f(v6,u,v7) & -f(v6,v9,y) & -f(v6,u,v7) & -f(v9,u,y) & -f(v9,v6,v5) & -f(v9,u,v5) & -f(v9,v6,y) & -f(v9,u,w) & -f(v9,v6,z) & -f(v9,u,z) & -f(v9,v6,w) # label(non_clause) # label(goal).  [goal].
:: 6 x != y | f(y,x,z) # label(COLLSP2).  [clausify(1)].
:: 7 x != y | f(y,z,x) # label(COLLSP2).  [clausify(1)].
:: 8 x != y | f(z,y,x) # label(COLLSP2).  [clausify(1)].
:: 9 x = y | -f(y,x,z) | -f(y,x,u) | -f(y,x,w) | f(z,u,w) # label(COLLSP3).  [clausify(2)].
:: 10 -f(x,y,z) | f(y,x,z) # label(COLLSP4).  [clausify(3)].
:: 11 -f(x,y,z) | f(x,z,y) # label(COLLSP4).  [clausify(3)].
:: 12 -f(x,y,z) | f(y,z,x) # label(COLLSP8).  [clausify(4)].
:: 13 c2 != c1.  [deny(5)].
:: 14 c3 != c1.  [deny(5)].
:: 15 c3 != c2.  [deny(5)].
:: 16 c4 != c2.  [deny(5)].
:: 17 c4 != c3.  [deny(5)].
:: 18 c5 != c1.  [deny(5)].
:: 19 c6 != c1.  [deny(5)].
:: 20 c6 != c5.  [deny(5)].
:: 21 c7 != c5.  [deny(5)].
:: 22 c7 != c6.  [deny(5)].
:: 23 -f(c1,c4,c7).  [deny(5)].
:: 24 f(c1,c4,c2).  [deny(5)].
:: 25 f(c1,c4,c3).  [deny(5)].
:: 26 f(c1,c7,c5).  [deny(5)].
:: 27 f(c1,c7,c6).  [deny(5)].
:: 28 f(c4,c5,c8).  [deny(5)].
:: 29 f(c7,c2,c8).  [deny(5)].
:: 30 f(c4,c6,c9).  [deny(5)].
:: 31 f(c3,c7,c9).  [deny(5)].
:: 32 f(c2,c6,c10).  [deny(5)].
:: 33 f(c3,c5,c10).  [deny(5)].
:: 34 f(c4,c7,c2) | f(c4,c10,c3) | f(c4,c7,c3) | f(c4,c10,c2) | f(c4,c7,c5) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c7,c6) | f(c4,c10,c9) | f(c7,c10,c5) | f(c7,c4,c6) | f(c7,c10,c9) | f(c7,c4,c3) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c10,c4,c2) | f(c10,c7,c6) | f(c10,c4,c6) | f(c10,c7,c2) | f(c10,c4,c5) | f(c10,c7,c3) | f(c10,c4,c3) | f(c10,c7,c5).  [deny(5)].
:: 40 f(x,y,x).  [xx_res(7,a)].
:: 41 f(x,y,y).  [xx_res(8,a)].
:: 42 -f(c7,c1,c4).  [ur(12,b,23,a)].
:: 44 -f(c4,c1,c7).  [ur(10,b,23,a)].
:: 45 c7 != c4.  [ur(8,b,23,a)].
:: 46 c7 != c1.  [ur(7,b,23,a)].
:: 47 c4 != c1.  [ur(6,b,23,a)].
:: 48 f(c4,c2,c1).  [resolve(24,a,12,a)].
:: 49 f(c1,c2,c4).  [resolve(24,a,11,a)].
:: 51 -f(c1,c4,x) | -f(c1,c4,y) | f(x,y,c2).  [resolve(24,a,9,d),unit_del(a,47)].
:: 54 f(c4,c3,c1).  [resolve(25,a,12,a)].
:: 55 f(c1,c3,c4).  [resolve(25,a,11,a)].
:: 60 f(c7,c5,c1).  [resolve(26,a,12,a)].
:: 61 f(c1,c5,c7).  [resolve(26,a,11,a)].
:: 63 -f(c1,c7,x) | -f(c1,c7,y) | f(x,y,c5).  [resolve(26,a,9,d),unit_del(a,46)].
:: 66 f(c7,c6,c1).  [resolve(27,a,12,a)].
:: 67 f(c1,c6,c7).  [resolve(27,a,11,a)].
:: 72 f(c5,c8,c4).  [resolve(28,a,12,a)].
:: 78 f(c2,c8,c7).  [resolve(29,a,12,a)].
:: 84 f(c6,c9,c4).  [resolve(30,a,12,a)].
:: 90 f(c7,c9,c3).  [resolve(31,a,12,a)].
:: 96 f(c6,c10,c2).  [resolve(32,a,12,a)].
:: 102 f(c5,c10,c3).  [resolve(33,a,12,a)].
:: 108 f(c4,c7,c2) | f(c4,c10,c3) | f(c4,c7,c3) | f(c4,c10,c2) | f(c4,c7,c5) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c7,c6) | f(c4,c10,c9) | f(c7,c10,c5) | f(c7,c4,c6) | f(c7,c10,c9) | f(c7,c4,c3) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c10,c4,c2) | f(c10,c4,c6) | f(c10,c7,c2) | f(c10,c4,c5) | f(c10,c7,c3) | f(c10,c4,c3) | f(c10,c7,c5) | f(c7,c6,c10).  [resolve(34,v,12,a)].
:: 115 -f(c4,c7,c1).  [ur(12,b,42,a)].
:: 116 -f(c7,c4,c1).  [ur(11,b,42,a)].
:: 117 x = y | -f(y,x,z) | -f(y,x,u) | f(z,u,y).  [resolve(40,a,9,d)].
:: 118 x = y | -f(y,x,z) | -f(y,x,u) | f(z,y,u).  [resolve(40,a,9,c)].
:: 120 x = y | -f(y,x,z) | -f(y,x,u) | f(z,u,x).  [resolve(41,a,9,d)].
:: 121 x = y | -f(y,x,z) | -f(y,x,u) | f(z,x,u).  [resolve(41,a,9,c)].
:: 122 x = y | -f(y,x,z) | -f(y,x,u) | f(x,z,u).  [resolve(41,a,9,b)].
:: 124 f(c2,c4,c1).  [resolve(48,a,10,a)].
:: 128 -f(c4,c2,c7).  [ur(9,a,16,a(flip),c,48,a,d,40,a,e,42,a)].
:: 132 -f(c1,c2,c7).  [ur(9,a,13,a,c,40,a,d,49,a,e,42,a)].
:: 134 -f(c4,c7,c2).  [ur(11,b,128,a)].
:: 143 f(c4,c10,c3) | f(c4,c7,c3) | f(c4,c10,c2) | f(c4,c7,c5) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c7,c6) | f(c4,c10,c9) | f(c7,c10,c5) | f(c7,c4,c6) | f(c7,c10,c9) | f(c7,c4,c3) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c10,c4,c2) | f(c10,c4,c6) | f(c10,c7,c2) | f(c10,c4,c5) | f(c10,c7,c3) | f(c10,c4,c3) | f(c10,c7,c5) | f(c7,c6,c10).  [back_unit_del(108),unit_del(a,134)].
:: 152 f(c3,c4,c1).  [resolve(54,a,10,a)].
:: 156 -f(c4,c3,c7).  [ur(9,a,17,a(flip),c,40,a,d,54,a,e,116,a)].
:: 160 -f(c1,c3,c7).  [ur(9,a,14,a,c,40,a,d,55,a,e,42,a)].
:: 165 -f(c1,c4,x) | f(c1,x,c2).  [resolve(51,a,40,a)].
:: 177 f(c5,c1,c7).  [resolve(60,a,12,a)].
:: 178 f(c5,c7,c1).  [resolve(60,a,10,a)].
:: 182 -f(c7,c5,c4).  [ur(9,a,21,a(flip),c,40,a,d,60,a,e,115,a)].
:: 183 -f(c7,c5,c2).  [ur(9,a,21,a(flip),b,60,a,d,40,a,e,132,a)].
:: 187 -f(c1,c5,c4).  [ur(9,a,18,a,c,40,a,d,61,a,e,44,a)].
:: 196 -f(c7,c6,x) | -f(c7,c6,y) | f(c1,x,y).  [resolve(66,a,9,b),flip(a),unit_del(a,22)].
:: 197 -f(c7,c6,c4).  [ur(9,a,22,a(flip),c,40,a,d,66,a,e,115,a)].
:: 198 -f(c7,c6,c2).  [ur(9,a,22,a(flip),b,66,a,d,40,a,e,132,a)].
:: 205 -f(c7,c4,c3).  [ur(12,b,156,a)].
:: 206 -f(c4,c7,c3).  [ur(11,b,156,a)].
:: 208 c7 != c3.  [ur(8,b,156,a)].
:: 210 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c7,c5) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c7,c6) | f(c4,c10,c9) | f(c7,c10,c5) | f(c7,c4,c6) | f(c7,c10,c9) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c10,c4,c2) | f(c10,c4,c6) | f(c10,c7,c2) | f(c10,c4,c5) | f(c10,c7,c3) | f(c10,c4,c3) | f(c10,c7,c5) | f(c7,c6,c10).  [back_unit_del(143),unit_del(b,206),unit_del(o,205)].
:: 220 -f(c3,c7,c4).  [ur(9,a,208,a,c,40,a,d,41,a,e,156,a)].
:: 222 -f(c7,c1,c3).  [ur(12,b,160,a)].
:: 227 -f(c1,c5,c3).  [ur(9,a,18,a,b,40,a,d,61,a,e,160,a)].
:: 229 -f(c7,c5,c3).  [ur(9,a,21,a(flip),b,60,a,d,40,a,e,160,a)].
:: 233 -f(c1,c6,c4).  [ur(9,a,19,a,c,40,a,d,67,a,e,44,a)].
:: 234 -f(c1,c6,c3).  [ur(9,a,19,a,b,40,a,d,67,a,e,160,a)].
:: 239 f(c8,c4,c5).  [resolve(72,a,12,a)].
:: 257 f(c8,c2,c7).  [resolve(78,a,10,a)].
:: 271 -f(c4,c7,c5).  [ur(12,b,182,a)].
:: 274 c5 != c4.  [ur(8,b,182,a),flip(a)].
:: 281 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c7,c6) | f(c4,c10,c9) | f(c7,c10,c5) | f(c7,c4,c6) | f(c7,c10,c9) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c10,c4,c2) | f(c10,c4,c6) | f(c10,c7,c2) | f(c10,c4,c5) | f(c10,c7,c3) | f(c10,c4,c3) | f(c10,c7,c5) | f(c7,c6,c10).  [back_unit_del(210),unit_del(c,271)].
:: 289 f(c9,c4,c6).  [resolve(84,a,12,a)].
:: 301 f(c9,c7,c3).  [resolve(90,a,10,a)].
:: 314 c5 != c2.  [ur(8,b,183,a),flip(a)].
:: 316 -f(c5,c2,c7).  [ur(9,a,314,a(flip),c,40,a,d,41,a,e,183,a)].
:: 324 -f(c4,c3,c5).  [ur(9,a,17,a(flip),b,54,a,d,40,a,e,187,a)].
:: 332 f(c10,c2,c6).  [resolve(96,a,12,a)].
:: 333 f(c10,c6,c2).  [resolve(96,a,10,a)].
:: 348 -f(c4,c7,c6).  [ur(12,b,197,a)].
:: 349 -f(c7,c4,c6).  [ur(11,b,197,a)].
:: 351 c6 != c4.  [ur(8,b,197,a),flip(a)].
:: 353 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c10,c5) | f(c7,c10,c9) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c10,c4,c2) | f(c10,c4,c6) | f(c10,c7,c2) | f(c10,c4,c5) | f(c10,c7,c3) | f(c10,c4,c3) | f(c10,c7,c5) | f(c7,c6,c10).  [back_unit_del(281),unit_del(h,348),unit_del(k,349)].
:: 366 -f(c4,c6,c7).  [ur(9,a,351,a,c,41,a,d,40,a,e,197,a)].
:: 368 -f(c2,c7,c6).  [ur(12,b,198,a)].
:: 371 c6 != c2.  [ur(8,b,198,a),flip(a)].
:: 378 f(c10,c3,c5).  [resolve(102,a,12,a)].
:: 379 f(c10,c5,c3).  [resolve(102,a,10,a)].
:: 389 -f(c1,c7,x) | f(c7,x,c5).  [resolve(63,a,41,a)].
:: 411 -f(c3,c4,c5).  [ur(9,a,17,a,b,152,a,d,41,a,e,187,a)].
:: 421 -f(c5,c1,c3).  [ur(9,a,18,a(flip),b,41,a,d,177,a,e,160,a)].
:: 425 -f(c5,c7,c3).  [ur(9,a,21,a,b,41,a,c,178,a,e,222,a)].
:: 442 c5 != c3.  [ur(8,b,227,a),flip(a)].
:: 472 -f(c3,c7,c5).  [ur(12,b,229,a)].
:: 497 -f(c2,c4,c6).  [ur(9,a,16,a,b,124,a,d,41,a,e,233,a)].
:: 675 f(c1,c3,c2).  [resolve(165,a,25,a)].
:: 794 x = y | -f(y,x,z) | f(z,y,x).  [resolve(118,c,41,a)].
:: 805 f(c3,c2,c1).  [resolve(675,a,12,a)].
:: 820 -f(c3,c2,c6).  [ur(117,a,15,a(flip),b,805,a,d,234,a)].
:: 821 -f(c3,c2,c5).  [ur(117,a,15,a(flip),b,805,a,d,227,a)].
:: 1127 -f(c5,c4,c3).  [ur(117,a,274,a(flip),b,41,a,d,324,a)].
:: 1348 c10 = c5 | -f(c10,c5,x) | f(c5,x,c3).  [resolve(122,c,379,a),flip(a)].
:: 1349 c10 = c3 | -f(c10,c3,x) | f(c3,x,c5).  [resolve(122,c,378,a),flip(a)].
:: 1350 c10 = c6 | -f(c10,c6,x) | f(c6,x,c2).  [resolve(122,c,333,a),flip(a)].
:: 1351 c10 = c2 | -f(c10,c2,x) | f(c2,x,c6).  [resolve(122,c,332,a),flip(a)].
:: 1352 c9 = c7 | -f(c9,c7,x) | f(c7,x,c3).  [resolve(122,c,301,a),flip(a)].
:: 1355 c9 = c4 | -f(c9,c4,x) | f(c4,x,c6).  [resolve(122,c,289,a),flip(a)].
:: 1359 c8 = c4 | -f(c8,c4,x) | f(c4,x,c5).  [resolve(122,c,239,a),flip(a)].
:: 1412 f(c7,c6,c5).  [resolve(389,a,27,a)].
:: 1425 f(c6,c5,c7).  [resolve(1412,a,12,a)].
:: 1450 -f(c6,c5,c2).  [ur(122,a,20,a(flip),c,1425,a,d,316,a)].
:: 1452 -f(c6,c5,c3).  [ur(122,a,20,a(flip),b,1425,a,d,425,a)].
:: 1619 -f(c6,c4,c2).  [ur(121,a,351,a(flip),c,40,a,d,497,a)].
:: 1632 -f(c2,c6,c3).  [ur(120,a,371,a,c,40,a,d,820,a)].
:: 1637 -f(c3,c5,c2).  [ur(120,a,442,a,b,40,a,d,821,a)].
:: 1644 -f(c2,c6,c5).  [ur(122,a,371,a,c,40,a,d,1450,a)].
:: 1653 -f(c3,c5,c6).  [ur(121,a,442,a,c,40,a,d,1452,a)].
:: 1687 -f(c7,c6,x) | f(c1,x,c5).  [resolve(196,b,1412,a)].
:: 1720 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c10,c5) | f(c7,c10,c9) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c10,c4,c2) | f(c10,c4,c6) | f(c10,c7,c2) | f(c10,c4,c5) | f(c10,c7,c3) | f(c10,c4,c3) | f(c7,c6,c10).  [resolve(353,u,10,a),merge(v)].
:: 1841 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c10,c5) | f(c7,c10,c9) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c10,c4,c2) | f(c10,c4,c6) | f(c10,c7,c2) | f(c10,c4,c5) | f(c10,c4,c3) | f(c7,c6,c10).  [resolve(1720,s,10,a),merge(u)].
:: 1858 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c10,c5) | f(c7,c10,c9) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c10,c4,c2) | f(c10,c4,c6) | f(c10,c4,c5) | f(c10,c4,c3) | f(c7,c6,c10).  [resolve(1841,q,10,a),merge(t)].
:: 1875 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c10,c5) | f(c7,c10,c9) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c10,c4,c2) | f(c10,c4,c5) | f(c10,c4,c3) | f(c7,c6,c10).  [resolve(1858,p,10,a),merge(s)].
:: 1892 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c10,c5) | f(c7,c10,c9) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c10,c4,c2) | f(c10,c4,c3) | f(c7,c6,c10).  [resolve(1875,p,10,a),merge(r)].
:: 1909 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c10,c5) | f(c7,c10,c9) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c10,c4,c2) | f(c7,c6,c10).  [resolve(1892,p,10,a),merge(q)].
:: 1926 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c10,c5) | f(c7,c10,c9) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c7,c6,c10).  [resolve(1909,o,10,a),merge(p)].
:: 1941 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c10,c5) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c7,c6,c10) | f(c10,c9,c7).  [resolve(1926,j,12,a)].
:: 1960 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c10,c5) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c7,c6,c10) | f(c9,c7,c10).  [resolve(1941,o,12,a)].
:: 2007 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c10,c5) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c7,c6,c10) | c9 = c7.  [resolve(1960,o,1352,b),merge(p)].
:: 2022 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c7,c6,c10) | c9 = c7 | f(c10,c5,c7).  [resolve(2007,i,12,a)].
:: 2029 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c10,c3) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c7,c6,c10) | c9 = c7 | c10 = c5.  [resolve(2022,o,1348,b),unit_del(p,425)].
:: 2046 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c7,c6,c10) | c9 = c7 | c10 = c5 | f(c10,c3,c7).  [resolve(2029,i,12,a)].
:: 2053 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c4,c9) | f(c7,c10,c2) | f(c7,c4,c8) | f(c7,c6,c10) | c9 = c7 | c10 = c5 | c10 = c3.  [resolve(2046,o,1349,b),unit_del(p,472)].
:: 2070 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c4,c9) | f(c7,c4,c8) | f(c7,c6,c10) | c9 = c7 | c10 = c5 | c10 = c3 | f(c10,c2,c7).  [resolve(2053,j,12,a)].
:: 2077 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c4,c9) | f(c7,c4,c8) | f(c7,c6,c10) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2.  [resolve(2070,o,1351,b),unit_del(p,368)].
:: 2080 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c4,c9) | f(c7,c4,c8) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5).  [resolve(2077,k,1687,a)].
:: 2158 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | f(c7,c4,c8) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5).  [resolve(2080,i,10,a),merge(o)].
:: 2175 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | f(c4,c10,c9) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5).  [resolve(2158,i,10,a),merge(n)].
:: 2190 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | f(c10,c9,c4).  [resolve(2175,h,12,a)].
:: 2209 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | f(c9,c4,c10).  [resolve(2190,m,12,a)].
:: 2257 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c10,c8) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | c9 = c4.  [resolve(2209,m,1355,b),merge(n)].
:: 2272 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | c9 = c4 | f(c10,c8,c4).  [resolve(2257,c,12,a)].
:: 2291 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | c9 = c4 | f(c8,c4,c10).  [resolve(2272,m,12,a)].
:: 2337 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | f(c4,c10,c6) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | c9 = c4 | c8 = c4.  [resolve(2291,m,1359,b),merge(n)].
:: 2352 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | c9 = c4 | c8 = c4 | f(c10,c6,c4).  [resolve(2337,f,12,a)].
:: 2358 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c7,c8) | f(c4,c10,c5) | f(c4,c7,c9) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | c9 = c4 | c8 = c4 | c10 = c6.  [resolve(2352,m,1350,b),unit_del(n,1619)].
:: 2375 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c7,c8) | f(c4,c7,c9) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | c9 = c4 | c8 = c4 | c10 = c6 | f(c10,c5,c4).  [resolve(2358,d,12,a)].
:: 2382 f(c4,c10,c3) | f(c4,c10,c2) | f(c4,c7,c8) | f(c4,c7,c9) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | c9 = c4 | c8 = c4 | c10 = c6.  [resolve(2375,m,1348,b),merge(m),unit_del(m,1127)].
:: 2397 f(c4,c10,c2) | f(c4,c7,c8) | f(c4,c7,c9) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | c9 = c4 | c8 = c4 | c10 = c6 | f(c10,c3,c4).  [resolve(2382,a,12,a)].
:: 2403 f(c4,c10,c2) | f(c4,c7,c8) | f(c4,c7,c9) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | c9 = c4 | c8 = c4 | c10 = c6.  [resolve(2397,l,1349,b),merge(l),unit_del(l,411)].
:: 2418 f(c4,c7,c8) | f(c4,c7,c9) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | c9 = c4 | c8 = c4 | c10 = c6 | f(c10,c2,c4).  [resolve(2403,a,12,a)].
:: 2424 f(c4,c7,c8) | f(c4,c7,c9) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | c9 = c4 | c8 = c4 | c10 = c6.  [resolve(2418,k,1351,b),merge(k),unit_del(k,497)].
:: 2425 f(c4,c7,c8) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | c9 = c4 | c8 = c4 | c10 = c6 | f(c9,c4,c7).  [resolve(2424,b,794,b),unit_del(j,45)].
:: 2445 f(c4,c7,c8) | c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | c9 = c4 | c8 = c4 | c10 = c6.  [resolve(2425,j,1355,b),merge(j),unit_del(j,348)].
:: 2446 c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | c9 = c4 | c8 = c4 | c10 = c6 | f(c8,c4,c7).  [resolve(2445,a,794,b),unit_del(i,45)].
:: 2466 c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | f(c1,c10,c5) | c9 = c4 | c8 = c4 | c10 = c6.  [resolve(2446,i,1359,b),merge(i),unit_del(i,271)].
:: 2481 c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | c9 = c4 | c8 = c4 | c10 = c6 | f(c10,c5,c1).  [resolve(2466,e,12,a)].
:: 2487 c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | c9 = c4 | c8 = c4 | c10 = c6.  [resolve(2481,h,1348,b),merge(h),unit_del(h,421)].
:: 2494 c9 = c7 | c10 = c5 | c10 = c3 | c10 = c2 | c9 = c4 | c8 = c4.  [para(2487(g,1),33(a,3)),unit_del(g,1653)].
:: 2501 c9 = c7 | c10 = c3 | c10 = c2 | c9 = c4 | c8 = c4.  [para(2494(b,1),32(a,3)),unit_del(f,1644)].
:: 2508 c9 = c7 | c10 = c2 | c9 = c4 | c8 = c4.  [para(2501(b,1),32(a,3)),unit_del(e,1632)].
:: 2515 c9 = c7 | c9 = c4 | c8 = c4.  [para(2508(b,1),33(a,3)),unit_del(d,1637)].
:: 2522 c9 = c4 | c8 = c4.  [para(2515(a,1),30(a,3)),unit_del(c,366)].
:: 2529 c8 = c4.  [para(2522(a,1),31(a,3)),unit_del(b,220)].
:: 2627 $F.  [back_rewrite(257),rewrite([2529(1)]),unit_del(a,128)].

:: ============================== end of proof ==========================

:: PROVER9: reformat IVY, renumber proof

:: ;; ============================== prooftrans ============================
:: ;; Prover9 (32) version Dec-2007, Dec 2007.
:: ;; Process 8264 was started by RC on 
:: ;; Thu Sep 15 21:13:31 2016
:: ;; The command was "/cygdrive/c/Program Files (x86)/Prover9-Mace4/bin-win32/prover9".
:: ;; ============================== end of head ===========================

:: ;; BEGINNING OF PROOF OBJECT
:: (
:: (1 (input) (= v0 v0) NIL)
:: (2 (input) (or (not (= v0 v1)) (f v1 v0 v2)) NIL)
:: (3 (input) (or (not (= v0 v1)) (f v1 v2 v0)) NIL)
:: (4 (input) (or (not (= v0 v1)) (f v2 v1 v0)) NIL)
:: (5 (input) (or (= v0 v1) (or (not (f v1 v0 v2)) (or (not (f v1 v0 v3)) (or (not (f v1 v0 v4)) (f v2 v3 v4))))) NIL)
:: (6 (input) (or (not (f v0 v1 v2)) (f v1 v0 v2)) NIL)
:: (7 (input) (or (not (f v0 v1 v2)) (f v0 v2 v1)) NIL)
:: (8 (input) (or (not (f v0 v1 v2)) (f v1 v2 v0)) NIL)
:: (9 (input) (not (= (c2) (c1))) NIL)
:: (10 (input) (not (= (c3) (c1))) NIL)
:: (11 (input) (not (= (c3) (c2))) NIL)
:: (12 (input) (not (= (c4) (c2))) NIL)
:: (13 (input) (not (= (c4) (c3))) NIL)
:: (14 (input) (not (= (c5) (c1))) NIL)
:: (15 (input) (not (= (c6) (c1))) NIL)
:: (16 (input) (not (= (c6) (c5))) NIL)
:: (17 (input) (not (= (c7) (c5))) NIL)
:: (18 (input) (not (= (c7) (c6))) NIL)
:: (19 (input) (not (f (c1) (c4) (c7))) NIL)
:: (20 (input) (f (c1) (c4) (c2)) NIL)
:: (21 (input) (f (c1) (c4) (c3)) NIL)
:: (22 (input) (f (c1) (c7) (c5)) NIL)
:: (23 (input) (f (c1) (c7) (c6)) NIL)
:: (24 (input) (f (c4) (c5) (c8)) NIL)
:: (25 (input) (f (c7) (c2) (c8)) NIL)
:: (26 (input) (f (c4) (c6) (c9)) NIL)
:: (27 (input) (f (c3) (c7) (c9)) NIL)
:: (28 (input) (f (c2) (c6) (c10)) NIL)
:: (29 (input) (f (c3) (c5) (c10)) NIL)
:: (30 (input) (or (f (c4) (c7) (c2)) (or (f (c4) (c10) (c3)) (or (f (c4) (c7) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c5)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c7) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c4) (c6)) (or (f (c7) (c10) (c9)) (or (f (c7) (c4) (c3)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c7) (c6)) (or (f (c10) (c4) (c6)) (or (f (c10) (c7) (c2)) (or (f (c10) (c4) (c5)) (or (f (c10) (c7) (c3)) (or (f (c10) (c4) (c3)) (f (c10) (c7) (c5))))))))))))))))))))))))))))) NIL)
:: (31 (instantiate 3 ((v0 . v100) (v1 . v100))) (or (not (= v100 v100)) (f v100 v2 v100)) NIL)
:: (32 (instantiate 1 ((v0 . v100))) (= v100 v100) NIL)
:: (33 (resolve 31 (1) 32 ()) (f v100 v2 v100) NIL)
:: (34 (instantiate 33 ((v100 . v0) (v2 . v1))) (f v0 v1 v0) NIL)
:: (35 (instantiate 4 ((v0 . v100) (v1 . v100))) (or (not (= v100 v100)) (f v2 v100 v100)) NIL)
:: (36 (instantiate 1 ((v0 . v100))) (= v100 v100) NIL)
:: (37 (resolve 35 (1) 36 ()) (f v2 v100 v100) NIL)
:: (38 (instantiate 37 ((v2 . v0) (v100 . v1))) (f v0 v1 v1) NIL)
:: (39 (instantiate 8 ((v0 . (c7)) (v1 . (c1)) (v2 . (c4)))) (or (not (f (c7) (c1) (c4))) (f (c1) (c4) (c7))) NIL)
:: (40 (resolve 39 (2) 19 ()) (not (f (c7) (c1) (c4))) NIL)
:: (41 (instantiate 6 ((v0 . (c4)) (v1 . (c1)) (v2 . (c7)))) (or (not (f (c4) (c1) (c7))) (f (c1) (c4) (c7))) NIL)
:: (42 (resolve 41 (2) 19 ()) (not (f (c4) (c1) (c7))) NIL)
:: (43 (instantiate 4 ((v0 . (c7)) (v1 . (c4)) (v2 . (c1)))) (or (not (= (c7) (c4))) (f (c1) (c4) (c7))) NIL)
:: (44 (resolve 43 (2) 19 ()) (not (= (c7) (c4))) NIL)
:: (45 (instantiate 3 ((v0 . (c7)) (v1 . (c1)) (v2 . (c4)))) (or (not (= (c7) (c1))) (f (c1) (c4) (c7))) NIL)
:: (46 (resolve 45 (2) 19 ()) (not (= (c7) (c1))) NIL)
:: (47 (instantiate 2 ((v0 . (c4)) (v1 . (c1)) (v2 . (c7)))) (or (not (= (c4) (c1))) (f (c1) (c4) (c7))) NIL)
:: (48 (resolve 47 (2) 19 ()) (not (= (c4) (c1))) NIL)
:: (49 (instantiate 8 ((v0 . (c1)) (v1 . (c4)) (v2 . (c2)))) (or (not (f (c1) (c4) (c2))) (f (c4) (c2) (c1))) NIL)
:: (50 (resolve 20 () 49 (1)) (f (c4) (c2) (c1)) NIL)
:: (51 (instantiate 7 ((v0 . (c1)) (v1 . (c4)) (v2 . (c2)))) (or (not (f (c1) (c4) (c2))) (f (c1) (c2) (c4))) NIL)
:: (52 (resolve 20 () 51 (1)) (f (c1) (c2) (c4)) NIL)
:: (53 (instantiate 5 ((v0 . (c4)) (v1 . (c1)) (v2 . v102) (v3 . v103) (v4 . (c2)))) (or (= (c4) (c1)) (or (not (f (c1) (c4) v102)) (or (not (f (c1) (c4) v103)) (or (not (f (c1) (c4) (c2))) (f v102 v103 (c2)))))) NIL)
:: (54 (resolve 20 () 53 (2 2 2 1)) (or (= (c4) (c1)) (or (not (f (c1) (c4) v102)) (or (not (f (c1) (c4) v103)) (f v102 v103 (c2))))) NIL)
:: (55 (instantiate 54 ((v102 . v0) (v103 . v1))) (or (= (c4) (c1)) (or (not (f (c1) (c4) v0)) (or (not (f (c1) (c4) v1)) (f v0 v1 (c2))))) NIL)
:: (56 (instantiate 55 ((v0 . v100) (v1 . v101))) (or (= (c4) (c1)) (or (not (f (c1) (c4) v100)) (or (not (f (c1) (c4) v101)) (f v100 v101 (c2))))) NIL)
:: (57 (resolve 48 () 56 (1)) (or (not (f (c1) (c4) v100)) (or (not (f (c1) (c4) v101)) (f v100 v101 (c2)))) NIL)
:: (58 (instantiate 57 ((v100 . v0) (v101 . v1))) (or (not (f (c1) (c4) v0)) (or (not (f (c1) (c4) v1)) (f v0 v1 (c2)))) NIL)
:: (59 (instantiate 8 ((v0 . (c1)) (v1 . (c4)) (v2 . (c3)))) (or (not (f (c1) (c4) (c3))) (f (c4) (c3) (c1))) NIL)
:: (60 (resolve 21 () 59 (1)) (f (c4) (c3) (c1)) NIL)
:: (61 (instantiate 7 ((v0 . (c1)) (v1 . (c4)) (v2 . (c3)))) (or (not (f (c1) (c4) (c3))) (f (c1) (c3) (c4))) NIL)
:: (62 (resolve 21 () 61 (1)) (f (c1) (c3) (c4)) NIL)
:: (63 (instantiate 8 ((v0 . (c1)) (v1 . (c7)) (v2 . (c5)))) (or (not (f (c1) (c7) (c5))) (f (c7) (c5) (c1))) NIL)
:: (64 (resolve 22 () 63 (1)) (f (c7) (c5) (c1)) NIL)
:: (65 (instantiate 7 ((v0 . (c1)) (v1 . (c7)) (v2 . (c5)))) (or (not (f (c1) (c7) (c5))) (f (c1) (c5) (c7))) NIL)
:: (66 (resolve 22 () 65 (1)) (f (c1) (c5) (c7)) NIL)
:: (67 (instantiate 5 ((v0 . (c7)) (v1 . (c1)) (v2 . v102) (v3 . v103) (v4 . (c5)))) (or (= (c7) (c1)) (or (not (f (c1) (c7) v102)) (or (not (f (c1) (c7) v103)) (or (not (f (c1) (c7) (c5))) (f v102 v103 (c5)))))) NIL)
:: (68 (resolve 22 () 67 (2 2 2 1)) (or (= (c7) (c1)) (or (not (f (c1) (c7) v102)) (or (not (f (c1) (c7) v103)) (f v102 v103 (c5))))) NIL)
:: (69 (instantiate 68 ((v102 . v0) (v103 . v1))) (or (= (c7) (c1)) (or (not (f (c1) (c7) v0)) (or (not (f (c1) (c7) v1)) (f v0 v1 (c5))))) NIL)
:: (70 (instantiate 69 ((v0 . v100) (v1 . v101))) (or (= (c7) (c1)) (or (not (f (c1) (c7) v100)) (or (not (f (c1) (c7) v101)) (f v100 v101 (c5))))) NIL)
:: (71 (resolve 46 () 70 (1)) (or (not (f (c1) (c7) v100)) (or (not (f (c1) (c7) v101)) (f v100 v101 (c5)))) NIL)
:: (72 (instantiate 71 ((v100 . v0) (v101 . v1))) (or (not (f (c1) (c7) v0)) (or (not (f (c1) (c7) v1)) (f v0 v1 (c5)))) NIL)
:: (73 (instantiate 8 ((v0 . (c1)) (v1 . (c7)) (v2 . (c6)))) (or (not (f (c1) (c7) (c6))) (f (c7) (c6) (c1))) NIL)
:: (74 (resolve 23 () 73 (1)) (f (c7) (c6) (c1)) NIL)
:: (75 (instantiate 7 ((v0 . (c1)) (v1 . (c7)) (v2 . (c6)))) (or (not (f (c1) (c7) (c6))) (f (c1) (c6) (c7))) NIL)
:: (76 (resolve 23 () 75 (1)) (f (c1) (c6) (c7)) NIL)
:: (77 (instantiate 8 ((v0 . (c4)) (v1 . (c5)) (v2 . (c8)))) (or (not (f (c4) (c5) (c8))) (f (c5) (c8) (c4))) NIL)
:: (78 (resolve 24 () 77 (1)) (f (c5) (c8) (c4)) NIL)
:: (79 (instantiate 8 ((v0 . (c7)) (v1 . (c2)) (v2 . (c8)))) (or (not (f (c7) (c2) (c8))) (f (c2) (c8) (c7))) NIL)
:: (80 (resolve 25 () 79 (1)) (f (c2) (c8) (c7)) NIL)
:: (81 (instantiate 8 ((v0 . (c4)) (v1 . (c6)) (v2 . (c9)))) (or (not (f (c4) (c6) (c9))) (f (c6) (c9) (c4))) NIL)
:: (82 (resolve 26 () 81 (1)) (f (c6) (c9) (c4)) NIL)
:: (83 (instantiate 8 ((v0 . (c3)) (v1 . (c7)) (v2 . (c9)))) (or (not (f (c3) (c7) (c9))) (f (c7) (c9) (c3))) NIL)
:: (84 (resolve 27 () 83 (1)) (f (c7) (c9) (c3)) NIL)
:: (85 (instantiate 8 ((v0 . (c2)) (v1 . (c6)) (v2 . (c10)))) (or (not (f (c2) (c6) (c10))) (f (c6) (c10) (c2))) NIL)
:: (86 (resolve 28 () 85 (1)) (f (c6) (c10) (c2)) NIL)
:: (87 (instantiate 8 ((v0 . (c3)) (v1 . (c5)) (v2 . (c10)))) (or (not (f (c3) (c5) (c10))) (f (c5) (c10) (c3))) NIL)
:: (88 (resolve 29 () 87 (1)) (f (c5) (c10) (c3)) NIL)
:: (89 (instantiate 8 ((v0 . (c10)) (v1 . (c7)) (v2 . (c6)))) (or (not (f (c10) (c7) (c6))) (f (c7) (c6) (c10))) NIL)
:: (90 (resolve 30 (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1) 89 (1)) (or (f (c4) (c7) (c2)) (or (f (c4) (c10) (c3)) (or (f (c4) (c7) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c5)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c7) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c4) (c6)) (or (f (c7) (c10) (c9)) (or (f (c7) (c4) (c3)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c4) (c6)) (or (f (c10) (c7) (c2)) (or (f (c10) (c4) (c5)) (or (f (c10) (c7) (c3)) (or (f (c10) (c4) (c3)) (or (f (c10) (c7) (c5)) (f (c7) (c6) (c10))))))))))))))))))))))))))))) NIL)
:: (91 (instantiate 8 ((v0 . (c4)) (v1 . (c7)) (v2 . (c1)))) (or (not (f (c4) (c7) (c1))) (f (c7) (c1) (c4))) NIL)
:: (92 (resolve 91 (2) 40 ()) (not (f (c4) (c7) (c1))) NIL)
:: (93 (instantiate 7 ((v0 . (c7)) (v1 . (c4)) (v2 . (c1)))) (or (not (f (c7) (c4) (c1))) (f (c7) (c1) (c4))) NIL)
:: (94 (resolve 93 (2) 40 ()) (not (f (c7) (c4) (c1))) NIL)
:: (95 (instantiate 34 ((v0 . v104) (v1 . v100))) (f v104 v100 v104) NIL)
:: (96 (instantiate 5 ((v0 . v100) (v1 . v104) (v2 . v102) (v3 . v103) (v4 . v104))) (or (= v100 v104) (or (not (f v104 v100 v102)) (or (not (f v104 v100 v103)) (or (not (f v104 v100 v104)) (f v102 v103 v104))))) NIL)
:: (97 (resolve 95 () 96 (2 2 2 1)) (or (= v100 v104) (or (not (f v104 v100 v102)) (or (not (f v104 v100 v103)) (f v102 v103 v104)))) NIL)
:: (98 (instantiate 97 ((v100 . v0) (v104 . v1) (v102 . v2) (v103 . v3))) (or (= v0 v1) (or (not (f v1 v0 v2)) (or (not (f v1 v0 v3)) (f v2 v3 v1)))) NIL)
:: (99 (instantiate 34 ((v0 . v103) (v1 . v100))) (f v103 v100 v103) NIL)
:: (100 (instantiate 5 ((v0 . v100) (v1 . v103) (v2 . v102) (v3 . v103) (v4 . v104))) (or (= v100 v103) (or (not (f v103 v100 v102)) (or (not (f v103 v100 v103)) (or (not (f v103 v100 v104)) (f v102 v103 v104))))) NIL)
:: (101 (resolve 99 () 100 (2 2 1)) (or (= v100 v103) (or (not (f v103 v100 v102)) (or (not (f v103 v100 v104)) (f v102 v103 v104)))) NIL)
:: (102 (instantiate 101 ((v100 . v0) (v103 . v1) (v102 . v2) (v104 . v3))) (or (= v0 v1) (or (not (f v1 v0 v2)) (or (not (f v1 v0 v3)) (f v2 v1 v3)))) NIL)
:: (103 (instantiate 38 ((v0 . v101) (v1 . v104))) (f v101 v104 v104) NIL)
:: (104 (instantiate 5 ((v0 . v104) (v1 . v101) (v2 . v102) (v3 . v103) (v4 . v104))) (or (= v104 v101) (or (not (f v101 v104 v102)) (or (not (f v101 v104 v103)) (or (not (f v101 v104 v104)) (f v102 v103 v104))))) NIL)
:: (105 (resolve 103 () 104 (2 2 2 1)) (or (= v104 v101) (or (not (f v101 v104 v102)) (or (not (f v101 v104 v103)) (f v102 v103 v104)))) NIL)
:: (106 (instantiate 105 ((v104 . v0) (v101 . v1) (v102 . v2) (v103 . v3))) (or (= v0 v1) (or (not (f v1 v0 v2)) (or (not (f v1 v0 v3)) (f v2 v3 v0)))) NIL)
:: (107 (instantiate 38 ((v0 . v101) (v1 . v103))) (f v101 v103 v103) NIL)
:: (108 (instantiate 5 ((v0 . v103) (v1 . v101) (v2 . v102) (v3 . v103) (v4 . v104))) (or (= v103 v101) (or (not (f v101 v103 v102)) (or (not (f v101 v103 v103)) (or (not (f v101 v103 v104)) (f v102 v103 v104))))) NIL)
:: (109 (resolve 107 () 108 (2 2 1)) (or (= v103 v101) (or (not (f v101 v103 v102)) (or (not (f v101 v103 v104)) (f v102 v103 v104)))) NIL)
:: (110 (instantiate 109 ((v103 . v0) (v101 . v1) (v102 . v2) (v104 . v3))) (or (= v0 v1) (or (not (f v1 v0 v2)) (or (not (f v1 v0 v3)) (f v2 v0 v3)))) NIL)
:: (111 (instantiate 38 ((v0 . v101) (v1 . v102))) (f v101 v102 v102) NIL)
:: (112 (instantiate 5 ((v0 . v102) (v1 . v101) (v2 . v102) (v3 . v103) (v4 . v104))) (or (= v102 v101) (or (not (f v101 v102 v102)) (or (not (f v101 v102 v103)) (or (not (f v101 v102 v104)) (f v102 v103 v104))))) NIL)
:: (113 (resolve 111 () 112 (2 1)) (or (= v102 v101) (or (not (f v101 v102 v103)) (or (not (f v101 v102 v104)) (f v102 v103 v104)))) NIL)
:: (114 (instantiate 113 ((v102 . v0) (v101 . v1) (v103 . v2) (v104 . v3))) (or (= v0 v1) (or (not (f v1 v0 v2)) (or (not (f v1 v0 v3)) (f v0 v2 v3)))) NIL)
:: (115 (instantiate 6 ((v0 . (c4)) (v1 . (c2)) (v2 . (c1)))) (or (not (f (c4) (c2) (c1))) (f (c2) (c4) (c1))) NIL)
:: (116 (resolve 50 () 115 (1)) (f (c2) (c4) (c1)) NIL)
:: (117 (instantiate 5 ((v0 . (c2)) (v1 . (c4)))) (or (= (c2) (c4)) (or (not (f (c4) (c2) v2)) (or (not (f (c4) (c2) v3)) (or (not (f (c4) (c2) v4)) (f v2 v3 v4))))) NIL)
:: (118 (flip 12 ()) (not (= (c2) (c4))) NIL)
:: (119 (resolve 117 (1) 118 ()) (or (not (f (c4) (c2) v2)) (or (not (f (c4) (c2) v3)) (or (not (f (c4) (c2) v4)) (f v2 v3 v4)))) NIL)
:: (120 (instantiate 119 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c4) (c2) v0)) (or (not (f (c4) (c2) v1)) (or (not (f (c4) (c2) v2)) (f v0 v1 v2)))) NIL)
:: (121 (instantiate 120 ((v1 . (c1)))) (or (not (f (c4) (c2) v0)) (or (not (f (c4) (c2) (c1))) (or (not (f (c4) (c2) v2)) (f v0 (c1) v2)))) NIL)
:: (122 (resolve 121 (2 1) 50 ()) (or (not (f (c4) (c2) v0)) (or (not (f (c4) (c2) v2)) (f v0 (c1) v2))) NIL)
:: (123 (instantiate 122 ((v2 . v1))) (or (not (f (c4) (c2) v0)) (or (not (f (c4) (c2) v1)) (f v0 (c1) v1))) NIL)
:: (124 (instantiate 123 ((v1 . (c4)))) (or (not (f (c4) (c2) v0)) (or (not (f (c4) (c2) (c4))) (f v0 (c1) (c4)))) NIL)
:: (125 (instantiate 34 ((v0 . (c4)) (v1 . (c2)))) (f (c4) (c2) (c4)) NIL)
:: (126 (resolve 124 (2 1) 125 ()) (or (not (f (c4) (c2) v0)) (f v0 (c1) (c4))) NIL)
:: (127 (instantiate 126 ((v0 . (c7)))) (or (not (f (c4) (c2) (c7))) (f (c7) (c1) (c4))) NIL)
:: (128 (resolve 127 (2) 40 ()) (not (f (c4) (c2) (c7))) NIL)
:: (129 (instantiate 5 ((v0 . (c2)) (v1 . (c1)))) (or (= (c2) (c1)) (or (not (f (c1) (c2) v2)) (or (not (f (c1) (c2) v3)) (or (not (f (c1) (c2) v4)) (f v2 v3 v4))))) NIL)
:: (130 (resolve 129 (1) 9 ()) (or (not (f (c1) (c2) v2)) (or (not (f (c1) (c2) v3)) (or (not (f (c1) (c2) v4)) (f v2 v3 v4)))) NIL)
:: (131 (instantiate 130 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c1) (c2) v0)) (or (not (f (c1) (c2) v1)) (or (not (f (c1) (c2) v2)) (f v0 v1 v2)))) NIL)
:: (132 (instantiate 131 ((v1 . (c1)))) (or (not (f (c1) (c2) v0)) (or (not (f (c1) (c2) (c1))) (or (not (f (c1) (c2) v2)) (f v0 (c1) v2)))) NIL)
:: (133 (instantiate 34 ((v0 . (c1)) (v1 . (c2)))) (f (c1) (c2) (c1)) NIL)
:: (134 (resolve 132 (2 1) 133 ()) (or (not (f (c1) (c2) v0)) (or (not (f (c1) (c2) v2)) (f v0 (c1) v2))) NIL)
:: (135 (instantiate 134 ((v2 . v1))) (or (not (f (c1) (c2) v0)) (or (not (f (c1) (c2) v1)) (f v0 (c1) v1))) NIL)
:: (136 (instantiate 135 ((v1 . (c4)))) (or (not (f (c1) (c2) v0)) (or (not (f (c1) (c2) (c4))) (f v0 (c1) (c4)))) NIL)
:: (137 (resolve 136 (2 1) 52 ()) (or (not (f (c1) (c2) v0)) (f v0 (c1) (c4))) NIL)
:: (138 (instantiate 137 ((v0 . (c7)))) (or (not (f (c1) (c2) (c7))) (f (c7) (c1) (c4))) NIL)
:: (139 (resolve 138 (2) 40 ()) (not (f (c1) (c2) (c7))) NIL)
:: (140 (instantiate 7 ((v0 . (c4)) (v1 . (c7)) (v2 . (c2)))) (or (not (f (c4) (c7) (c2))) (f (c4) (c2) (c7))) NIL)
:: (141 (resolve 140 (2) 128 ()) (not (f (c4) (c7) (c2))) NIL)
:: (142 (resolve 141 () 90 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c7) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c5)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c7) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c4) (c6)) (or (f (c7) (c10) (c9)) (or (f (c7) (c4) (c3)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c4) (c6)) (or (f (c10) (c7) (c2)) (or (f (c10) (c4) (c5)) (or (f (c10) (c7) (c3)) (or (f (c10) (c4) (c3)) (or (f (c10) (c7) (c5)) (f (c7) (c6) (c10)))))))))))))))))))))))))))) NIL)
:: (143 (instantiate 6 ((v0 . (c4)) (v1 . (c3)) (v2 . (c1)))) (or (not (f (c4) (c3) (c1))) (f (c3) (c4) (c1))) NIL)
:: (144 (resolve 60 () 143 (1)) (f (c3) (c4) (c1)) NIL)
:: (145 (instantiate 5 ((v0 . (c3)) (v1 . (c4)))) (or (= (c3) (c4)) (or (not (f (c4) (c3) v2)) (or (not (f (c4) (c3) v3)) (or (not (f (c4) (c3) v4)) (f v2 v3 v4))))) NIL)
:: (146 (flip 13 ()) (not (= (c3) (c4))) NIL)
:: (147 (resolve 145 (1) 146 ()) (or (not (f (c4) (c3) v2)) (or (not (f (c4) (c3) v3)) (or (not (f (c4) (c3) v4)) (f v2 v3 v4)))) NIL)
:: (148 (instantiate 147 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c4) (c3) v0)) (or (not (f (c4) (c3) v1)) (or (not (f (c4) (c3) v2)) (f v0 v1 v2)))) NIL)
:: (149 (instantiate 148 ((v1 . (c4)))) (or (not (f (c4) (c3) v0)) (or (not (f (c4) (c3) (c4))) (or (not (f (c4) (c3) v2)) (f v0 (c4) v2)))) NIL)
:: (150 (instantiate 34 ((v0 . (c4)) (v1 . (c3)))) (f (c4) (c3) (c4)) NIL)
:: (151 (resolve 149 (2 1) 150 ()) (or (not (f (c4) (c3) v0)) (or (not (f (c4) (c3) v2)) (f v0 (c4) v2))) NIL)
:: (152 (instantiate 151 ((v2 . v1))) (or (not (f (c4) (c3) v0)) (or (not (f (c4) (c3) v1)) (f v0 (c4) v1))) NIL)
:: (153 (instantiate 152 ((v1 . (c1)))) (or (not (f (c4) (c3) v0)) (or (not (f (c4) (c3) (c1))) (f v0 (c4) (c1)))) NIL)
:: (154 (resolve 153 (2 1) 60 ()) (or (not (f (c4) (c3) v0)) (f v0 (c4) (c1))) NIL)
:: (155 (instantiate 154 ((v0 . (c7)))) (or (not (f (c4) (c3) (c7))) (f (c7) (c4) (c1))) NIL)
:: (156 (resolve 155 (2) 94 ()) (not (f (c4) (c3) (c7))) NIL)
:: (157 (instantiate 5 ((v0 . (c3)) (v1 . (c1)))) (or (= (c3) (c1)) (or (not (f (c1) (c3) v2)) (or (not (f (c1) (c3) v3)) (or (not (f (c1) (c3) v4)) (f v2 v3 v4))))) NIL)
:: (158 (resolve 157 (1) 10 ()) (or (not (f (c1) (c3) v2)) (or (not (f (c1) (c3) v3)) (or (not (f (c1) (c3) v4)) (f v2 v3 v4)))) NIL)
:: (159 (instantiate 158 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c1) (c3) v0)) (or (not (f (c1) (c3) v1)) (or (not (f (c1) (c3) v2)) (f v0 v1 v2)))) NIL)
:: (160 (instantiate 159 ((v1 . (c1)))) (or (not (f (c1) (c3) v0)) (or (not (f (c1) (c3) (c1))) (or (not (f (c1) (c3) v2)) (f v0 (c1) v2)))) NIL)
:: (161 (instantiate 34 ((v0 . (c1)) (v1 . (c3)))) (f (c1) (c3) (c1)) NIL)
:: (162 (resolve 160 (2 1) 161 ()) (or (not (f (c1) (c3) v0)) (or (not (f (c1) (c3) v2)) (f v0 (c1) v2))) NIL)
:: (163 (instantiate 162 ((v2 . v1))) (or (not (f (c1) (c3) v0)) (or (not (f (c1) (c3) v1)) (f v0 (c1) v1))) NIL)
:: (164 (instantiate 163 ((v1 . (c4)))) (or (not (f (c1) (c3) v0)) (or (not (f (c1) (c3) (c4))) (f v0 (c1) (c4)))) NIL)
:: (165 (resolve 164 (2 1) 62 ()) (or (not (f (c1) (c3) v0)) (f v0 (c1) (c4))) NIL)
:: (166 (instantiate 165 ((v0 . (c7)))) (or (not (f (c1) (c3) (c7))) (f (c7) (c1) (c4))) NIL)
:: (167 (resolve 166 (2) 40 ()) (not (f (c1) (c3) (c7))) NIL)
:: (168 (instantiate 58 ((v0 . (c1)))) (or (not (f (c1) (c4) (c1))) (or (not (f (c1) (c4) v1)) (f (c1) v1 (c2)))) NIL)
:: (169 (instantiate 34 ((v0 . (c1)) (v1 . (c4)))) (f (c1) (c4) (c1)) NIL)
:: (170 (resolve 168 (1) 169 ()) (or (not (f (c1) (c4) v1)) (f (c1) v1 (c2))) NIL)
:: (171 (instantiate 170 ((v1 . v0))) (or (not (f (c1) (c4) v0)) (f (c1) v0 (c2))) NIL)
:: (172 (instantiate 8 ((v0 . (c7)) (v1 . (c5)) (v2 . (c1)))) (or (not (f (c7) (c5) (c1))) (f (c5) (c1) (c7))) NIL)
:: (173 (resolve 64 () 172 (1)) (f (c5) (c1) (c7)) NIL)
:: (174 (instantiate 6 ((v0 . (c7)) (v1 . (c5)) (v2 . (c1)))) (or (not (f (c7) (c5) (c1))) (f (c5) (c7) (c1))) NIL)
:: (175 (resolve 64 () 174 (1)) (f (c5) (c7) (c1)) NIL)
:: (176 (instantiate 5 ((v0 . (c5)) (v1 . (c7)))) (or (= (c5) (c7)) (or (not (f (c7) (c5) v2)) (or (not (f (c7) (c5) v3)) (or (not (f (c7) (c5) v4)) (f v2 v3 v4))))) NIL)
:: (177 (flip 17 ()) (not (= (c5) (c7))) NIL)
:: (178 (resolve 176 (1) 177 ()) (or (not (f (c7) (c5) v2)) (or (not (f (c7) (c5) v3)) (or (not (f (c7) (c5) v4)) (f v2 v3 v4)))) NIL)
:: (179 (instantiate 178 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c7) (c5) v0)) (or (not (f (c7) (c5) v1)) (or (not (f (c7) (c5) v2)) (f v0 v1 v2)))) NIL)
:: (180 (instantiate 179 ((v1 . (c7)))) (or (not (f (c7) (c5) v0)) (or (not (f (c7) (c5) (c7))) (or (not (f (c7) (c5) v2)) (f v0 (c7) v2)))) NIL)
:: (181 (instantiate 34 ((v0 . (c7)) (v1 . (c5)))) (f (c7) (c5) (c7)) NIL)
:: (182 (resolve 180 (2 1) 181 ()) (or (not (f (c7) (c5) v0)) (or (not (f (c7) (c5) v2)) (f v0 (c7) v2))) NIL)
:: (183 (instantiate 182 ((v2 . v1))) (or (not (f (c7) (c5) v0)) (or (not (f (c7) (c5) v1)) (f v0 (c7) v1))) NIL)
:: (184 (instantiate 183 ((v1 . (c1)))) (or (not (f (c7) (c5) v0)) (or (not (f (c7) (c5) (c1))) (f v0 (c7) (c1)))) NIL)
:: (185 (resolve 184 (2 1) 64 ()) (or (not (f (c7) (c5) v0)) (f v0 (c7) (c1))) NIL)
:: (186 (instantiate 185 ((v0 . (c4)))) (or (not (f (c7) (c5) (c4))) (f (c4) (c7) (c1))) NIL)
:: (187 (resolve 186 (2) 92 ()) (not (f (c7) (c5) (c4))) NIL)
:: (188 (instantiate 5 ((v0 . (c5)) (v1 . (c7)))) (or (= (c5) (c7)) (or (not (f (c7) (c5) v2)) (or (not (f (c7) (c5) v3)) (or (not (f (c7) (c5) v4)) (f v2 v3 v4))))) NIL)
:: (189 (flip 17 ()) (not (= (c5) (c7))) NIL)
:: (190 (resolve 188 (1) 189 ()) (or (not (f (c7) (c5) v2)) (or (not (f (c7) (c5) v3)) (or (not (f (c7) (c5) v4)) (f v2 v3 v4)))) NIL)
:: (191 (instantiate 190 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c7) (c5) v0)) (or (not (f (c7) (c5) v1)) (or (not (f (c7) (c5) v2)) (f v0 v1 v2)))) NIL)
:: (192 (instantiate 191 ((v0 . (c1)))) (or (not (f (c7) (c5) (c1))) (or (not (f (c7) (c5) v1)) (or (not (f (c7) (c5) v2)) (f (c1) v1 v2)))) NIL)
:: (193 (resolve 192 (1) 64 ()) (or (not (f (c7) (c5) v1)) (or (not (f (c7) (c5) v2)) (f (c1) v1 v2))) NIL)
:: (194 (instantiate 193 ((v1 . v0) (v2 . v1))) (or (not (f (c7) (c5) v0)) (or (not (f (c7) (c5) v1)) (f (c1) v0 v1))) NIL)
:: (195 (instantiate 194 ((v1 . (c7)))) (or (not (f (c7) (c5) v0)) (or (not (f (c7) (c5) (c7))) (f (c1) v0 (c7)))) NIL)
:: (196 (instantiate 34 ((v0 . (c7)) (v1 . (c5)))) (f (c7) (c5) (c7)) NIL)
:: (197 (resolve 195 (2 1) 196 ()) (or (not (f (c7) (c5) v0)) (f (c1) v0 (c7))) NIL)
:: (198 (instantiate 197 ((v0 . (c2)))) (or (not (f (c7) (c5) (c2))) (f (c1) (c2) (c7))) NIL)
:: (199 (resolve 198 (2) 139 ()) (not (f (c7) (c5) (c2))) NIL)
:: (200 (instantiate 5 ((v0 . (c5)) (v1 . (c1)))) (or (= (c5) (c1)) (or (not (f (c1) (c5) v2)) (or (not (f (c1) (c5) v3)) (or (not (f (c1) (c5) v4)) (f v2 v3 v4))))) NIL)
:: (201 (resolve 200 (1) 14 ()) (or (not (f (c1) (c5) v2)) (or (not (f (c1) (c5) v3)) (or (not (f (c1) (c5) v4)) (f v2 v3 v4)))) NIL)
:: (202 (instantiate 201 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c1) (c5) v0)) (or (not (f (c1) (c5) v1)) (or (not (f (c1) (c5) v2)) (f v0 v1 v2)))) NIL)
:: (203 (instantiate 202 ((v1 . (c1)))) (or (not (f (c1) (c5) v0)) (or (not (f (c1) (c5) (c1))) (or (not (f (c1) (c5) v2)) (f v0 (c1) v2)))) NIL)
:: (204 (instantiate 34 ((v0 . (c1)) (v1 . (c5)))) (f (c1) (c5) (c1)) NIL)
:: (205 (resolve 203 (2 1) 204 ()) (or (not (f (c1) (c5) v0)) (or (not (f (c1) (c5) v2)) (f v0 (c1) v2))) NIL)
:: (206 (instantiate 205 ((v2 . v1))) (or (not (f (c1) (c5) v0)) (or (not (f (c1) (c5) v1)) (f v0 (c1) v1))) NIL)
:: (207 (instantiate 206 ((v1 . (c7)))) (or (not (f (c1) (c5) v0)) (or (not (f (c1) (c5) (c7))) (f v0 (c1) (c7)))) NIL)
:: (208 (resolve 207 (2 1) 66 ()) (or (not (f (c1) (c5) v0)) (f v0 (c1) (c7))) NIL)
:: (209 (instantiate 208 ((v0 . (c4)))) (or (not (f (c1) (c5) (c4))) (f (c4) (c1) (c7))) NIL)
:: (210 (resolve 209 (2) 42 ()) (not (f (c1) (c5) (c4))) NIL)
:: (211 (instantiate 5 ((v0 . (c6)) (v1 . (c7)) (v2 . (c1)) (v3 . v103) (v4 . v104))) (or (= (c6) (c7)) (or (not (f (c7) (c6) (c1))) (or (not (f (c7) (c6) v103)) (or (not (f (c7) (c6) v104)) (f (c1) v103 v104))))) NIL)
:: (212 (resolve 74 () 211 (2 1)) (or (= (c6) (c7)) (or (not (f (c7) (c6) v103)) (or (not (f (c7) (c6) v104)) (f (c1) v103 v104)))) NIL)
:: (213 (instantiate 212 ((v103 . v0) (v104 . v1))) (or (= (c6) (c7)) (or (not (f (c7) (c6) v0)) (or (not (f (c7) (c6) v1)) (f (c1) v0 v1)))) NIL)
:: (214 (flip 213 (1)) (or (= (c7) (c6)) (or (not (f (c7) (c6) v0)) (or (not (f (c7) (c6) v1)) (f (c1) v0 v1)))) NIL)
:: (215 (instantiate 214 ((v0 . v100) (v1 . v101))) (or (= (c7) (c6)) (or (not (f (c7) (c6) v100)) (or (not (f (c7) (c6) v101)) (f (c1) v100 v101)))) NIL)
:: (216 (resolve 18 () 215 (1)) (or (not (f (c7) (c6) v100)) (or (not (f (c7) (c6) v101)) (f (c1) v100 v101))) NIL)
:: (217 (instantiate 216 ((v100 . v0) (v101 . v1))) (or (not (f (c7) (c6) v0)) (or (not (f (c7) (c6) v1)) (f (c1) v0 v1))) NIL)
:: (218 (instantiate 5 ((v0 . (c6)) (v1 . (c7)))) (or (= (c6) (c7)) (or (not (f (c7) (c6) v2)) (or (not (f (c7) (c6) v3)) (or (not (f (c7) (c6) v4)) (f v2 v3 v4))))) NIL)
:: (219 (flip 18 ()) (not (= (c6) (c7))) NIL)
:: (220 (resolve 218 (1) 219 ()) (or (not (f (c7) (c6) v2)) (or (not (f (c7) (c6) v3)) (or (not (f (c7) (c6) v4)) (f v2 v3 v4)))) NIL)
:: (221 (instantiate 220 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c7) (c6) v0)) (or (not (f (c7) (c6) v1)) (or (not (f (c7) (c6) v2)) (f v0 v1 v2)))) NIL)
:: (222 (instantiate 221 ((v1 . (c7)))) (or (not (f (c7) (c6) v0)) (or (not (f (c7) (c6) (c7))) (or (not (f (c7) (c6) v2)) (f v0 (c7) v2)))) NIL)
:: (223 (instantiate 34 ((v0 . (c7)) (v1 . (c6)))) (f (c7) (c6) (c7)) NIL)
:: (224 (resolve 222 (2 1) 223 ()) (or (not (f (c7) (c6) v0)) (or (not (f (c7) (c6) v2)) (f v0 (c7) v2))) NIL)
:: (225 (instantiate 224 ((v2 . v1))) (or (not (f (c7) (c6) v0)) (or (not (f (c7) (c6) v1)) (f v0 (c7) v1))) NIL)
:: (226 (instantiate 225 ((v1 . (c1)))) (or (not (f (c7) (c6) v0)) (or (not (f (c7) (c6) (c1))) (f v0 (c7) (c1)))) NIL)
:: (227 (resolve 226 (2 1) 74 ()) (or (not (f (c7) (c6) v0)) (f v0 (c7) (c1))) NIL)
:: (228 (instantiate 227 ((v0 . (c4)))) (or (not (f (c7) (c6) (c4))) (f (c4) (c7) (c1))) NIL)
:: (229 (resolve 228 (2) 92 ()) (not (f (c7) (c6) (c4))) NIL)
:: (230 (instantiate 5 ((v0 . (c6)) (v1 . (c7)))) (or (= (c6) (c7)) (or (not (f (c7) (c6) v2)) (or (not (f (c7) (c6) v3)) (or (not (f (c7) (c6) v4)) (f v2 v3 v4))))) NIL)
:: (231 (flip 18 ()) (not (= (c6) (c7))) NIL)
:: (232 (resolve 230 (1) 231 ()) (or (not (f (c7) (c6) v2)) (or (not (f (c7) (c6) v3)) (or (not (f (c7) (c6) v4)) (f v2 v3 v4)))) NIL)
:: (233 (instantiate 232 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c7) (c6) v0)) (or (not (f (c7) (c6) v1)) (or (not (f (c7) (c6) v2)) (f v0 v1 v2)))) NIL)
:: (234 (instantiate 233 ((v0 . (c1)))) (or (not (f (c7) (c6) (c1))) (or (not (f (c7) (c6) v1)) (or (not (f (c7) (c6) v2)) (f (c1) v1 v2)))) NIL)
:: (235 (resolve 234 (1) 74 ()) (or (not (f (c7) (c6) v1)) (or (not (f (c7) (c6) v2)) (f (c1) v1 v2))) NIL)
:: (236 (instantiate 235 ((v1 . v0) (v2 . v1))) (or (not (f (c7) (c6) v0)) (or (not (f (c7) (c6) v1)) (f (c1) v0 v1))) NIL)
:: (237 (instantiate 236 ((v1 . (c7)))) (or (not (f (c7) (c6) v0)) (or (not (f (c7) (c6) (c7))) (f (c1) v0 (c7)))) NIL)
:: (238 (instantiate 34 ((v0 . (c7)) (v1 . (c6)))) (f (c7) (c6) (c7)) NIL)
:: (239 (resolve 237 (2 1) 238 ()) (or (not (f (c7) (c6) v0)) (f (c1) v0 (c7))) NIL)
:: (240 (instantiate 239 ((v0 . (c2)))) (or (not (f (c7) (c6) (c2))) (f (c1) (c2) (c7))) NIL)
:: (241 (resolve 240 (2) 139 ()) (not (f (c7) (c6) (c2))) NIL)
:: (242 (instantiate 8 ((v0 . (c7)) (v1 . (c4)) (v2 . (c3)))) (or (not (f (c7) (c4) (c3))) (f (c4) (c3) (c7))) NIL)
:: (243 (resolve 242 (2) 156 ()) (not (f (c7) (c4) (c3))) NIL)
:: (244 (instantiate 7 ((v0 . (c4)) (v1 . (c7)) (v2 . (c3)))) (or (not (f (c4) (c7) (c3))) (f (c4) (c3) (c7))) NIL)
:: (245 (resolve 244 (2) 156 ()) (not (f (c4) (c7) (c3))) NIL)
:: (246 (instantiate 4 ((v0 . (c7)) (v1 . (c3)) (v2 . (c4)))) (or (not (= (c7) (c3))) (f (c4) (c3) (c7))) NIL)
:: (247 (resolve 246 (2) 156 ()) (not (= (c7) (c3))) NIL)
:: (248 (resolve 245 () 142 (2 1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c5)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c7) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c4) (c6)) (or (f (c7) (c10) (c9)) (or (f (c7) (c4) (c3)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c4) (c6)) (or (f (c10) (c7) (c2)) (or (f (c10) (c4) (c5)) (or (f (c10) (c7) (c3)) (or (f (c10) (c4) (c3)) (or (f (c10) (c7) (c5)) (f (c7) (c6) (c10))))))))))))))))))))))))))) NIL)
:: (249 (resolve 243 () 248 (2 2 2 2 2 2 2 2 2 2 2 2 2 1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c5)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c7) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c4) (c6)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c4) (c6)) (or (f (c10) (c7) (c2)) (or (f (c10) (c4) (c5)) (or (f (c10) (c7) (c3)) (or (f (c10) (c4) (c3)) (or (f (c10) (c7) (c5)) (f (c7) (c6) (c10)))))))))))))))))))))))))) NIL)
:: (250 (instantiate 5 ((v0 . (c7)) (v1 . (c3)))) (or (= (c7) (c3)) (or (not (f (c3) (c7) v2)) (or (not (f (c3) (c7) v3)) (or (not (f (c3) (c7) v4)) (f v2 v3 v4))))) NIL)
:: (251 (resolve 250 (1) 247 ()) (or (not (f (c3) (c7) v2)) (or (not (f (c3) (c7) v3)) (or (not (f (c3) (c7) v4)) (f v2 v3 v4)))) NIL)
:: (252 (instantiate 251 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c3) (c7) v0)) (or (not (f (c3) (c7) v1)) (or (not (f (c3) (c7) v2)) (f v0 v1 v2)))) NIL)
:: (253 (instantiate 252 ((v1 . (c3)))) (or (not (f (c3) (c7) v0)) (or (not (f (c3) (c7) (c3))) (or (not (f (c3) (c7) v2)) (f v0 (c3) v2)))) NIL)
:: (254 (instantiate 34 ((v0 . (c3)) (v1 . (c7)))) (f (c3) (c7) (c3)) NIL)
:: (255 (resolve 253 (2 1) 254 ()) (or (not (f (c3) (c7) v0)) (or (not (f (c3) (c7) v2)) (f v0 (c3) v2))) NIL)
:: (256 (instantiate 255 ((v2 . v1))) (or (not (f (c3) (c7) v0)) (or (not (f (c3) (c7) v1)) (f v0 (c3) v1))) NIL)
:: (257 (instantiate 256 ((v1 . (c7)))) (or (not (f (c3) (c7) v0)) (or (not (f (c3) (c7) (c7))) (f v0 (c3) (c7)))) NIL)
:: (258 (instantiate 38 ((v0 . (c3)) (v1 . (c7)))) (f (c3) (c7) (c7)) NIL)
:: (259 (resolve 257 (2 1) 258 ()) (or (not (f (c3) (c7) v0)) (f v0 (c3) (c7))) NIL)
:: (260 (instantiate 259 ((v0 . (c4)))) (or (not (f (c3) (c7) (c4))) (f (c4) (c3) (c7))) NIL)
:: (261 (resolve 260 (2) 156 ()) (not (f (c3) (c7) (c4))) NIL)
:: (262 (instantiate 8 ((v0 . (c7)) (v1 . (c1)) (v2 . (c3)))) (or (not (f (c7) (c1) (c3))) (f (c1) (c3) (c7))) NIL)
:: (263 (resolve 262 (2) 167 ()) (not (f (c7) (c1) (c3))) NIL)
:: (264 (instantiate 5 ((v0 . (c5)) (v1 . (c1)))) (or (= (c5) (c1)) (or (not (f (c1) (c5) v2)) (or (not (f (c1) (c5) v3)) (or (not (f (c1) (c5) v4)) (f v2 v3 v4))))) NIL)
:: (265 (resolve 264 (1) 14 ()) (or (not (f (c1) (c5) v2)) (or (not (f (c1) (c5) v3)) (or (not (f (c1) (c5) v4)) (f v2 v3 v4)))) NIL)
:: (266 (instantiate 265 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c1) (c5) v0)) (or (not (f (c1) (c5) v1)) (or (not (f (c1) (c5) v2)) (f v0 v1 v2)))) NIL)
:: (267 (instantiate 266 ((v0 . (c1)))) (or (not (f (c1) (c5) (c1))) (or (not (f (c1) (c5) v1)) (or (not (f (c1) (c5) v2)) (f (c1) v1 v2)))) NIL)
:: (268 (instantiate 34 ((v0 . (c1)) (v1 . (c5)))) (f (c1) (c5) (c1)) NIL)
:: (269 (resolve 267 (1) 268 ()) (or (not (f (c1) (c5) v1)) (or (not (f (c1) (c5) v2)) (f (c1) v1 v2))) NIL)
:: (270 (instantiate 269 ((v1 . v0) (v2 . v1))) (or (not (f (c1) (c5) v0)) (or (not (f (c1) (c5) v1)) (f (c1) v0 v1))) NIL)
:: (271 (instantiate 270 ((v1 . (c7)))) (or (not (f (c1) (c5) v0)) (or (not (f (c1) (c5) (c7))) (f (c1) v0 (c7)))) NIL)
:: (272 (resolve 271 (2 1) 66 ()) (or (not (f (c1) (c5) v0)) (f (c1) v0 (c7))) NIL)
:: (273 (instantiate 272 ((v0 . (c3)))) (or (not (f (c1) (c5) (c3))) (f (c1) (c3) (c7))) NIL)
:: (274 (resolve 273 (2) 167 ()) (not (f (c1) (c5) (c3))) NIL)
:: (275 (instantiate 5 ((v0 . (c5)) (v1 . (c7)))) (or (= (c5) (c7)) (or (not (f (c7) (c5) v2)) (or (not (f (c7) (c5) v3)) (or (not (f (c7) (c5) v4)) (f v2 v3 v4))))) NIL)
:: (276 (flip 17 ()) (not (= (c5) (c7))) NIL)
:: (277 (resolve 275 (1) 276 ()) (or (not (f (c7) (c5) v2)) (or (not (f (c7) (c5) v3)) (or (not (f (c7) (c5) v4)) (f v2 v3 v4)))) NIL)
:: (278 (instantiate 277 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c7) (c5) v0)) (or (not (f (c7) (c5) v1)) (or (not (f (c7) (c5) v2)) (f v0 v1 v2)))) NIL)
:: (279 (instantiate 278 ((v0 . (c1)))) (or (not (f (c7) (c5) (c1))) (or (not (f (c7) (c5) v1)) (or (not (f (c7) (c5) v2)) (f (c1) v1 v2)))) NIL)
:: (280 (resolve 279 (1) 64 ()) (or (not (f (c7) (c5) v1)) (or (not (f (c7) (c5) v2)) (f (c1) v1 v2))) NIL)
:: (281 (instantiate 280 ((v1 . v0) (v2 . v1))) (or (not (f (c7) (c5) v0)) (or (not (f (c7) (c5) v1)) (f (c1) v0 v1))) NIL)
:: (282 (instantiate 281 ((v1 . (c7)))) (or (not (f (c7) (c5) v0)) (or (not (f (c7) (c5) (c7))) (f (c1) v0 (c7)))) NIL)
:: (283 (instantiate 34 ((v0 . (c7)) (v1 . (c5)))) (f (c7) (c5) (c7)) NIL)
:: (284 (resolve 282 (2 1) 283 ()) (or (not (f (c7) (c5) v0)) (f (c1) v0 (c7))) NIL)
:: (285 (instantiate 284 ((v0 . (c3)))) (or (not (f (c7) (c5) (c3))) (f (c1) (c3) (c7))) NIL)
:: (286 (resolve 285 (2) 167 ()) (not (f (c7) (c5) (c3))) NIL)
:: (287 (instantiate 5 ((v0 . (c6)) (v1 . (c1)))) (or (= (c6) (c1)) (or (not (f (c1) (c6) v2)) (or (not (f (c1) (c6) v3)) (or (not (f (c1) (c6) v4)) (f v2 v3 v4))))) NIL)
:: (288 (resolve 287 (1) 15 ()) (or (not (f (c1) (c6) v2)) (or (not (f (c1) (c6) v3)) (or (not (f (c1) (c6) v4)) (f v2 v3 v4)))) NIL)
:: (289 (instantiate 288 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c1) (c6) v0)) (or (not (f (c1) (c6) v1)) (or (not (f (c1) (c6) v2)) (f v0 v1 v2)))) NIL)
:: (290 (instantiate 289 ((v1 . (c1)))) (or (not (f (c1) (c6) v0)) (or (not (f (c1) (c6) (c1))) (or (not (f (c1) (c6) v2)) (f v0 (c1) v2)))) NIL)
:: (291 (instantiate 34 ((v0 . (c1)) (v1 . (c6)))) (f (c1) (c6) (c1)) NIL)
:: (292 (resolve 290 (2 1) 291 ()) (or (not (f (c1) (c6) v0)) (or (not (f (c1) (c6) v2)) (f v0 (c1) v2))) NIL)
:: (293 (instantiate 292 ((v2 . v1))) (or (not (f (c1) (c6) v0)) (or (not (f (c1) (c6) v1)) (f v0 (c1) v1))) NIL)
:: (294 (instantiate 293 ((v1 . (c7)))) (or (not (f (c1) (c6) v0)) (or (not (f (c1) (c6) (c7))) (f v0 (c1) (c7)))) NIL)
:: (295 (resolve 294 (2 1) 76 ()) (or (not (f (c1) (c6) v0)) (f v0 (c1) (c7))) NIL)
:: (296 (instantiate 295 ((v0 . (c4)))) (or (not (f (c1) (c6) (c4))) (f (c4) (c1) (c7))) NIL)
:: (297 (resolve 296 (2) 42 ()) (not (f (c1) (c6) (c4))) NIL)
:: (298 (instantiate 5 ((v0 . (c6)) (v1 . (c1)))) (or (= (c6) (c1)) (or (not (f (c1) (c6) v2)) (or (not (f (c1) (c6) v3)) (or (not (f (c1) (c6) v4)) (f v2 v3 v4))))) NIL)
:: (299 (resolve 298 (1) 15 ()) (or (not (f (c1) (c6) v2)) (or (not (f (c1) (c6) v3)) (or (not (f (c1) (c6) v4)) (f v2 v3 v4)))) NIL)
:: (300 (instantiate 299 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c1) (c6) v0)) (or (not (f (c1) (c6) v1)) (or (not (f (c1) (c6) v2)) (f v0 v1 v2)))) NIL)
:: (301 (instantiate 300 ((v0 . (c1)))) (or (not (f (c1) (c6) (c1))) (or (not (f (c1) (c6) v1)) (or (not (f (c1) (c6) v2)) (f (c1) v1 v2)))) NIL)
:: (302 (instantiate 34 ((v0 . (c1)) (v1 . (c6)))) (f (c1) (c6) (c1)) NIL)
:: (303 (resolve 301 (1) 302 ()) (or (not (f (c1) (c6) v1)) (or (not (f (c1) (c6) v2)) (f (c1) v1 v2))) NIL)
:: (304 (instantiate 303 ((v1 . v0) (v2 . v1))) (or (not (f (c1) (c6) v0)) (or (not (f (c1) (c6) v1)) (f (c1) v0 v1))) NIL)
:: (305 (instantiate 304 ((v1 . (c7)))) (or (not (f (c1) (c6) v0)) (or (not (f (c1) (c6) (c7))) (f (c1) v0 (c7)))) NIL)
:: (306 (resolve 305 (2 1) 76 ()) (or (not (f (c1) (c6) v0)) (f (c1) v0 (c7))) NIL)
:: (307 (instantiate 306 ((v0 . (c3)))) (or (not (f (c1) (c6) (c3))) (f (c1) (c3) (c7))) NIL)
:: (308 (resolve 307 (2) 167 ()) (not (f (c1) (c6) (c3))) NIL)
:: (309 (instantiate 8 ((v0 . (c5)) (v1 . (c8)) (v2 . (c4)))) (or (not (f (c5) (c8) (c4))) (f (c8) (c4) (c5))) NIL)
:: (310 (resolve 78 () 309 (1)) (f (c8) (c4) (c5)) NIL)
:: (311 (instantiate 6 ((v0 . (c2)) (v1 . (c8)) (v2 . (c7)))) (or (not (f (c2) (c8) (c7))) (f (c8) (c2) (c7))) NIL)
:: (312 (resolve 80 () 311 (1)) (f (c8) (c2) (c7)) NIL)
:: (313 (instantiate 8 ((v0 . (c4)) (v1 . (c7)) (v2 . (c5)))) (or (not (f (c4) (c7) (c5))) (f (c7) (c5) (c4))) NIL)
:: (314 (resolve 313 (2) 187 ()) (not (f (c4) (c7) (c5))) NIL)
:: (315 (instantiate 4 ((v0 . (c4)) (v1 . (c5)) (v2 . (c7)))) (or (not (= (c4) (c5))) (f (c7) (c5) (c4))) NIL)
:: (316 (resolve 315 (2) 187 ()) (not (= (c4) (c5))) NIL)
:: (317 (flip 316 ()) (not (= (c5) (c4))) NIL)
:: (318 (resolve 314 () 249 (2 2 1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c7) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c4) (c6)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c4) (c6)) (or (f (c10) (c7) (c2)) (or (f (c10) (c4) (c5)) (or (f (c10) (c7) (c3)) (or (f (c10) (c4) (c3)) (or (f (c10) (c7) (c5)) (f (c7) (c6) (c10))))))))))))))))))))))))) NIL)
:: (319 (instantiate 8 ((v0 . (c6)) (v1 . (c9)) (v2 . (c4)))) (or (not (f (c6) (c9) (c4))) (f (c9) (c4) (c6))) NIL)
:: (320 (resolve 82 () 319 (1)) (f (c9) (c4) (c6)) NIL)
:: (321 (instantiate 6 ((v0 . (c7)) (v1 . (c9)) (v2 . (c3)))) (or (not (f (c7) (c9) (c3))) (f (c9) (c7) (c3))) NIL)
:: (322 (resolve 84 () 321 (1)) (f (c9) (c7) (c3)) NIL)
:: (323 (instantiate 4 ((v0 . (c2)) (v1 . (c5)) (v2 . (c7)))) (or (not (= (c2) (c5))) (f (c7) (c5) (c2))) NIL)
:: (324 (resolve 323 (2) 199 ()) (not (= (c2) (c5))) NIL)
:: (325 (flip 324 ()) (not (= (c5) (c2))) NIL)
:: (326 (instantiate 5 ((v0 . (c2)) (v1 . (c5)))) (or (= (c2) (c5)) (or (not (f (c5) (c2) v2)) (or (not (f (c5) (c2) v3)) (or (not (f (c5) (c2) v4)) (f v2 v3 v4))))) NIL)
:: (327 (flip 325 ()) (not (= (c2) (c5))) NIL)
:: (328 (resolve 326 (1) 327 ()) (or (not (f (c5) (c2) v2)) (or (not (f (c5) (c2) v3)) (or (not (f (c5) (c2) v4)) (f v2 v3 v4)))) NIL)
:: (329 (instantiate 328 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c5) (c2) v0)) (or (not (f (c5) (c2) v1)) (or (not (f (c5) (c2) v2)) (f v0 v1 v2)))) NIL)
:: (330 (instantiate 329 ((v1 . (c5)))) (or (not (f (c5) (c2) v0)) (or (not (f (c5) (c2) (c5))) (or (not (f (c5) (c2) v2)) (f v0 (c5) v2)))) NIL)
:: (331 (instantiate 34 ((v0 . (c5)) (v1 . (c2)))) (f (c5) (c2) (c5)) NIL)
:: (332 (resolve 330 (2 1) 331 ()) (or (not (f (c5) (c2) v0)) (or (not (f (c5) (c2) v2)) (f v0 (c5) v2))) NIL)
:: (333 (instantiate 332 ((v2 . v1))) (or (not (f (c5) (c2) v0)) (or (not (f (c5) (c2) v1)) (f v0 (c5) v1))) NIL)
:: (334 (instantiate 333 ((v1 . (c2)))) (or (not (f (c5) (c2) v0)) (or (not (f (c5) (c2) (c2))) (f v0 (c5) (c2)))) NIL)
:: (335 (instantiate 38 ((v0 . (c5)) (v1 . (c2)))) (f (c5) (c2) (c2)) NIL)
:: (336 (resolve 334 (2 1) 335 ()) (or (not (f (c5) (c2) v0)) (f v0 (c5) (c2))) NIL)
:: (337 (instantiate 336 ((v0 . (c7)))) (or (not (f (c5) (c2) (c7))) (f (c7) (c5) (c2))) NIL)
:: (338 (resolve 337 (2) 199 ()) (not (f (c5) (c2) (c7))) NIL)
:: (339 (instantiate 5 ((v0 . (c3)) (v1 . (c4)))) (or (= (c3) (c4)) (or (not (f (c4) (c3) v2)) (or (not (f (c4) (c3) v3)) (or (not (f (c4) (c3) v4)) (f v2 v3 v4))))) NIL)
:: (340 (flip 13 ()) (not (= (c3) (c4))) NIL)
:: (341 (resolve 339 (1) 340 ()) (or (not (f (c4) (c3) v2)) (or (not (f (c4) (c3) v3)) (or (not (f (c4) (c3) v4)) (f v2 v3 v4)))) NIL)
:: (342 (instantiate 341 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c4) (c3) v0)) (or (not (f (c4) (c3) v1)) (or (not (f (c4) (c3) v2)) (f v0 v1 v2)))) NIL)
:: (343 (instantiate 342 ((v0 . (c1)))) (or (not (f (c4) (c3) (c1))) (or (not (f (c4) (c3) v1)) (or (not (f (c4) (c3) v2)) (f (c1) v1 v2)))) NIL)
:: (344 (resolve 343 (1) 60 ()) (or (not (f (c4) (c3) v1)) (or (not (f (c4) (c3) v2)) (f (c1) v1 v2))) NIL)
:: (345 (instantiate 344 ((v1 . v0) (v2 . v1))) (or (not (f (c4) (c3) v0)) (or (not (f (c4) (c3) v1)) (f (c1) v0 v1))) NIL)
:: (346 (instantiate 345 ((v1 . (c4)))) (or (not (f (c4) (c3) v0)) (or (not (f (c4) (c3) (c4))) (f (c1) v0 (c4)))) NIL)
:: (347 (instantiate 34 ((v0 . (c4)) (v1 . (c3)))) (f (c4) (c3) (c4)) NIL)
:: (348 (resolve 346 (2 1) 347 ()) (or (not (f (c4) (c3) v0)) (f (c1) v0 (c4))) NIL)
:: (349 (instantiate 348 ((v0 . (c5)))) (or (not (f (c4) (c3) (c5))) (f (c1) (c5) (c4))) NIL)
:: (350 (resolve 349 (2) 210 ()) (not (f (c4) (c3) (c5))) NIL)
:: (351 (instantiate 8 ((v0 . (c6)) (v1 . (c10)) (v2 . (c2)))) (or (not (f (c6) (c10) (c2))) (f (c10) (c2) (c6))) NIL)
:: (352 (resolve 86 () 351 (1)) (f (c10) (c2) (c6)) NIL)
:: (353 (instantiate 6 ((v0 . (c6)) (v1 . (c10)) (v2 . (c2)))) (or (not (f (c6) (c10) (c2))) (f (c10) (c6) (c2))) NIL)
:: (354 (resolve 86 () 353 (1)) (f (c10) (c6) (c2)) NIL)
:: (355 (instantiate 8 ((v0 . (c4)) (v1 . (c7)) (v2 . (c6)))) (or (not (f (c4) (c7) (c6))) (f (c7) (c6) (c4))) NIL)
:: (356 (resolve 355 (2) 229 ()) (not (f (c4) (c7) (c6))) NIL)
:: (357 (instantiate 7 ((v0 . (c7)) (v1 . (c4)) (v2 . (c6)))) (or (not (f (c7) (c4) (c6))) (f (c7) (c6) (c4))) NIL)
:: (358 (resolve 357 (2) 229 ()) (not (f (c7) (c4) (c6))) NIL)
:: (359 (instantiate 4 ((v0 . (c4)) (v1 . (c6)) (v2 . (c7)))) (or (not (= (c4) (c6))) (f (c7) (c6) (c4))) NIL)
:: (360 (resolve 359 (2) 229 ()) (not (= (c4) (c6))) NIL)
:: (361 (flip 360 ()) (not (= (c6) (c4))) NIL)
:: (362 (resolve 356 () 318 (2 2 2 2 2 2 2 1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c4) (c6)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c4) (c6)) (or (f (c10) (c7) (c2)) (or (f (c10) (c4) (c5)) (or (f (c10) (c7) (c3)) (or (f (c10) (c4) (c3)) (or (f (c10) (c7) (c5)) (f (c7) (c6) (c10)))))))))))))))))))))))) NIL)
:: (363 (resolve 358 () 362 (2 2 2 2 2 2 2 2 2 1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c4) (c6)) (or (f (c10) (c7) (c2)) (or (f (c10) (c4) (c5)) (or (f (c10) (c7) (c3)) (or (f (c10) (c4) (c3)) (or (f (c10) (c7) (c5)) (f (c7) (c6) (c10))))))))))))))))))))))) NIL)
:: (364 (instantiate 5 ((v0 . (c6)) (v1 . (c4)))) (or (= (c6) (c4)) (or (not (f (c4) (c6) v2)) (or (not (f (c4) (c6) v3)) (or (not (f (c4) (c6) v4)) (f v2 v3 v4))))) NIL)
:: (365 (resolve 364 (1) 361 ()) (or (not (f (c4) (c6) v2)) (or (not (f (c4) (c6) v3)) (or (not (f (c4) (c6) v4)) (f v2 v3 v4)))) NIL)
:: (366 (instantiate 365 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c4) (c6) v0)) (or (not (f (c4) (c6) v1)) (or (not (f (c4) (c6) v2)) (f v0 v1 v2)))) NIL)
:: (367 (instantiate 366 ((v1 . (c6)))) (or (not (f (c4) (c6) v0)) (or (not (f (c4) (c6) (c6))) (or (not (f (c4) (c6) v2)) (f v0 (c6) v2)))) NIL)
:: (368 (instantiate 38 ((v0 . (c4)) (v1 . (c6)))) (f (c4) (c6) (c6)) NIL)
:: (369 (resolve 367 (2 1) 368 ()) (or (not (f (c4) (c6) v0)) (or (not (f (c4) (c6) v2)) (f v0 (c6) v2))) NIL)
:: (370 (instantiate 369 ((v2 . v1))) (or (not (f (c4) (c6) v0)) (or (not (f (c4) (c6) v1)) (f v0 (c6) v1))) NIL)
:: (371 (instantiate 370 ((v1 . (c4)))) (or (not (f (c4) (c6) v0)) (or (not (f (c4) (c6) (c4))) (f v0 (c6) (c4)))) NIL)
:: (372 (instantiate 34 ((v0 . (c4)) (v1 . (c6)))) (f (c4) (c6) (c4)) NIL)
:: (373 (resolve 371 (2 1) 372 ()) (or (not (f (c4) (c6) v0)) (f v0 (c6) (c4))) NIL)
:: (374 (instantiate 373 ((v0 . (c7)))) (or (not (f (c4) (c6) (c7))) (f (c7) (c6) (c4))) NIL)
:: (375 (resolve 374 (2) 229 ()) (not (f (c4) (c6) (c7))) NIL)
:: (376 (instantiate 8 ((v0 . (c2)) (v1 . (c7)) (v2 . (c6)))) (or (not (f (c2) (c7) (c6))) (f (c7) (c6) (c2))) NIL)
:: (377 (resolve 376 (2) 241 ()) (not (f (c2) (c7) (c6))) NIL)
:: (378 (instantiate 4 ((v0 . (c2)) (v1 . (c6)) (v2 . (c7)))) (or (not (= (c2) (c6))) (f (c7) (c6) (c2))) NIL)
:: (379 (resolve 378 (2) 241 ()) (not (= (c2) (c6))) NIL)
:: (380 (flip 379 ()) (not (= (c6) (c2))) NIL)
:: (381 (instantiate 8 ((v0 . (c5)) (v1 . (c10)) (v2 . (c3)))) (or (not (f (c5) (c10) (c3))) (f (c10) (c3) (c5))) NIL)
:: (382 (resolve 88 () 381 (1)) (f (c10) (c3) (c5)) NIL)
:: (383 (instantiate 6 ((v0 . (c5)) (v1 . (c10)) (v2 . (c3)))) (or (not (f (c5) (c10) (c3))) (f (c10) (c5) (c3))) NIL)
:: (384 (resolve 88 () 383 (1)) (f (c10) (c5) (c3)) NIL)
:: (385 (instantiate 72 ((v0 . (c7)))) (or (not (f (c1) (c7) (c7))) (or (not (f (c1) (c7) v1)) (f (c7) v1 (c5)))) NIL)
:: (386 (instantiate 38 ((v0 . (c1)) (v1 . (c7)))) (f (c1) (c7) (c7)) NIL)
:: (387 (resolve 385 (1) 386 ()) (or (not (f (c1) (c7) v1)) (f (c7) v1 (c5))) NIL)
:: (388 (instantiate 387 ((v1 . v0))) (or (not (f (c1) (c7) v0)) (f (c7) v0 (c5))) NIL)
:: (389 (instantiate 5 ((v0 . (c4)) (v1 . (c3)))) (or (= (c4) (c3)) (or (not (f (c3) (c4) v2)) (or (not (f (c3) (c4) v3)) (or (not (f (c3) (c4) v4)) (f v2 v3 v4))))) NIL)
:: (390 (resolve 389 (1) 13 ()) (or (not (f (c3) (c4) v2)) (or (not (f (c3) (c4) v3)) (or (not (f (c3) (c4) v4)) (f v2 v3 v4)))) NIL)
:: (391 (instantiate 390 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c3) (c4) v0)) (or (not (f (c3) (c4) v1)) (or (not (f (c3) (c4) v2)) (f v0 v1 v2)))) NIL)
:: (392 (instantiate 391 ((v0 . (c1)))) (or (not (f (c3) (c4) (c1))) (or (not (f (c3) (c4) v1)) (or (not (f (c3) (c4) v2)) (f (c1) v1 v2)))) NIL)
:: (393 (resolve 392 (1) 144 ()) (or (not (f (c3) (c4) v1)) (or (not (f (c3) (c4) v2)) (f (c1) v1 v2))) NIL)
:: (394 (instantiate 393 ((v1 . v0) (v2 . v1))) (or (not (f (c3) (c4) v0)) (or (not (f (c3) (c4) v1)) (f (c1) v0 v1))) NIL)
:: (395 (instantiate 394 ((v1 . (c4)))) (or (not (f (c3) (c4) v0)) (or (not (f (c3) (c4) (c4))) (f (c1) v0 (c4)))) NIL)
:: (396 (instantiate 38 ((v0 . (c3)) (v1 . (c4)))) (f (c3) (c4) (c4)) NIL)
:: (397 (resolve 395 (2 1) 396 ()) (or (not (f (c3) (c4) v0)) (f (c1) v0 (c4))) NIL)
:: (398 (instantiate 397 ((v0 . (c5)))) (or (not (f (c3) (c4) (c5))) (f (c1) (c5) (c4))) NIL)
:: (399 (resolve 398 (2) 210 ()) (not (f (c3) (c4) (c5))) NIL)
:: (400 (instantiate 5 ((v0 . (c1)) (v1 . (c5)))) (or (= (c1) (c5)) (or (not (f (c5) (c1) v2)) (or (not (f (c5) (c1) v3)) (or (not (f (c5) (c1) v4)) (f v2 v3 v4))))) NIL)
:: (401 (flip 14 ()) (not (= (c1) (c5))) NIL)
:: (402 (resolve 400 (1) 401 ()) (or (not (f (c5) (c1) v2)) (or (not (f (c5) (c1) v3)) (or (not (f (c5) (c1) v4)) (f v2 v3 v4)))) NIL)
:: (403 (instantiate 402 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c5) (c1) v0)) (or (not (f (c5) (c1) v1)) (or (not (f (c5) (c1) v2)) (f v0 v1 v2)))) NIL)
:: (404 (instantiate 403 ((v0 . (c1)))) (or (not (f (c5) (c1) (c1))) (or (not (f (c5) (c1) v1)) (or (not (f (c5) (c1) v2)) (f (c1) v1 v2)))) NIL)
:: (405 (instantiate 38 ((v0 . (c5)) (v1 . (c1)))) (f (c5) (c1) (c1)) NIL)
:: (406 (resolve 404 (1) 405 ()) (or (not (f (c5) (c1) v1)) (or (not (f (c5) (c1) v2)) (f (c1) v1 v2))) NIL)
:: (407 (instantiate 406 ((v1 . v0) (v2 . v1))) (or (not (f (c5) (c1) v0)) (or (not (f (c5) (c1) v1)) (f (c1) v0 v1))) NIL)
:: (408 (instantiate 407 ((v1 . (c7)))) (or (not (f (c5) (c1) v0)) (or (not (f (c5) (c1) (c7))) (f (c1) v0 (c7)))) NIL)
:: (409 (resolve 408 (2 1) 173 ()) (or (not (f (c5) (c1) v0)) (f (c1) v0 (c7))) NIL)
:: (410 (instantiate 409 ((v0 . (c3)))) (or (not (f (c5) (c1) (c3))) (f (c1) (c3) (c7))) NIL)
:: (411 (resolve 410 (2) 167 ()) (not (f (c5) (c1) (c3))) NIL)
:: (412 (instantiate 5 ((v0 . (c7)) (v1 . (c5)))) (or (= (c7) (c5)) (or (not (f (c5) (c7) v2)) (or (not (f (c5) (c7) v3)) (or (not (f (c5) (c7) v4)) (f v2 v3 v4))))) NIL)
:: (413 (resolve 412 (1) 17 ()) (or (not (f (c5) (c7) v2)) (or (not (f (c5) (c7) v3)) (or (not (f (c5) (c7) v4)) (f v2 v3 v4)))) NIL)
:: (414 (instantiate 413 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c5) (c7) v0)) (or (not (f (c5) (c7) v1)) (or (not (f (c5) (c7) v2)) (f v0 v1 v2)))) NIL)
:: (415 (instantiate 414 ((v0 . (c7)))) (or (not (f (c5) (c7) (c7))) (or (not (f (c5) (c7) v1)) (or (not (f (c5) (c7) v2)) (f (c7) v1 v2)))) NIL)
:: (416 (instantiate 38 ((v0 . (c5)) (v1 . (c7)))) (f (c5) (c7) (c7)) NIL)
:: (417 (resolve 415 (1) 416 ()) (or (not (f (c5) (c7) v1)) (or (not (f (c5) (c7) v2)) (f (c7) v1 v2))) NIL)
:: (418 (instantiate 417 ((v1 . v0) (v2 . v1))) (or (not (f (c5) (c7) v0)) (or (not (f (c5) (c7) v1)) (f (c7) v0 v1))) NIL)
:: (419 (instantiate 418 ((v0 . (c1)))) (or (not (f (c5) (c7) (c1))) (or (not (f (c5) (c7) v1)) (f (c7) (c1) v1))) NIL)
:: (420 (resolve 419 (1) 175 ()) (or (not (f (c5) (c7) v1)) (f (c7) (c1) v1)) NIL)
:: (421 (instantiate 420 ((v1 . v0))) (or (not (f (c5) (c7) v0)) (f (c7) (c1) v0)) NIL)
:: (422 (instantiate 421 ((v0 . (c3)))) (or (not (f (c5) (c7) (c3))) (f (c7) (c1) (c3))) NIL)
:: (423 (resolve 422 (2) 263 ()) (not (f (c5) (c7) (c3))) NIL)
:: (424 (instantiate 4 ((v0 . (c3)) (v1 . (c5)) (v2 . (c1)))) (or (not (= (c3) (c5))) (f (c1) (c5) (c3))) NIL)
:: (425 (resolve 424 (2) 274 ()) (not (= (c3) (c5))) NIL)
:: (426 (flip 425 ()) (not (= (c5) (c3))) NIL)
:: (427 (instantiate 8 ((v0 . (c3)) (v1 . (c7)) (v2 . (c5)))) (or (not (f (c3) (c7) (c5))) (f (c7) (c5) (c3))) NIL)
:: (428 (resolve 427 (2) 286 ()) (not (f (c3) (c7) (c5))) NIL)
:: (429 (instantiate 5 ((v0 . (c4)) (v1 . (c2)))) (or (= (c4) (c2)) (or (not (f (c2) (c4) v2)) (or (not (f (c2) (c4) v3)) (or (not (f (c2) (c4) v4)) (f v2 v3 v4))))) NIL)
:: (430 (resolve 429 (1) 12 ()) (or (not (f (c2) (c4) v2)) (or (not (f (c2) (c4) v3)) (or (not (f (c2) (c4) v4)) (f v2 v3 v4)))) NIL)
:: (431 (instantiate 430 ((v2 . v0) (v3 . v1) (v4 . v2))) (or (not (f (c2) (c4) v0)) (or (not (f (c2) (c4) v1)) (or (not (f (c2) (c4) v2)) (f v0 v1 v2)))) NIL)
:: (432 (instantiate 431 ((v0 . (c1)))) (or (not (f (c2) (c4) (c1))) (or (not (f (c2) (c4) v1)) (or (not (f (c2) (c4) v2)) (f (c1) v1 v2)))) NIL)
:: (433 (resolve 432 (1) 116 ()) (or (not (f (c2) (c4) v1)) (or (not (f (c2) (c4) v2)) (f (c1) v1 v2))) NIL)
:: (434 (instantiate 433 ((v1 . v0) (v2 . v1))) (or (not (f (c2) (c4) v0)) (or (not (f (c2) (c4) v1)) (f (c1) v0 v1))) NIL)
:: (435 (instantiate 434 ((v1 . (c4)))) (or (not (f (c2) (c4) v0)) (or (not (f (c2) (c4) (c4))) (f (c1) v0 (c4)))) NIL)
:: (436 (instantiate 38 ((v0 . (c2)) (v1 . (c4)))) (f (c2) (c4) (c4)) NIL)
:: (437 (resolve 435 (2 1) 436 ()) (or (not (f (c2) (c4) v0)) (f (c1) v0 (c4))) NIL)
:: (438 (instantiate 437 ((v0 . (c6)))) (or (not (f (c2) (c4) (c6))) (f (c1) (c6) (c4))) NIL)
:: (439 (resolve 438 (2) 297 ()) (not (f (c2) (c4) (c6))) NIL)
:: (440 (instantiate 171 ((v0 . (c3)))) (or (not (f (c1) (c4) (c3))) (f (c1) (c3) (c2))) NIL)
:: (441 (resolve 440 (1) 21 ()) (f (c1) (c3) (c2)) NIL)
:: (442 (instantiate 102 ((v0 . v101) (v1 . v100) (v3 . v101))) (or (= v101 v100) (or (not (f v100 v101 v2)) (or (not (f v100 v101 v101)) (f v2 v100 v101)))) NIL)
:: (443 (instantiate 38 ((v0 . v100) (v1 . v101))) (f v100 v101 v101) NIL)
:: (444 (resolve 442 (2 2 1) 443 ()) (or (= v101 v100) (or (not (f v100 v101 v2)) (f v2 v100 v101))) NIL)
:: (445 (instantiate 444 ((v101 . v0) (v100 . v1))) (or (= v0 v1) (or (not (f v1 v0 v2)) (f v2 v1 v0))) NIL)
:: (446 (instantiate 8 ((v0 . (c1)) (v1 . (c3)) (v2 . (c2)))) (or (not (f (c1) (c3) (c2))) (f (c3) (c2) (c1))) NIL)
:: (447 (resolve 441 () 446 (1)) (f (c3) (c2) (c1)) NIL)
:: (448 (instantiate 98 ((v0 . (c2)) (v1 . (c3)))) (or (= (c2) (c3)) (or (not (f (c3) (c2) v2)) (or (not (f (c3) (c2) v3)) (f v2 v3 (c3))))) NIL)
:: (449 (flip 11 ()) (not (= (c2) (c3))) NIL)
:: (450 (resolve 448 (1) 449 ()) (or (not (f (c3) (c2) v2)) (or (not (f (c3) (c2) v3)) (f v2 v3 (c3)))) NIL)
:: (451 (instantiate 450 ((v2 . v0) (v3 . v1))) (or (not (f (c3) (c2) v0)) (or (not (f (c3) (c2) v1)) (f v0 v1 (c3)))) NIL)
:: (452 (instantiate 451 ((v0 . (c1)))) (or (not (f (c3) (c2) (c1))) (or (not (f (c3) (c2) v1)) (f (c1) v1 (c3)))) NIL)
:: (453 (resolve 452 (1) 447 ()) (or (not (f (c3) (c2) v1)) (f (c1) v1 (c3))) NIL)
:: (454 (instantiate 453 ((v1 . v0))) (or (not (f (c3) (c2) v0)) (f (c1) v0 (c3))) NIL)
:: (455 (instantiate 454 ((v0 . (c6)))) (or (not (f (c3) (c2) (c6))) (f (c1) (c6) (c3))) NIL)
:: (456 (resolve 455 (2) 308 ()) (not (f (c3) (c2) (c6))) NIL)
:: (457 (instantiate 98 ((v0 . (c2)) (v1 . (c3)))) (or (= (c2) (c3)) (or (not (f (c3) (c2) v2)) (or (not (f (c3) (c2) v3)) (f v2 v3 (c3))))) NIL)
:: (458 (flip 11 ()) (not (= (c2) (c3))) NIL)
:: (459 (resolve 457 (1) 458 ()) (or (not (f (c3) (c2) v2)) (or (not (f (c3) (c2) v3)) (f v2 v3 (c3)))) NIL)
:: (460 (instantiate 459 ((v2 . v0) (v3 . v1))) (or (not (f (c3) (c2) v0)) (or (not (f (c3) (c2) v1)) (f v0 v1 (c3)))) NIL)
:: (461 (instantiate 460 ((v0 . (c1)))) (or (not (f (c3) (c2) (c1))) (or (not (f (c3) (c2) v1)) (f (c1) v1 (c3)))) NIL)
:: (462 (resolve 461 (1) 447 ()) (or (not (f (c3) (c2) v1)) (f (c1) v1 (c3))) NIL)
:: (463 (instantiate 462 ((v1 . v0))) (or (not (f (c3) (c2) v0)) (f (c1) v0 (c3))) NIL)
:: (464 (instantiate 463 ((v0 . (c5)))) (or (not (f (c3) (c2) (c5))) (f (c1) (c5) (c3))) NIL)
:: (465 (resolve 464 (2) 274 ()) (not (f (c3) (c2) (c5))) NIL)
:: (466 (instantiate 98 ((v0 . (c4)) (v1 . (c5)))) (or (= (c4) (c5)) (or (not (f (c5) (c4) v2)) (or (not (f (c5) (c4) v3)) (f v2 v3 (c5))))) NIL)
:: (467 (flip 317 ()) (not (= (c4) (c5))) NIL)
:: (468 (resolve 466 (1) 467 ()) (or (not (f (c5) (c4) v2)) (or (not (f (c5) (c4) v3)) (f v2 v3 (c5)))) NIL)
:: (469 (instantiate 468 ((v2 . v0) (v3 . v1))) (or (not (f (c5) (c4) v0)) (or (not (f (c5) (c4) v1)) (f v0 v1 (c5)))) NIL)
:: (470 (instantiate 469 ((v0 . (c4)))) (or (not (f (c5) (c4) (c4))) (or (not (f (c5) (c4) v1)) (f (c4) v1 (c5)))) NIL)
:: (471 (instantiate 38 ((v0 . (c5)) (v1 . (c4)))) (f (c5) (c4) (c4)) NIL)
:: (472 (resolve 470 (1) 471 ()) (or (not (f (c5) (c4) v1)) (f (c4) v1 (c5))) NIL)
:: (473 (instantiate 472 ((v1 . v0))) (or (not (f (c5) (c4) v0)) (f (c4) v0 (c5))) NIL)
:: (474 (instantiate 473 ((v0 . (c3)))) (or (not (f (c5) (c4) (c3))) (f (c4) (c3) (c5))) NIL)
:: (475 (resolve 474 (2) 350 ()) (not (f (c5) (c4) (c3))) NIL)
:: (476 (instantiate 114 ((v0 . (c5)) (v1 . (c10)) (v3 . (c3)))) (or (= (c5) (c10)) (or (not (f (c10) (c5) v2)) (or (not (f (c10) (c5) (c3))) (f (c5) v2 (c3))))) NIL)
:: (477 (resolve 476 (2 2 1) 384 ()) (or (= (c5) (c10)) (or (not (f (c10) (c5) v2)) (f (c5) v2 (c3)))) NIL)
:: (478 (instantiate 477 ((v2 . v0))) (or (= (c5) (c10)) (or (not (f (c10) (c5) v0)) (f (c5) v0 (c3)))) NIL)
:: (479 (flip 478 (1)) (or (= (c10) (c5)) (or (not (f (c10) (c5) v0)) (f (c5) v0 (c3)))) NIL)
:: (480 (instantiate 114 ((v0 . (c3)) (v1 . (c10)) (v3 . (c5)))) (or (= (c3) (c10)) (or (not (f (c10) (c3) v2)) (or (not (f (c10) (c3) (c5))) (f (c3) v2 (c5))))) NIL)
:: (481 (resolve 480 (2 2 1) 382 ()) (or (= (c3) (c10)) (or (not (f (c10) (c3) v2)) (f (c3) v2 (c5)))) NIL)
:: (482 (instantiate 481 ((v2 . v0))) (or (= (c3) (c10)) (or (not (f (c10) (c3) v0)) (f (c3) v0 (c5)))) NIL)
:: (483 (flip 482 (1)) (or (= (c10) (c3)) (or (not (f (c10) (c3) v0)) (f (c3) v0 (c5)))) NIL)
:: (484 (instantiate 114 ((v0 . (c6)) (v1 . (c10)) (v3 . (c2)))) (or (= (c6) (c10)) (or (not (f (c10) (c6) v2)) (or (not (f (c10) (c6) (c2))) (f (c6) v2 (c2))))) NIL)
:: (485 (resolve 484 (2 2 1) 354 ()) (or (= (c6) (c10)) (or (not (f (c10) (c6) v2)) (f (c6) v2 (c2)))) NIL)
:: (486 (instantiate 485 ((v2 . v0))) (or (= (c6) (c10)) (or (not (f (c10) (c6) v0)) (f (c6) v0 (c2)))) NIL)
:: (487 (flip 486 (1)) (or (= (c10) (c6)) (or (not (f (c10) (c6) v0)) (f (c6) v0 (c2)))) NIL)
:: (488 (instantiate 114 ((v0 . (c2)) (v1 . (c10)) (v3 . (c6)))) (or (= (c2) (c10)) (or (not (f (c10) (c2) v2)) (or (not (f (c10) (c2) (c6))) (f (c2) v2 (c6))))) NIL)
:: (489 (resolve 488 (2 2 1) 352 ()) (or (= (c2) (c10)) (or (not (f (c10) (c2) v2)) (f (c2) v2 (c6)))) NIL)
:: (490 (instantiate 489 ((v2 . v0))) (or (= (c2) (c10)) (or (not (f (c10) (c2) v0)) (f (c2) v0 (c6)))) NIL)
:: (491 (flip 490 (1)) (or (= (c10) (c2)) (or (not (f (c10) (c2) v0)) (f (c2) v0 (c6)))) NIL)
:: (492 (instantiate 114 ((v0 . (c7)) (v1 . (c9)) (v3 . (c3)))) (or (= (c7) (c9)) (or (not (f (c9) (c7) v2)) (or (not (f (c9) (c7) (c3))) (f (c7) v2 (c3))))) NIL)
:: (493 (resolve 492 (2 2 1) 322 ()) (or (= (c7) (c9)) (or (not (f (c9) (c7) v2)) (f (c7) v2 (c3)))) NIL)
:: (494 (instantiate 493 ((v2 . v0))) (or (= (c7) (c9)) (or (not (f (c9) (c7) v0)) (f (c7) v0 (c3)))) NIL)
:: (495 (flip 494 (1)) (or (= (c9) (c7)) (or (not (f (c9) (c7) v0)) (f (c7) v0 (c3)))) NIL)
:: (496 (instantiate 114 ((v0 . (c4)) (v1 . (c9)) (v3 . (c6)))) (or (= (c4) (c9)) (or (not (f (c9) (c4) v2)) (or (not (f (c9) (c4) (c6))) (f (c4) v2 (c6))))) NIL)
:: (497 (resolve 496 (2 2 1) 320 ()) (or (= (c4) (c9)) (or (not (f (c9) (c4) v2)) (f (c4) v2 (c6)))) NIL)
:: (498 (instantiate 497 ((v2 . v0))) (or (= (c4) (c9)) (or (not (f (c9) (c4) v0)) (f (c4) v0 (c6)))) NIL)
:: (499 (flip 498 (1)) (or (= (c9) (c4)) (or (not (f (c9) (c4) v0)) (f (c4) v0 (c6)))) NIL)
:: (500 (instantiate 114 ((v0 . (c4)) (v1 . (c8)) (v3 . (c5)))) (or (= (c4) (c8)) (or (not (f (c8) (c4) v2)) (or (not (f (c8) (c4) (c5))) (f (c4) v2 (c5))))) NIL)
:: (501 (resolve 500 (2 2 1) 310 ()) (or (= (c4) (c8)) (or (not (f (c8) (c4) v2)) (f (c4) v2 (c5)))) NIL)
:: (502 (instantiate 501 ((v2 . v0))) (or (= (c4) (c8)) (or (not (f (c8) (c4) v0)) (f (c4) v0 (c5)))) NIL)
:: (503 (flip 502 (1)) (or (= (c8) (c4)) (or (not (f (c8) (c4) v0)) (f (c4) v0 (c5)))) NIL)
:: (504 (instantiate 388 ((v0 . (c6)))) (or (not (f (c1) (c7) (c6))) (f (c7) (c6) (c5))) NIL)
:: (505 (resolve 504 (1) 23 ()) (f (c7) (c6) (c5)) NIL)
:: (506 (instantiate 8 ((v0 . (c7)) (v1 . (c6)) (v2 . (c5)))) (or (not (f (c7) (c6) (c5))) (f (c6) (c5) (c7))) NIL)
:: (507 (resolve 505 () 506 (1)) (f (c6) (c5) (c7)) NIL)
:: (508 (instantiate 114 ((v0 . (c5)) (v1 . (c6)))) (or (= (c5) (c6)) (or (not (f (c6) (c5) v2)) (or (not (f (c6) (c5) v3)) (f (c5) v2 v3)))) NIL)
:: (509 (flip 16 ()) (not (= (c5) (c6))) NIL)
:: (510 (resolve 508 (1) 509 ()) (or (not (f (c6) (c5) v2)) (or (not (f (c6) (c5) v3)) (f (c5) v2 v3))) NIL)
:: (511 (instantiate 510 ((v2 . v0) (v3 . v1))) (or (not (f (c6) (c5) v0)) (or (not (f (c6) (c5) v1)) (f (c5) v0 v1))) NIL)
:: (512 (instantiate 511 ((v1 . (c7)))) (or (not (f (c6) (c5) v0)) (or (not (f (c6) (c5) (c7))) (f (c5) v0 (c7)))) NIL)
:: (513 (resolve 512 (2 1) 507 ()) (or (not (f (c6) (c5) v0)) (f (c5) v0 (c7))) NIL)
:: (514 (instantiate 513 ((v0 . (c2)))) (or (not (f (c6) (c5) (c2))) (f (c5) (c2) (c7))) NIL)
:: (515 (resolve 514 (2) 338 ()) (not (f (c6) (c5) (c2))) NIL)
:: (516 (instantiate 114 ((v0 . (c5)) (v1 . (c6)))) (or (= (c5) (c6)) (or (not (f (c6) (c5) v2)) (or (not (f (c6) (c5) v3)) (f (c5) v2 v3)))) NIL)
:: (517 (flip 16 ()) (not (= (c5) (c6))) NIL)
:: (518 (resolve 516 (1) 517 ()) (or (not (f (c6) (c5) v2)) (or (not (f (c6) (c5) v3)) (f (c5) v2 v3))) NIL)
:: (519 (instantiate 518 ((v2 . v0) (v3 . v1))) (or (not (f (c6) (c5) v0)) (or (not (f (c6) (c5) v1)) (f (c5) v0 v1))) NIL)
:: (520 (instantiate 519 ((v0 . (c7)))) (or (not (f (c6) (c5) (c7))) (or (not (f (c6) (c5) v1)) (f (c5) (c7) v1))) NIL)
:: (521 (resolve 520 (1) 507 ()) (or (not (f (c6) (c5) v1)) (f (c5) (c7) v1)) NIL)
:: (522 (instantiate 521 ((v1 . v0))) (or (not (f (c6) (c5) v0)) (f (c5) (c7) v0)) NIL)
:: (523 (instantiate 522 ((v0 . (c3)))) (or (not (f (c6) (c5) (c3))) (f (c5) (c7) (c3))) NIL)
:: (524 (resolve 523 (2) 423 ()) (not (f (c6) (c5) (c3))) NIL)
:: (525 (instantiate 110 ((v0 . (c4)) (v1 . (c6)))) (or (= (c4) (c6)) (or (not (f (c6) (c4) v2)) (or (not (f (c6) (c4) v3)) (f v2 (c4) v3)))) NIL)
:: (526 (flip 361 ()) (not (= (c4) (c6))) NIL)
:: (527 (resolve 525 (1) 526 ()) (or (not (f (c6) (c4) v2)) (or (not (f (c6) (c4) v3)) (f v2 (c4) v3))) NIL)
:: (528 (instantiate 527 ((v2 . v0) (v3 . v1))) (or (not (f (c6) (c4) v0)) (or (not (f (c6) (c4) v1)) (f v0 (c4) v1))) NIL)
:: (529 (instantiate 528 ((v1 . (c6)))) (or (not (f (c6) (c4) v0)) (or (not (f (c6) (c4) (c6))) (f v0 (c4) (c6)))) NIL)
:: (530 (instantiate 34 ((v0 . (c6)) (v1 . (c4)))) (f (c6) (c4) (c6)) NIL)
:: (531 (resolve 529 (2 1) 530 ()) (or (not (f (c6) (c4) v0)) (f v0 (c4) (c6))) NIL)
:: (532 (instantiate 531 ((v0 . (c2)))) (or (not (f (c6) (c4) (c2))) (f (c2) (c4) (c6))) NIL)
:: (533 (resolve 532 (2) 439 ()) (not (f (c6) (c4) (c2))) NIL)
:: (534 (instantiate 106 ((v0 . (c6)) (v1 . (c2)))) (or (= (c6) (c2)) (or (not (f (c2) (c6) v2)) (or (not (f (c2) (c6) v3)) (f v2 v3 (c6))))) NIL)
:: (535 (resolve 534 (1) 380 ()) (or (not (f (c2) (c6) v2)) (or (not (f (c2) (c6) v3)) (f v2 v3 (c6)))) NIL)
:: (536 (instantiate 535 ((v2 . v0) (v3 . v1))) (or (not (f (c2) (c6) v0)) (or (not (f (c2) (c6) v1)) (f v0 v1 (c6)))) NIL)
:: (537 (instantiate 536 ((v1 . (c2)))) (or (not (f (c2) (c6) v0)) (or (not (f (c2) (c6) (c2))) (f v0 (c2) (c6)))) NIL)
:: (538 (instantiate 34 ((v0 . (c2)) (v1 . (c6)))) (f (c2) (c6) (c2)) NIL)
:: (539 (resolve 537 (2 1) 538 ()) (or (not (f (c2) (c6) v0)) (f v0 (c2) (c6))) NIL)
:: (540 (instantiate 539 ((v0 . (c3)))) (or (not (f (c2) (c6) (c3))) (f (c3) (c2) (c6))) NIL)
:: (541 (resolve 540 (2) 456 ()) (not (f (c2) (c6) (c3))) NIL)
:: (542 (instantiate 106 ((v0 . (c5)) (v1 . (c3)))) (or (= (c5) (c3)) (or (not (f (c3) (c5) v2)) (or (not (f (c3) (c5) v3)) (f v2 v3 (c5))))) NIL)
:: (543 (resolve 542 (1) 426 ()) (or (not (f (c3) (c5) v2)) (or (not (f (c3) (c5) v3)) (f v2 v3 (c5)))) NIL)
:: (544 (instantiate 543 ((v2 . v0) (v3 . v1))) (or (not (f (c3) (c5) v0)) (or (not (f (c3) (c5) v1)) (f v0 v1 (c5)))) NIL)
:: (545 (instantiate 544 ((v0 . (c3)))) (or (not (f (c3) (c5) (c3))) (or (not (f (c3) (c5) v1)) (f (c3) v1 (c5)))) NIL)
:: (546 (instantiate 34 ((v0 . (c3)) (v1 . (c5)))) (f (c3) (c5) (c3)) NIL)
:: (547 (resolve 545 (1) 546 ()) (or (not (f (c3) (c5) v1)) (f (c3) v1 (c5))) NIL)
:: (548 (instantiate 547 ((v1 . v0))) (or (not (f (c3) (c5) v0)) (f (c3) v0 (c5))) NIL)
:: (549 (instantiate 548 ((v0 . (c2)))) (or (not (f (c3) (c5) (c2))) (f (c3) (c2) (c5))) NIL)
:: (550 (resolve 549 (2) 465 ()) (not (f (c3) (c5) (c2))) NIL)
:: (551 (instantiate 114 ((v0 . (c6)) (v1 . (c2)))) (or (= (c6) (c2)) (or (not (f (c2) (c6) v2)) (or (not (f (c2) (c6) v3)) (f (c6) v2 v3)))) NIL)
:: (552 (resolve 551 (1) 380 ()) (or (not (f (c2) (c6) v2)) (or (not (f (c2) (c6) v3)) (f (c6) v2 v3))) NIL)
:: (553 (instantiate 552 ((v2 . v0) (v3 . v1))) (or (not (f (c2) (c6) v0)) (or (not (f (c2) (c6) v1)) (f (c6) v0 v1))) NIL)
:: (554 (instantiate 553 ((v1 . (c2)))) (or (not (f (c2) (c6) v0)) (or (not (f (c2) (c6) (c2))) (f (c6) v0 (c2)))) NIL)
:: (555 (instantiate 34 ((v0 . (c2)) (v1 . (c6)))) (f (c2) (c6) (c2)) NIL)
:: (556 (resolve 554 (2 1) 555 ()) (or (not (f (c2) (c6) v0)) (f (c6) v0 (c2))) NIL)
:: (557 (instantiate 556 ((v0 . (c5)))) (or (not (f (c2) (c6) (c5))) (f (c6) (c5) (c2))) NIL)
:: (558 (resolve 557 (2) 515 ()) (not (f (c2) (c6) (c5))) NIL)
:: (559 (instantiate 110 ((v0 . (c5)) (v1 . (c3)))) (or (= (c5) (c3)) (or (not (f (c3) (c5) v2)) (or (not (f (c3) (c5) v3)) (f v2 (c5) v3)))) NIL)
:: (560 (resolve 559 (1) 426 ()) (or (not (f (c3) (c5) v2)) (or (not (f (c3) (c5) v3)) (f v2 (c5) v3))) NIL)
:: (561 (instantiate 560 ((v2 . v0) (v3 . v1))) (or (not (f (c3) (c5) v0)) (or (not (f (c3) (c5) v1)) (f v0 (c5) v1))) NIL)
:: (562 (instantiate 561 ((v1 . (c3)))) (or (not (f (c3) (c5) v0)) (or (not (f (c3) (c5) (c3))) (f v0 (c5) (c3)))) NIL)
:: (563 (instantiate 34 ((v0 . (c3)) (v1 . (c5)))) (f (c3) (c5) (c3)) NIL)
:: (564 (resolve 562 (2 1) 563 ()) (or (not (f (c3) (c5) v0)) (f v0 (c5) (c3))) NIL)
:: (565 (instantiate 564 ((v0 . (c6)))) (or (not (f (c3) (c5) (c6))) (f (c6) (c5) (c3))) NIL)
:: (566 (resolve 565 (2) 524 ()) (not (f (c3) (c5) (c6))) NIL)
:: (567 (instantiate 217 ((v1 . (c5)))) (or (not (f (c7) (c6) v0)) (or (not (f (c7) (c6) (c5))) (f (c1) v0 (c5)))) NIL)
:: (568 (resolve 567 (2 1) 505 ()) (or (not (f (c7) (c6) v0)) (f (c1) v0 (c5))) NIL)
:: (569 (instantiate 6 ((v0 . (c10)) (v1 . (c7)) (v2 . (c5)))) (or (not (f (c10) (c7) (c5))) (f (c7) (c10) (c5))) NIL)
:: (570 (resolve 363 (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1) 569 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c4) (c6)) (or (f (c10) (c7) (c2)) (or (f (c10) (c4) (c5)) (or (f (c10) (c7) (c3)) (or (f (c10) (c4) (c3)) (or (f (c7) (c6) (c10)) (f (c7) (c10) (c5))))))))))))))))))))))) NIL)
:: (571 (propositional 570) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c4) (c6)) (or (f (c10) (c7) (c2)) (or (f (c10) (c4) (c5)) (or (f (c10) (c7) (c3)) (or (f (c10) (c4) (c3)) (f (c7) (c6) (c10)))))))))))))))))))))) NIL)
:: (572 (instantiate 6 ((v0 . (c10)) (v1 . (c7)) (v2 . (c3)))) (or (not (f (c10) (c7) (c3))) (f (c7) (c10) (c3))) NIL)
:: (573 (resolve 571 (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1) 572 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c4) (c6)) (or (f (c10) (c7) (c2)) (or (f (c10) (c4) (c5)) (or (f (c10) (c4) (c3)) (or (f (c7) (c6) (c10)) (f (c7) (c10) (c3)))))))))))))))))))))) NIL)
:: (574 (propositional 573) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c4) (c6)) (or (f (c10) (c7) (c2)) (or (f (c10) (c4) (c5)) (or (f (c10) (c4) (c3)) (f (c7) (c6) (c10))))))))))))))))))))) NIL)
:: (575 (instantiate 6 ((v0 . (c10)) (v1 . (c7)) (v2 . (c2)))) (or (not (f (c10) (c7) (c2))) (f (c7) (c10) (c2))) NIL)
:: (576 (resolve 574 (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1) 575 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c4) (c6)) (or (f (c10) (c4) (c5)) (or (f (c10) (c4) (c3)) (or (f (c7) (c6) (c10)) (f (c7) (c10) (c2))))))))))))))))))))) NIL)
:: (577 (propositional 576) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c4) (c6)) (or (f (c10) (c4) (c5)) (or (f (c10) (c4) (c3)) (f (c7) (c6) (c10)))))))))))))))))))) NIL)
:: (578 (instantiate 6 ((v0 . (c10)) (v1 . (c4)) (v2 . (c6)))) (or (not (f (c10) (c4) (c6))) (f (c4) (c10) (c6))) NIL)
:: (579 (resolve 577 (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1) 578 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c4) (c5)) (or (f (c10) (c4) (c3)) (or (f (c7) (c6) (c10)) (f (c4) (c10) (c6)))))))))))))))))))) NIL)
:: (580 (propositional 579) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c4) (c5)) (or (f (c10) (c4) (c3)) (f (c7) (c6) (c10))))))))))))))))))) NIL)
:: (581 (instantiate 6 ((v0 . (c10)) (v1 . (c4)) (v2 . (c5)))) (or (not (f (c10) (c4) (c5))) (f (c4) (c10) (c5))) NIL)
:: (582 (resolve 580 (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1) 581 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c4) (c3)) (or (f (c7) (c6) (c10)) (f (c4) (c10) (c5))))))))))))))))))) NIL)
:: (583 (propositional 582) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c10) (c4) (c3)) (f (c7) (c6) (c10)))))))))))))))))) NIL)
:: (584 (instantiate 6 ((v0 . (c10)) (v1 . (c4)) (v2 . (c3)))) (or (not (f (c10) (c4) (c3))) (f (c4) (c10) (c3))) NIL)
:: (585 (resolve 583 (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1) 584 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (or (f (c7) (c6) (c10)) (f (c4) (c10) (c3)))))))))))))))))) NIL)
:: (586 (propositional 585) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c10) (c4) (c2)) (f (c7) (c6) (c10))))))))))))))))) NIL)
:: (587 (instantiate 6 ((v0 . (c10)) (v1 . (c4)) (v2 . (c2)))) (or (not (f (c10) (c4) (c2))) (f (c4) (c10) (c2))) NIL)
:: (588 (resolve 586 (2 2 2 2 2 2 2 2 2 2 2 2 2 2 1) 587 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c7) (c6) (c10)) (f (c4) (c10) (c2))))))))))))))))) NIL)
:: (589 (propositional 588) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (f (c7) (c6) (c10)))))))))))))))) NIL)
:: (590 (instantiate 8 ((v0 . (c7)) (v1 . (c10)) (v2 . (c9)))) (or (not (f (c7) (c10) (c9))) (f (c10) (c9) (c7))) NIL)
:: (591 (resolve 589 (2 2 2 2 2 2 2 2 2 1) 590 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c7) (c6) (c10)) (f (c10) (c9) (c7)))))))))))))))) NIL)
:: (592 (instantiate 8 ((v0 . (c10)) (v1 . (c9)) (v2 . (c7)))) (or (not (f (c10) (c9) (c7))) (f (c9) (c7) (c10))) NIL)
:: (593 (resolve 591 (2 2 2 2 2 2 2 2 2 2 2 2 2 2) 592 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c7) (c6) (c10)) (f (c9) (c7) (c10)))))))))))))))) NIL)
:: (594 (instantiate 495 ((v0 . (c10)))) (or (= (c9) (c7)) (or (not (f (c9) (c7) (c10))) (f (c7) (c10) (c3)))) NIL)
:: (595 (resolve 593 (2 2 2 2 2 2 2 2 2 2 2 2 2 2) 594 (2 1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c7) (c6) (c10)) (or (= (c9) (c7)) (f (c7) (c10) (c3))))))))))))))))) NIL)
:: (596 (propositional 595) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c5)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c7) (c6) (c10)) (= (c9) (c7)))))))))))))))) NIL)
:: (597 (instantiate 8 ((v0 . (c7)) (v1 . (c10)) (v2 . (c5)))) (or (not (f (c7) (c10) (c5))) (f (c10) (c5) (c7))) NIL)
:: (598 (resolve 596 (2 2 2 2 2 2 2 2 1) 597 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c7) (c6) (c10)) (or (= (c9) (c7)) (f (c10) (c5) (c7)))))))))))))))) NIL)
:: (599 (instantiate 479 ((v0 . (c7)))) (or (= (c10) (c5)) (or (not (f (c10) (c5) (c7))) (f (c5) (c7) (c3)))) NIL)
:: (600 (resolve 598 (2 2 2 2 2 2 2 2 2 2 2 2 2 2) 599 (2 1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c7) (c6) (c10)) (or (= (c9) (c7)) (or (= (c10) (c5)) (f (c5) (c7) (c3))))))))))))))))) NIL)
:: (601 (resolve 423 () 600 (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c10) (c3)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c7) (c6) (c10)) (or (= (c9) (c7)) (= (c10) (c5)))))))))))))))) NIL)
:: (602 (instantiate 8 ((v0 . (c7)) (v1 . (c10)) (v2 . (c3)))) (or (not (f (c7) (c10) (c3))) (f (c10) (c3) (c7))) NIL)
:: (603 (resolve 601 (2 2 2 2 2 2 2 2 1) 602 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c7) (c6) (c10)) (or (= (c9) (c7)) (or (= (c10) (c5)) (f (c10) (c3) (c7)))))))))))))))) NIL)
:: (604 (instantiate 483 ((v0 . (c7)))) (or (= (c10) (c3)) (or (not (f (c10) (c3) (c7))) (f (c3) (c7) (c5)))) NIL)
:: (605 (resolve 603 (2 2 2 2 2 2 2 2 2 2 2 2 2 2) 604 (2 1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c7) (c6) (c10)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (f (c3) (c7) (c5))))))))))))))))) NIL)
:: (606 (resolve 428 () 605 (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c4) (c9)) (or (f (c7) (c10) (c2)) (or (f (c7) (c4) (c8)) (or (f (c7) (c6) (c10)) (or (= (c9) (c7)) (or (= (c10) (c5)) (= (c10) (c3)))))))))))))))) NIL)
:: (607 (instantiate 8 ((v0 . (c7)) (v1 . (c10)) (v2 . (c2)))) (or (not (f (c7) (c10) (c2))) (f (c10) (c2) (c7))) NIL)
:: (608 (resolve 606 (2 2 2 2 2 2 2 2 2 1) 607 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c4) (c9)) (or (f (c7) (c4) (c8)) (or (f (c7) (c6) (c10)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (f (c10) (c2) (c7)))))))))))))))) NIL)
:: (609 (instantiate 491 ((v0 . (c7)))) (or (= (c10) (c2)) (or (not (f (c10) (c2) (c7))) (f (c2) (c7) (c6)))) NIL)
:: (610 (resolve 608 (2 2 2 2 2 2 2 2 2 2 2 2 2 2) 609 (2 1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c4) (c9)) (or (f (c7) (c4) (c8)) (or (f (c7) (c6) (c10)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (f (c2) (c7) (c6))))))))))))))))) NIL)
:: (611 (resolve 377 () 610 (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c4) (c9)) (or (f (c7) (c4) (c8)) (or (f (c7) (c6) (c10)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (= (c10) (c2)))))))))))))))) NIL)
:: (612 (instantiate 568 ((v0 . (c10)))) (or (not (f (c7) (c6) (c10))) (f (c1) (c10) (c5))) NIL)
:: (613 (resolve 611 (2 2 2 2 2 2 2 2 2 2 1) 612 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c4) (c9)) (or (f (c7) (c4) (c8)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (f (c1) (c10) (c5)))))))))))))))) NIL)
:: (614 (instantiate 6 ((v0 . (c7)) (v1 . (c4)) (v2 . (c9)))) (or (not (f (c7) (c4) (c9))) (f (c4) (c7) (c9))) NIL)
:: (615 (resolve 613 (2 2 2 2 2 2 2 2 1) 614 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c4) (c8)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (f (c4) (c7) (c9)))))))))))))))) NIL)
:: (616 (propositional 615) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (f (c7) (c4) (c8)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (f (c1) (c10) (c5))))))))))))))) NIL)
:: (617 (instantiate 6 ((v0 . (c7)) (v1 . (c4)) (v2 . (c8)))) (or (not (f (c7) (c4) (c8))) (f (c4) (c7) (c8))) NIL)
:: (618 (resolve 616 (2 2 2 2 2 2 2 2 1) 617 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (f (c4) (c7) (c8))))))))))))))) NIL)
:: (619 (propositional 618) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (f (c4) (c10) (c9)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (f (c1) (c10) (c5)))))))))))))) NIL)
:: (620 (instantiate 8 ((v0 . (c4)) (v1 . (c10)) (v2 . (c9)))) (or (not (f (c4) (c10) (c9))) (f (c10) (c9) (c4))) NIL)
:: (621 (resolve 619 (2 2 2 2 2 2 2 1) 620 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (f (c10) (c9) (c4)))))))))))))) NIL)
:: (622 (instantiate 8 ((v0 . (c10)) (v1 . (c9)) (v2 . (c4)))) (or (not (f (c10) (c9) (c4))) (f (c9) (c4) (c10))) NIL)
:: (623 (resolve 621 (2 2 2 2 2 2 2 2 2 2 2 2) 622 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (f (c9) (c4) (c10)))))))))))))) NIL)
:: (624 (instantiate 499 ((v0 . (c10)))) (or (= (c9) (c4)) (or (not (f (c9) (c4) (c10))) (f (c4) (c10) (c6)))) NIL)
:: (625 (resolve 623 (2 2 2 2 2 2 2 2 2 2 2 2) 624 (2 1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (f (c4) (c10) (c6))))))))))))))) NIL)
:: (626 (propositional 625) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c10) (c8)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (= (c9) (c4)))))))))))))) NIL)
:: (627 (instantiate 8 ((v0 . (c4)) (v1 . (c10)) (v2 . (c8)))) (or (not (f (c4) (c10) (c8))) (f (c10) (c8) (c4))) NIL)
:: (628 (resolve 626 (2 2 1) 627 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (f (c10) (c8) (c4)))))))))))))) NIL)
:: (629 (instantiate 8 ((v0 . (c10)) (v1 . (c8)) (v2 . (c4)))) (or (not (f (c10) (c8) (c4))) (f (c8) (c4) (c10))) NIL)
:: (630 (resolve 628 (2 2 2 2 2 2 2 2 2 2 2 2) 629 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (f (c8) (c4) (c10)))))))))))))) NIL)
:: (631 (instantiate 503 ((v0 . (c10)))) (or (= (c8) (c4)) (or (not (f (c8) (c4) (c10))) (f (c4) (c10) (c5)))) NIL)
:: (632 (resolve 630 (2 2 2 2 2 2 2 2 2 2 2 2) 631 (2 1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (f (c4) (c10) (c5))))))))))))))) NIL)
:: (633 (propositional 632) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (f (c4) (c10) (c6)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (= (c8) (c4)))))))))))))) NIL)
:: (634 (instantiate 8 ((v0 . (c4)) (v1 . (c10)) (v2 . (c6)))) (or (not (f (c4) (c10) (c6))) (f (c10) (c6) (c4))) NIL)
:: (635 (resolve 633 (2 2 2 2 2 1) 634 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (f (c10) (c6) (c4)))))))))))))) NIL)
:: (636 (instantiate 487 ((v0 . (c4)))) (or (= (c10) (c6)) (or (not (f (c10) (c6) (c4))) (f (c6) (c4) (c2)))) NIL)
:: (637 (resolve 635 (2 2 2 2 2 2 2 2 2 2 2 2) 636 (2 1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (f (c6) (c4) (c2))))))))))))))) NIL)
:: (638 (resolve 533 () 637 (2 2 2 2 2 2 2 2 2 2 2 2 2)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c8)) (or (f (c4) (c10) (c5)) (or (f (c4) (c7) (c9)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (= (c10) (c6)))))))))))))) NIL)
:: (639 (instantiate 8 ((v0 . (c4)) (v1 . (c10)) (v2 . (c5)))) (or (not (f (c4) (c10) (c5))) (f (c10) (c5) (c4))) NIL)
:: (640 (resolve 638 (2 2 2 1) 639 (1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c8)) (or (f (c4) (c7) (c9)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (f (c10) (c5) (c4)))))))))))))) NIL)
:: (641 (instantiate 479 ((v0 . (c4)))) (or (= (c10) (c5)) (or (not (f (c10) (c5) (c4))) (f (c5) (c4) (c3)))) NIL)
:: (642 (resolve 640 (2 2 2 2 2 2 2 2 2 2 2 2) 641 (2 1)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c8)) (or (f (c4) (c7) (c9)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (or (= (c10) (c5)) (f (c5) (c4) (c3))))))))))))))) NIL)
:: (643 (propositional 642) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c8)) (or (f (c4) (c7) (c9)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (f (c5) (c4) (c3)))))))))))))) NIL)
:: (644 (resolve 475 () 643 (2 2 2 2 2 2 2 2 2 2 2 2)) (or (f (c4) (c10) (c3)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c8)) (or (f (c4) (c7) (c9)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (= (c10) (c6))))))))))))) NIL)
:: (645 (instantiate 8 ((v0 . (c4)) (v1 . (c10)) (v2 . (c3)))) (or (not (f (c4) (c10) (c3))) (f (c10) (c3) (c4))) NIL)
:: (646 (resolve 644 (1) 645 (1)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c8)) (or (f (c4) (c7) (c9)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (f (c10) (c3) (c4))))))))))))) NIL)
:: (647 (instantiate 483 ((v0 . (c4)))) (or (= (c10) (c3)) (or (not (f (c10) (c3) (c4))) (f (c3) (c4) (c5)))) NIL)
:: (648 (resolve 646 (2 2 2 2 2 2 2 2 2 2 2) 647 (2 1)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c8)) (or (f (c4) (c7) (c9)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (or (= (c10) (c3)) (f (c3) (c4) (c5)))))))))))))) NIL)
:: (649 (propositional 648) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c8)) (or (f (c4) (c7) (c9)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (f (c3) (c4) (c5))))))))))))) NIL)
:: (650 (resolve 399 () 649 (2 2 2 2 2 2 2 2 2 2 2)) (or (f (c4) (c10) (c2)) (or (f (c4) (c7) (c8)) (or (f (c4) (c7) (c9)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (= (c10) (c6)))))))))))) NIL)
:: (651 (instantiate 8 ((v0 . (c4)) (v1 . (c10)) (v2 . (c2)))) (or (not (f (c4) (c10) (c2))) (f (c10) (c2) (c4))) NIL)
:: (652 (resolve 650 (1) 651 (1)) (or (f (c4) (c7) (c8)) (or (f (c4) (c7) (c9)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (f (c10) (c2) (c4)))))))))))) NIL)
:: (653 (instantiate 491 ((v0 . (c4)))) (or (= (c10) (c2)) (or (not (f (c10) (c2) (c4))) (f (c2) (c4) (c6)))) NIL)
:: (654 (resolve 652 (2 2 2 2 2 2 2 2 2 2) 653 (2 1)) (or (f (c4) (c7) (c8)) (or (f (c4) (c7) (c9)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (or (= (c10) (c2)) (f (c2) (c4) (c6))))))))))))) NIL)
:: (655 (propositional 654) (or (f (c4) (c7) (c8)) (or (f (c4) (c7) (c9)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (f (c2) (c4) (c6)))))))))))) NIL)
:: (656 (resolve 439 () 655 (2 2 2 2 2 2 2 2 2 2)) (or (f (c4) (c7) (c8)) (or (f (c4) (c7) (c9)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (= (c10) (c6))))))))))) NIL)
:: (657 (instantiate 445 ((v0 . (c7)) (v1 . (c4)) (v2 . (c9)))) (or (= (c7) (c4)) (or (not (f (c4) (c7) (c9))) (f (c9) (c4) (c7)))) NIL)
:: (658 (resolve 656 (2 1) 657 (2 1)) (or (f (c4) (c7) (c8)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (or (= (c7) (c4)) (f (c9) (c4) (c7)))))))))))) NIL)
:: (659 (resolve 44 () 658 (2 2 2 2 2 2 2 2 2 1)) (or (f (c4) (c7) (c8)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (f (c9) (c4) (c7))))))))))) NIL)
:: (660 (instantiate 499 ((v0 . (c7)))) (or (= (c9) (c4)) (or (not (f (c9) (c4) (c7))) (f (c4) (c7) (c6)))) NIL)
:: (661 (resolve 659 (2 2 2 2 2 2 2 2 2) 660 (2 1)) (or (f (c4) (c7) (c8)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (or (= (c9) (c4)) (f (c4) (c7) (c6)))))))))))) NIL)
:: (662 (propositional 661) (or (f (c4) (c7) (c8)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (f (c4) (c7) (c6))))))))))) NIL)
:: (663 (resolve 356 () 662 (2 2 2 2 2 2 2 2 2)) (or (f (c4) (c7) (c8)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (= (c10) (c6)))))))))) NIL)
:: (664 (instantiate 445 ((v0 . (c7)) (v1 . (c4)) (v2 . (c8)))) (or (= (c7) (c4)) (or (not (f (c4) (c7) (c8))) (f (c8) (c4) (c7)))) NIL)
:: (665 (resolve 663 (1) 664 (2 1)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (or (= (c7) (c4)) (f (c8) (c4) (c7))))))))))) NIL)
:: (666 (resolve 44 () 665 (2 2 2 2 2 2 2 2 1)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (f (c8) (c4) (c7)))))))))) NIL)
:: (667 (instantiate 503 ((v0 . (c7)))) (or (= (c8) (c4)) (or (not (f (c8) (c4) (c7))) (f (c4) (c7) (c5)))) NIL)
:: (668 (resolve 666 (2 2 2 2 2 2 2 2) 667 (2 1)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (or (= (c8) (c4)) (f (c4) (c7) (c5))))))))))) NIL)
:: (669 (propositional 668) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (f (c4) (c7) (c5)))))))))) NIL)
:: (670 (resolve 314 () 669 (2 2 2 2 2 2 2 2)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (f (c1) (c10) (c5)) (or (= (c9) (c4)) (or (= (c8) (c4)) (= (c10) (c6))))))))) NIL)
:: (671 (instantiate 8 ((v0 . (c1)) (v1 . (c10)) (v2 . (c5)))) (or (not (f (c1) (c10) (c5))) (f (c10) (c5) (c1))) NIL)
:: (672 (resolve 670 (2 2 2 2 1) 671 (1)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (f (c10) (c5) (c1))))))))) NIL)
:: (673 (instantiate 479 ((v0 . (c1)))) (or (= (c10) (c5)) (or (not (f (c10) (c5) (c1))) (f (c5) (c1) (c3)))) NIL)
:: (674 (resolve 672 (2 2 2 2 2 2 2) 673 (2 1)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (or (= (c10) (c5)) (f (c5) (c1) (c3)))))))))) NIL)
:: (675 (propositional 674) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (= (c9) (c4)) (or (= (c8) (c4)) (or (= (c10) (c6)) (f (c5) (c1) (c3))))))))) NIL)
:: (676 (resolve 411 () 675 (2 2 2 2 2 2 2)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (= (c9) (c4)) (or (= (c8) (c4)) (= (c10) (c6)))))))) NIL)
:: (677 (paramod 676 (2 2 2 2 2 2 1) 29 (3)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (= (c9) (c4)) (or (= (c8) (c4)) (f (c3) (c5) (c6)))))))) NIL)
:: (678 (resolve 566 () 677 (2 2 2 2 2 2)) (or (= (c9) (c7)) (or (= (c10) (c5)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (= (c9) (c4)) (= (c8) (c4))))))) NIL)
:: (679 (paramod 678 (2 1 1) 28 (3)) (or (= (c9) (c7)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (= (c9) (c4)) (or (= (c8) (c4)) (f (c2) (c6) (c5))))))) NIL)
:: (680 (resolve 558 () 679 (2 2 2 2 2)) (or (= (c9) (c7)) (or (= (c10) (c3)) (or (= (c10) (c2)) (or (= (c9) (c4)) (= (c8) (c4)))))) NIL)
:: (681 (paramod 680 (2 1 1) 28 (3)) (or (= (c9) (c7)) (or (= (c10) (c2)) (or (= (c9) (c4)) (or (= (c8) (c4)) (f (c2) (c6) (c3)))))) NIL)
:: (682 (resolve 541 () 681 (2 2 2 2)) (or (= (c9) (c7)) (or (= (c10) (c2)) (or (= (c9) (c4)) (= (c8) (c4))))) NIL)
:: (683 (paramod 682 (2 1 1) 29 (3)) (or (= (c9) (c7)) (or (= (c9) (c4)) (or (= (c8) (c4)) (f (c3) (c5) (c2))))) NIL)
:: (684 (resolve 550 () 683 (2 2 2)) (or (= (c9) (c7)) (or (= (c9) (c4)) (= (c8) (c4)))) NIL)
:: (685 (paramod 684 (1 1) 26 (3)) (or (= (c9) (c4)) (or (= (c8) (c4)) (f (c4) (c6) (c7)))) NIL)
:: (686 (resolve 375 () 685 (2 2)) (or (= (c9) (c4)) (= (c8) (c4))) NIL)
:: (687 (paramod 686 (1 1) 27 (3)) (or (= (c8) (c4)) (f (c3) (c7) (c4))) NIL)
:: (688 (resolve 261 () 687 (2)) (= (c8) (c4)) NIL)
:: (689 (paramod 688 (1) 312 (1)) (f (c4) (c2) (c7)) NIL)
:: (690 (resolve 128 () 689 ()) false NIL)
:: )
:: ;; END OF PROOF OBJECT

:: RENAME PROOF OBJECT FILE: lem01.ivy


:: #!/bin/sh

:: # Cr\'eation du r\'epertoire de travail
:: mkdir PAPPUS

:: # Installation du fichier `PROOF OBJECT' (IVY + rename labels)
:: mv lem01.ivy ./PAPPUS

:: # Cr\'eation du fichier `index' dans le r\'epertoire ./PAPPUS
:: # contenant uniquement le nom du fichier

:: cat << EOF > ./PAPPUS/index
:: lem01.ivy
:: EOF

:: # Cr\'eation du fichier de traduction.
:: # Il se termine n\'ecessairement par `.rul'

:: cat << EOF > ./PAPPUS/lem01.rul
:: ("=" (1 "=" 2))
:: ("f" (1 "," 2 "," 3 " are_collinear"))
:: EOF

:: # T\'el\'echargement du fichier ott2miz.el de Joseph Urban
:: # https://github.com/JUrban/ott2miz/
:: # File : ott2miz.el

:: # FIX: FREEBSD 10.3 
:: # modifi\'e par l'ajout des 2 lignes apr\`es
:: # (require 'cl)
:: #
:: #   (setq ls-lisp-use-insert-directory-program t)
:: #   (setq insert-directory-program "gnuls")
:: #
:: # afin de le rendre compatible avec FREEBSD 10.3

:: # Lancer le processus suivant:
:: emacs -batch -q -l ott2miz.el --eval '(translate-many "PAPPUS/index")'
:: # Si on a l'erreur suivante:
:: # Symbol's value as variable is void: 3~
:: # Il suffit de supprimer les 2 charact\`eres du fichier ott2miz.el

:: # Le r\'esultat se trouve essentiellement dans le fichier `./PAPPUS/lem01.miz'

:: # Pour un premier test de validiter:
:: # mkdir ./dict
:: # mkdir ./text
:: # modifier l'environnement de lem01.miz par

:: #    environ

:: #      vocabularies ANPROJ_2, SUBSET_1, PENCIL_1;
:: #      notations STRUCT_0, COLLSP, ANPROJ_2;
:: #      constructors ANPROJ_2;
:: #      theorems HESSENBE,COLLSP;

:: #    begin

:: # Il faut supprimer toutes les definitions
:: # et les reservations 
:: # Il faut effectuer les reservations suivantes:

:: # reserve PCPP for CollProjectiveSpace;
:: # reserve c1,c2,c3,c4,c5,c6,c7,c8,c9,c10 for Element of PCPP;
:: # reserve v100,v101,v102,v103,v104,v0,v1,v2,v3,v4 for Element of PCPP;	
:: # Normalement un test mizf ./text/lem01 devrait fonctionner correctement.

:: # Apporter les derni\`eres manipulations :
:: # Transformer les lignes suivantes en supprimant 'assume' et
:: # en ajoutant en fin de ligne by COLLSP:1,2,3,4,5,6,7,8,9,10,HESSENBE:1,2,3...
:: # Bien sur, un passage avec RELPREM enlevera ce qui n'est plus n\'ecessaire.
:: # On gardera les autres lignes 'assume' inchang\'ees.

:: # assume A1: for v0 holds v0=v0;
:: # --> A1: for v0 holds v0=v0;
:: # assume A2: for v2,v0,v1 holds  not v0=v1 or v1,v0,v2 are_collinear;
:: # --> A2: for v2,v0,v1 holds  not v0=v1 or v1,v0,v2 are_collinear by COLLSP:1,2,...
:: # assume A3: for v0,v2,v1 holds  not v0=v1 or v1,v2,v0 are_collinear;

:: # assume A4: for v0,v1,v2 holds  not v0=v1 or v2,v1,v0 are_collinear;

:: # assume A5: for v2,v3,v4,v0,v1 holds v0=v1 or  not v1,v0,v2
:: # are_collinear or  not v1,v0,v3 are_collinear or  not v1,v0,v4
:: # are_collinear or v2,v3,v4 are_collinear;

:: # assume A6: for v2,v1,v0 holds  not v0,v1,v2 are_collinear or v1,v0,v2
:: # are_collinear;

:: # assume A7: for v2,v1,v0 holds  not v0,v1,v2 are_collinear or v0,v2,v1
:: # are_collinear;

:: # assume A8: for v2,v1,v0 holds  not v0,v1,v2 are_collinear or v1,v2,v0
:: # are_collinear;

:: # Ne pas tenir compte du fichier `lem01.voc'

:: # On terminera le travail par une suppression des erreurs
:: # 602,603,604,605,... (RELPREM,RELINFER,...)

:: On apportera une derniere modification:
:: A & B implies contradiction --> A implies not B


::**********************************************************************
:: VERSION 2: Lemma
::**********************************************************************

:: theorem OTTER1:

:: ( not c2=c1) &

:: ( not c3=c1) &

:: ( not c3=c2) &

:: ( not c4=c2) &

:: ( not c4=c3) &

:: ( not c5=c1) &

:: ( not c6=c1) &

:: ( not c6=c5) &

:: ( not c7=c5) &

:: ( not c7=c6) &

:: ( not c1,c4,c7 are_collinear) &

:: (c1,c4,c2 are_collinear) &

:: (c1,c4,c3 are_collinear) &

:: (c1,c7,c5 are_collinear) &

:: (c1,c7,c6 are_collinear) &

:: (c4,c5,c8 are_collinear) &

:: (c7,c2,c8 are_collinear) &

:: (c4,c6,c9 are_collinear) &

:: (c3,c7,c9 are_collinear) &

:: (c2,c6,c10 are_collinear) &

:: (c3,c5,c10 are_collinear) &

:: (c4,c2,c7 are_collinear or c4,c3,c7 are_collinear or c2,c3,c7
::  are_collinear or c4,c2,c5 are_collinear or c4,c2,c6 are_collinear or
::  c4,c3,c5 are_collinear or c4,c3,c6 are_collinear or c2,c7,c5
::  are_collinear or c2,c7,c6 are_collinear or c3,c7,c5 are_collinear or
::  c3,c7,c6 are_collinear or c2,c3,c5 are_collinear or c2,c3,c6
::  are_collinear or c7,c5,c4 are_collinear or c7,c6,c4 are_collinear or
::  c5,c6,c4 are_collinear or c5,c6,c2 are_collinear or  not c4,c5,c8
::  are_collinear or  not c4,c6,c9 are_collinear or  not c2,c7,c8
::  are_collinear or  not c2,c6,c10 are_collinear or  not c3,c7,c9
::  are_collinear or  not c3,c5,c10 are_collinear)
:: implies contradiction
:: proof

::  A1: for v0 holds v0=v0;

:: A2: for v2,v0,v1 holds  not v0=v1 or v1,v0,v2 are_collinear by COLLSP:2;

::  A3: for v0,v2,v1 holds  not v0=v1 or v1,v2,v0 are_collinear by COLLSP:2;

::  A4: for v0,v1,v2 holds  not v0=v1 or v2,v1,v0 are_collinear by COLLSP:2,3,4,5,8;

::  A5: for v2,v1,v0 holds  not v0,v1,v2 are_collinear or v1,v0,v2
::  are_collinear by COLLSP:2,3,4,5,8;

::  A6: for v2,v1,v0 holds  not v0,v1,v2 are_collinear or v0,v2,v1
::  are_collinear by COLLSP:2,3,4,5,8;

::  A7: for v2,v1,v0 holds  not v0,v1,v2 are_collinear or v1,v2,v0
::  are_collinear by HESSENBE:1,2,3,4;

::  A8: for v2,v3,v0,v1 holds v0=v1 or  not v1,v0,v2 are_collinear
::  or  not v1,v0,v3 are_collinear or v1,v2,v3 are_collinear by HESSENBE:1,2,3,4;

::  A9: for v2,v3,v4,v0,v1 holds v0=v1 or  not v2,v3,v1
::  are_collinear or  not v2,v3,v0 are_collinear or  not v1,v0,v4
::  are_collinear or v2,v3,v4 are_collinear by HESSENBE:1,2,3,4;

:: assume A10:  not c2=c1;

:: assume A11:  not c3=c1;

:: assume A12:  not c3=c2;

:: assume A13:  not c4=c2;

:: assume A14:  not c4=c3;

:: assume A15:  not c5=c1;

:: assume A16:  not c6=c1;

:: assume A17:  not c6=c5;

:: assume A18:  not c7=c5;

:: assume A19:  not c7=c6;

:: assume A20:  not c1,c4,c7 are_collinear;

:: assume A21: c1,c4,c2 are_collinear;

:: assume A22: c1,c4,c3 are_collinear;

:: assume A23: c1,c7,c5 are_collinear;

:: assume A24: c1,c7,c6 are_collinear;

:: assume A25: c4,c5,c8 are_collinear;

:: assume A26: c7,c2,c8 are_collinear;

:: assume A27: c4,c6,c9 are_collinear;

:: assume A28: c3,c7,c9 are_collinear;

:: assume A29: c2,c6,c10 are_collinear;

:: assume A30: c3,c5,c10 are_collinear;

:: assume A31: c4,c2,c7 are_collinear or c4,c3,c7 are_collinear or
::  c2,c3,c7 are_collinear or c4,c2,c5 are_collinear or c4,c2,c6
::  are_collinear or c4,c3,c5 are_collinear or c4,c3,c6 are_collinear or
::  c2,c7,c5 are_collinear or c2,c7,c6 are_collinear or c3,c7,c5
::  are_collinear or c3,c7,c6 are_collinear or c2,c3,c5 are_collinear or
::  c2,c3,c6 are_collinear or c7,c5,c4 are_collinear or c7,c6,c4
::  are_collinear or c5,c6,c4 are_collinear or c5,c6,c2 are_collinear or 
::  not c4,c5,c8 are_collinear or  not c4,c6,c9 are_collinear or  not
::  c2,c7,c8 are_collinear or  not c2,c6,c10 are_collinear or  not
::  c3,c7,c9 are_collinear or  not c3,c5,c10 are_collinear;

:: A32: c4,c2,c7 are_collinear or c4,c3,c7 are_collinear or c2,c3,c7
::  are_collinear or c4,c2,c5 are_collinear or c4,c2,c6 are_collinear or
::  c4,c3,c5 are_collinear or c4,c3,c6 are_collinear or c2,c7,c5
::  are_collinear or c2,c7,c6 are_collinear or c3,c7,c5 are_collinear or
::  c3,c7,c6 are_collinear or c2,c3,c5 are_collinear or c2,c3,c6
::  are_collinear or c7,c5,c4 are_collinear or c7,c6,c4 are_collinear or
::  c5,c6,c4 are_collinear or c5,c6,c2 are_collinear or  not c4,c6,c9
::  are_collinear or  not c2,c7,c8 are_collinear or  not c2,c6,c10
::  are_collinear or  not c3,c7,c9 are_collinear or  not c3,c5,c10
::  are_collinear by A25,A31;

:: A33: c4,c2,c7 are_collinear or c4,c3,c7 are_collinear or c2,c3,c7
::  are_collinear or c4,c2,c5 are_collinear or c4,c2,c6 are_collinear or
::  c4,c3,c5 are_collinear or c4,c3,c6 are_collinear or c2,c7,c5
::  are_collinear or c2,c7,c6 are_collinear or c3,c7,c5 are_collinear or
::  c3,c7,c6 are_collinear or c2,c3,c5 are_collinear or c2,c3,c6
::  are_collinear or c7,c5,c4 are_collinear or c7,c6,c4 are_collinear or
::  c5,c6,c4 are_collinear or c5,c6,c2 are_collinear or  not c2,c7,c8
::  are_collinear or  not c2,c6,c10 are_collinear or  not c3,c7,c9
::  are_collinear or  not c3,c5,c10 are_collinear by A27,A32;

:: A34: c4,c2,c7 are_collinear or c4,c3,c7 are_collinear or c2,c3,c7
::  are_collinear or c4,c2,c5 are_collinear or c4,c2,c6 are_collinear or
::  c4,c3,c5 are_collinear or c4,c3,c6 are_collinear or c2,c7,c5
::  are_collinear or c2,c7,c6 are_collinear or c3,c7,c5 are_collinear or
::  c3,c7,c6 are_collinear or c2,c3,c5 are_collinear or c2,c3,c6
::  are_collinear or c7,c5,c4 are_collinear or c7,c6,c4 are_collinear or
::  c5,c6,c4 are_collinear or c5,c6,c2 are_collinear or  not c2,c7,c8
::  are_collinear or  not c3,c7,c9 are_collinear or  not c3,c5,c10
::  are_collinear by A29,A33;

:: A35: c4,c2,c7 are_collinear or c4,c3,c7 are_collinear or c2,c3,c7
::  are_collinear or c4,c2,c5 are_collinear or c4,c2,c6 are_collinear or
::  c4,c3,c5 are_collinear or c4,c3,c6 are_collinear or c2,c7,c5
::  are_collinear or c2,c7,c6 are_collinear or c3,c7,c5 are_collinear or
::  c3,c7,c6 are_collinear or c2,c3,c5 are_collinear or c2,c3,c6
::  are_collinear or c7,c5,c4 are_collinear or c7,c6,c4 are_collinear or
::  c5,c6,c4 are_collinear or c5,c6,c2 are_collinear or  not c2,c7,c8
::  are_collinear or  not c3,c5,c10 are_collinear by A28,A34;

:: A36: c4,c2,c7 are_collinear or c4,c3,c7 are_collinear or c2,c3,c7
::  are_collinear or c4,c2,c5 are_collinear or c4,c2,c6 are_collinear or
::  c4,c3,c5 are_collinear or c4,c3,c6 are_collinear or c2,c7,c5
::  are_collinear or c2,c7,c6 are_collinear or c3,c7,c5 are_collinear or
::  c3,c7,c6 are_collinear or c2,c3,c5 are_collinear or c2,c3,c6
::  are_collinear or c7,c5,c4 are_collinear or c7,c6,c4 are_collinear or
::  c5,c6,c4 are_collinear or c5,c6,c2 are_collinear or  not c2,c7,c8
::  are_collinear by A30,A35;

:: A37: for v2,v100 holds  not v100=v100 or v100,v2,v100 are_collinear
::  by A3;

:: A38: for v100 holds v100=v100 by A1;

:: A39: for v2,v100 holds v100,v2,v100 are_collinear
:: proof let v2,v100;
::  not v100=v100 or v100,v2,v100 are_collinear by A37;
:: hence thesis by A38;
:: end;

:: A40: for v1,v0 holds v0,v1,v0 are_collinear by A39;

:: A41: for v100,v2 holds  not v100=v100 or v2,v100,v100 are_collinear
::  by A4;

:: A42: for v100 holds v100=v100 by A1;

:: A43: for v100,v2 holds v2,v100,v100 are_collinear
:: proof let v100,v2;
::  not v100=v100 or v2,v100,v100 are_collinear by A41;
:: hence thesis by A42;
:: end;

:: A44: for v1,v0 holds v0,v1,v1 are_collinear by A43;

:: A45:  not c7,c1,c4 are_collinear or c1,c4,c7 are_collinear by A7;

:: A46:  not c7,c1,c4 are_collinear by A45,A20;

:: A47:  not c1,c7,c4 are_collinear or c1,c4,c7 are_collinear by A6;

:: A48:  not c1,c7,c4 are_collinear by A47,A20;

:: A49:  not c4,c1,c7 are_collinear or c1,c4,c7 are_collinear by A5;

:: A50:  not c4,c1,c7 are_collinear by A49,A20;

:: A51:  not c4=c1 or c1,c4,c7 are_collinear by A2;

:: A52:  not c4=c1 by A51,A20;

:: A53: for v103 holds c4=c1 or  not c1,c4,c2 are_collinear or  not
::  c1,c4,v103 are_collinear or c1,c2,v103 are_collinear by A8;

:: A54: for v103 holds c4=c1 or  not c1,c4,v103 are_collinear or
::  c1,c2,v103 are_collinear by A21,A53;

:: A55: for v0 holds c4=c1 or  not c1,c4,v0 are_collinear or c1,c2,v0
::  are_collinear by A54;

:: A56: for v100 holds c4=c1 or  not c1,c4,v100 are_collinear or
::  c1,c2,v100 are_collinear by A55;

:: A57: for v100 holds  not c1,c4,v100 are_collinear or c1,c2,v100
::  are_collinear by A52,A56;

:: A58: for v0 holds  not c1,c4,v0 are_collinear or c1,c2,v0
::  are_collinear by A57;

:: A59:  not c1,c4,c2 are_collinear or c4,c2,c1 are_collinear by A7;

:: A60: c4,c2,c1 are_collinear by A21,A59;

:: A61:  not c1,c4,c2 are_collinear or c1,c2,c4 are_collinear by A6;

:: A62: c1,c2,c4 are_collinear by A21,A61;

:: A63:  not c1,c4,c2 are_collinear or c4,c1,c2 are_collinear by A5;

:: A64: c4,c1,c2 are_collinear by A21,A63;

:: A65:  not c1,c4,c3 are_collinear or c4,c3,c1 are_collinear by A7;

:: A66: c4,c3,c1 are_collinear by A22,A65;

:: A67:  not c1,c4,c3 are_collinear or c4,c1,c3 are_collinear by A5;

:: A68: c4,c1,c3 are_collinear by A22,A67;

:: A69: for v4,v3,v2 holds c3=c2 or  not v2,v3,c2 are_collinear or  not
::  v2,v3,c3 are_collinear or  not c2,c3,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A70: for v4,v3,v2 holds  not v2,v3,c2 are_collinear or  not v2,v3,c3
::  are_collinear or  not c2,c3,v4 are_collinear or v2,v3,v4
::  are_collinear by A69,A12;

:: A71: for v2,v1,v0 holds  not v0,v1,c2 are_collinear or  not v0,v1,c3
::  are_collinear or  not c2,c3,v2 are_collinear or v0,v1,v2
::  are_collinear by A70;

:: A72: for v2 holds  not c1,c4,c2 are_collinear or  not c1,c4,c3
::  are_collinear or  not c2,c3,v2 are_collinear or c1,c4,v2
::  are_collinear by A71;

:: A73: for v2 holds  not c1,c4,c3 are_collinear or  not c2,c3,v2
::  are_collinear or c1,c4,v2 are_collinear by A72,A21;

:: A74: for v0 holds  not c1,c4,c3 are_collinear or  not c2,c3,v0
::  are_collinear or c1,c4,v0 are_collinear by A73;

:: A75: for v0 holds  not c1,c4,c3 are_collinear or  not c2,c3,v0
::  are_collinear or c1,c4,v0 are_collinear by A74;

:: A76: for v0 holds  not c2,c3,v0 are_collinear or c1,c4,v0
::  are_collinear by A75,A22;

:: A77:  not c2,c3,c7 are_collinear or c1,c4,c7 are_collinear by A76;

:: A78:  not c2,c3,c7 are_collinear by A77,A20;

:: A79: c4,c2,c7 are_collinear or c4,c3,c7 are_collinear or c4,c2,c5
::  are_collinear or c4,c2,c6 are_collinear or c4,c3,c5 are_collinear or
::  c4,c3,c6 are_collinear or c2,c7,c5 are_collinear or c2,c7,c6
::  are_collinear or c3,c7,c5 are_collinear or c3,c7,c6 are_collinear or
::  c2,c3,c5 are_collinear or c2,c3,c6 are_collinear or c7,c5,c4
::  are_collinear or c7,c6,c4 are_collinear or c5,c6,c4 are_collinear or
::  c5,c6,c2 are_collinear or  not c2,c7,c8 are_collinear by A78,A36;

:: A80:  not c1,c7,c5 are_collinear or c7,c5,c1 are_collinear by A7;

:: A81: c7,c5,c1 are_collinear by A23,A80;

:: A82:  not c1,c7,c5 are_collinear or c1,c5,c7 are_collinear by A6;

:: A83: c1,c5,c7 are_collinear by A23,A82;

:: A84:  not c1,c7,c5 are_collinear or c7,c1,c5 are_collinear by A5;

:: A85: c7,c1,c5 are_collinear by A23,A84;

:: A86:  not c1,c7,c6 are_collinear or c7,c6,c1 are_collinear by A7;

:: A87: c7,c6,c1 are_collinear by A24,A86;

:: A88:  not c1,c7,c6 are_collinear or c1,c6,c7 are_collinear by A6;

:: A89: c1,c6,c7 are_collinear by A24,A88;

:: A90:  not c1,c7,c6 are_collinear or c7,c1,c6 are_collinear by A5;

:: A91: c7,c1,c6 are_collinear by A24,A90;

:: A92:  not c7,c2,c8 are_collinear or c2,c7,c8 are_collinear by A5;

:: A93: c2,c7,c8 are_collinear by A26,A92;

:: A94: c4,c2,c7 are_collinear or c4,c3,c7 are_collinear or c4,c2,c5
::  are_collinear or c4,c2,c6 are_collinear or c4,c3,c5 are_collinear or
::  c4,c3,c6 are_collinear or c2,c7,c5 are_collinear or c2,c7,c6
::  are_collinear or c3,c7,c5 are_collinear or c3,c7,c6 are_collinear or
::  c2,c3,c5 are_collinear or c2,c3,c6 are_collinear or c7,c5,c4
::  are_collinear or c7,c6,c4 are_collinear or c5,c6,c4 are_collinear or
::  c5,c6,c2 are_collinear by A93,A79;

:: A95: for v4,v3,v2 holds c1=c3 or  not v2,v3,c3 are_collinear or  not
::  v2,v3,c1 are_collinear or  not c3,c1,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A96:  not c1=c3 by A11;

:: A97: for v4,v3,v2 holds  not v2,v3,c3 are_collinear or  not v2,v3,c1
::  are_collinear or  not c3,c1,v4 are_collinear or v2,v3,v4
::  are_collinear by A95,A96;

:: A98: for v2,v1,v0 holds  not v0,v1,c3 are_collinear or  not v0,v1,c1
::  are_collinear or  not c3,c1,v2 are_collinear or v0,v1,v2
::  are_collinear by A97;

:: A99: for v2 holds  not c1,c4,c3 are_collinear or  not c1,c4,c1
::  are_collinear or  not c3,c1,v2 are_collinear or c1,c4,v2
::  are_collinear by A98;

:: A100: for v2 holds  not c1,c4,c1 are_collinear or  not c3,c1,v2
::  are_collinear or c1,c4,v2 are_collinear by A99,A22;

:: A101: for v0 holds  not c1,c4,c1 are_collinear or  not c3,c1,v0
::  are_collinear or c1,c4,v0 are_collinear by A100;

:: A102: for v0 holds  not c1,c4,c1 are_collinear or  not c3,c1,v0
::  are_collinear or c1,c4,v0 are_collinear by A101;

:: A103: c1,c4,c1 are_collinear by A40;

:: A104: for v0 holds  not c3,c1,v0 are_collinear or c1,c4,v0
::  are_collinear by A102,A103;

:: A105:  not c3,c1,c7 are_collinear or c1,c4,c7 are_collinear by A104;

:: A106:  not c3,c1,c7 are_collinear by A105,A20;

:: A107: for v4,v3,v2 holds c1=c2 or  not v2,v3,c2 are_collinear or  not
::  v2,v3,c1 are_collinear or  not c2,c1,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A108:  not c1=c2 by A10;

:: A109: for v4,v3,v2 holds  not v2,v3,c2 are_collinear or  not v2,v3,c1
::  are_collinear or  not c2,c1,v4 are_collinear or v2,v3,v4
::  are_collinear by A107,A108;

:: A110: for v2,v1,v0 holds  not v0,v1,c2 are_collinear or  not v0,v1,c1
::  are_collinear or  not c2,c1,v2 are_collinear or v0,v1,v2
::  are_collinear by A109;

:: A111: for v2 holds  not c1,c4,c2 are_collinear or  not c1,c4,c1
::  are_collinear or  not c2,c1,v2 are_collinear or c1,c4,v2
::  are_collinear by A110;

:: A112: for v2 holds  not c1,c4,c1 are_collinear or  not c2,c1,v2
::  are_collinear or c1,c4,v2 are_collinear by A111,A21;

:: A113: for v0 holds  not c1,c4,c1 are_collinear or  not c2,c1,v0
::  are_collinear or c1,c4,v0 are_collinear by A112;

:: A114: for v0 holds  not c1,c4,c1 are_collinear or  not c2,c1,v0
::  are_collinear or c1,c4,v0 are_collinear by A113;

:: A115: c1,c4,c1 are_collinear by A40;

:: A116: for v0 holds  not c2,c1,v0 are_collinear or c1,c4,v0
::  are_collinear by A114,A115;

:: A117:  not c2,c1,c7 are_collinear or c1,c4,c7 are_collinear by A116;

:: A118:  not c2,c1,c7 are_collinear by A117,A20;

:: A119: for v4,v3,v2 holds c3=c4 or  not v2,v3,c4 are_collinear or  not
::  v2,v3,c3 are_collinear or  not c4,c3,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A120:  not c3=c4 by A14;

:: A121: for v4,v3,v2 holds  not v2,v3,c4 are_collinear or  not v2,v3,c3
::  are_collinear or  not c4,c3,v4 are_collinear or v2,v3,v4
::  are_collinear by A119,A120;

:: A122: for v2,v1,v0 holds  not v0,v1,c4 are_collinear or  not v0,v1,c3
::  are_collinear or  not c4,c3,v2 are_collinear or v0,v1,v2
::  are_collinear by A121;

:: A123: for v2,v100 holds  not v100,c4,c4 are_collinear or  not
::  v100,c4,c3 are_collinear or  not c4,c3,v2 are_collinear or v100,c4,v2
::  are_collinear by A122;

:: A124: for v100 holds v100,c4,c4 are_collinear by A44;

:: A125: for v2,v100 holds  not v100,c4,c3 are_collinear or  not
::  c4,c3,v2 are_collinear or v100,c4,v2 are_collinear
:: proof let v2,v100;
::  not v100,c4,c4 are_collinear or  not v100,c4,c3 are_collinear or 
::  not c4,c3,v2 are_collinear or v100,c4,v2 are_collinear by A123;
:: hence thesis by A124;
:: end;

:: A126: for v1,v0 holds  not v0,c4,c3 are_collinear or  not c4,c3,v1
::  are_collinear or v0,c4,v1 are_collinear by A125;

:: A127: for v1 holds  not c1,c4,c3 are_collinear or  not c4,c3,v1
::  are_collinear or c1,c4,v1 are_collinear by A126;

:: A128: for v1 holds  not c4,c3,v1 are_collinear or c1,c4,v1
::  are_collinear by A127,A22;

:: A129: for v0 holds  not c4,c3,v0 are_collinear or c1,c4,v0
::  are_collinear by A128;

:: A130:  not c4,c3,c7 are_collinear or c1,c4,c7 are_collinear by A129;

:: A131:  not c4,c3,c7 are_collinear by A130,A20;

:: A132: for v4,v3,v2 holds c2=c4 or  not v2,v3,c4 are_collinear or  not
::  v2,v3,c2 are_collinear or  not c4,c2,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A133:  not c2=c4 by A13;

:: A134: for v4,v3,v2 holds  not v2,v3,c4 are_collinear or  not v2,v3,c2
::  are_collinear or  not c4,c2,v4 are_collinear or v2,v3,v4
::  are_collinear by A132,A133;

:: A135: for v2,v1,v0 holds  not v0,v1,c4 are_collinear or  not v0,v1,c2
::  are_collinear or  not c4,c2,v2 are_collinear or v0,v1,v2
::  are_collinear by A134;

:: A136: for v2,v100 holds  not v100,c4,c4 are_collinear or  not
::  v100,c4,c2 are_collinear or  not c4,c2,v2 are_collinear or v100,c4,v2
::  are_collinear by A135;

:: A137: for v100 holds v100,c4,c4 are_collinear by A44;

:: A138: for v2,v100 holds  not v100,c4,c2 are_collinear or  not
::  c4,c2,v2 are_collinear or v100,c4,v2 are_collinear
:: proof let v2,v100;
::  not v100,c4,c4 are_collinear or  not v100,c4,c2 are_collinear or 
::  not c4,c2,v2 are_collinear or v100,c4,v2 are_collinear by A136;
:: hence thesis by A137;
:: end;

:: A139: for v1,v0 holds  not v0,c4,c2 are_collinear or  not c4,c2,v1
::  are_collinear or v0,c4,v1 are_collinear by A138;

:: A140: for v1 holds  not c1,c4,c2 are_collinear or  not c4,c2,v1
::  are_collinear or c1,c4,v1 are_collinear by A139;

:: A141: for v1 holds  not c4,c2,v1 are_collinear or c1,c4,v1
::  are_collinear by A140,A21;

:: A142: for v0 holds  not c4,c2,v0 are_collinear or c1,c4,v0
::  are_collinear by A141;

:: A143:  not c4,c2,c7 are_collinear or c1,c4,c7 are_collinear by A142;

:: A144:  not c4,c2,c7 are_collinear by A143,A20;

:: A145: c4,c3,c7 are_collinear or c4,c2,c5 are_collinear or c4,c2,c6
::  are_collinear or c4,c3,c5 are_collinear or c4,c3,c6 are_collinear or
::  c2,c7,c5 are_collinear or c2,c7,c6 are_collinear or c3,c7,c5
::  are_collinear or c3,c7,c6 are_collinear or c2,c3,c5 are_collinear or
::  c2,c3,c6 are_collinear or c7,c5,c4 are_collinear or c7,c6,c4
::  are_collinear or c5,c6,c4 are_collinear or c5,c6,c2 are_collinear by
::  A144,A94;

:: A146: c4,c2,c5 are_collinear or c4,c2,c6 are_collinear or c4,c3,c5
::  are_collinear or c4,c3,c6 are_collinear or c2,c7,c5 are_collinear or
::  c2,c7,c6 are_collinear or c3,c7,c5 are_collinear or c3,c7,c6
::  are_collinear or c2,c3,c5 are_collinear or c2,c3,c6 are_collinear or
::  c7,c5,c4 are_collinear or c7,c6,c4 are_collinear or c5,c6,c4
::  are_collinear or c5,c6,c2 are_collinear by A131,A145;

:: A147: for v4,v3,v2 holds c2=c1 or  not v2,v3,c1 are_collinear or  not
::  v2,v3,c2 are_collinear or  not c1,c2,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A148: for v4,v3,v2 holds  not v2,v3,c1 are_collinear or  not v2,v3,c2
::  are_collinear or  not c1,c2,v4 are_collinear or v2,v3,v4
::  are_collinear by A147,A10;

:: A149: for v2,v1,v0 holds  not v0,v1,c1 are_collinear or  not v0,v1,c2
::  are_collinear or  not c1,c2,v2 are_collinear or v0,v1,v2
::  are_collinear by A148;

:: A150: for v2,v100 holds  not v100,c1,c1 are_collinear or  not
::  v100,c1,c2 are_collinear or  not c1,c2,v2 are_collinear or v100,c1,v2
::  are_collinear by A149;

:: A151: for v100 holds v100,c1,c1 are_collinear by A44;

:: A152: for v2,v100 holds  not v100,c1,c2 are_collinear or  not
::  c1,c2,v2 are_collinear or v100,c1,v2 are_collinear
:: proof let v2,v100;
::  not v100,c1,c1 are_collinear or  not v100,c1,c2 are_collinear or 
::  not c1,c2,v2 are_collinear or v100,c1,v2 are_collinear by A150;
:: hence thesis by A151;
:: end;

:: A153: for v1,v0 holds  not v0,c1,c2 are_collinear or  not c1,c2,v1
::  are_collinear or v0,c1,v1 are_collinear by A152;

:: A154: for v0 holds  not v0,c1,c2 are_collinear or  not c1,c2,c4
::  are_collinear or v0,c1,c4 are_collinear by A153;

:: A155: for v0 holds  not v0,c1,c2 are_collinear or v0,c1,c4
::  are_collinear by A154,A62;

:: A156:  not c7,c1,c2 are_collinear or c7,c1,c4 are_collinear by A155;

:: A157:  not c7,c1,c2 are_collinear by A156,A46;

:: A158: for v4,v3,v2 holds c6=c5 or  not v2,v3,c5 are_collinear or  not
::  v2,v3,c6 are_collinear or  not c5,c6,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A159: for v4,v3,v2 holds  not v2,v3,c5 are_collinear or  not v2,v3,c6
::  are_collinear or  not c5,c6,v4 are_collinear or v2,v3,v4
::  are_collinear by A158,A17;

:: A160: for v2,v1,v0 holds  not v0,v1,c5 are_collinear or  not v0,v1,c6
::  are_collinear or  not c5,c6,v2 are_collinear or v0,v1,v2
::  are_collinear by A159;

:: A161: for v2 holds  not c1,c7,c5 are_collinear or  not c1,c7,c6
::  are_collinear or  not c5,c6,v2 are_collinear or c1,c7,v2
::  are_collinear by A160;

:: A162: for v2 holds  not c1,c7,c6 are_collinear or  not c5,c6,v2
::  are_collinear or c1,c7,v2 are_collinear by A161,A23;

:: A163: for v0 holds  not c1,c7,c6 are_collinear or  not c5,c6,v0
::  are_collinear or c1,c7,v0 are_collinear by A162;

:: A164: for v0 holds  not c1,c7,c6 are_collinear or  not c5,c6,v0
::  are_collinear or c1,c7,v0 are_collinear by A163;

:: A165: for v0 holds  not c5,c6,v0 are_collinear or c1,c7,v0
::  are_collinear by A164,A24;

:: A166:  not c5,c6,c4 are_collinear or c1,c7,c4 are_collinear by A165;

:: A167:  not c5,c6,c4 are_collinear by A166,A48;

:: A168: for v4,v3,v2 holds c6=c7 or  not v2,v3,c7 are_collinear or  not
::  v2,v3,c6 are_collinear or  not c7,c6,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A169:  not c6=c7 by A19;

:: A170: for v4,v3,v2 holds  not v2,v3,c7 are_collinear or  not v2,v3,c6
::  are_collinear or  not c7,c6,v4 are_collinear or v2,v3,v4
::  are_collinear by A168,A169;

:: A171: for v2,v1,v0 holds  not v0,v1,c7 are_collinear or  not v0,v1,c6
::  are_collinear or  not c7,c6,v2 are_collinear or v0,v1,v2
::  are_collinear by A170;

:: A172: for v2,v100 holds  not v100,c7,c7 are_collinear or  not
::  v100,c7,c6 are_collinear or  not c7,c6,v2 are_collinear or v100,c7,v2
::  are_collinear by A171;

:: A173: for v100 holds v100,c7,c7 are_collinear by A44;

:: A174: for v2,v100 holds  not v100,c7,c6 are_collinear or  not
::  c7,c6,v2 are_collinear or v100,c7,v2 are_collinear
:: proof let v2,v100;
::  not v100,c7,c7 are_collinear or  not v100,c7,c6 are_collinear or 
::  not c7,c6,v2 are_collinear or v100,c7,v2 are_collinear by A172;
:: hence thesis by A173;
:: end;

:: A175: for v1,v0 holds  not v0,c7,c6 are_collinear or  not c7,c6,v1
::  are_collinear or v0,c7,v1 are_collinear by A174;

:: A176: for v1 holds  not c1,c7,c6 are_collinear or  not c7,c6,v1
::  are_collinear or c1,c7,v1 are_collinear by A175;

:: A177: for v1 holds  not c7,c6,v1 are_collinear or c1,c7,v1
::  are_collinear by A176,A24;

:: A178: for v0 holds  not c7,c6,v0 are_collinear or c1,c7,v0
::  are_collinear by A177;

:: A179:  not c7,c6,c4 are_collinear or c1,c7,c4 are_collinear by A178;

:: A180:  not c7,c6,c4 are_collinear by A179,A48;

:: A181: for v4,v3,v2 holds c5=c7 or  not v2,v3,c7 are_collinear or  not
::  v2,v3,c5 are_collinear or  not c7,c5,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A182:  not c5=c7 by A18;

:: A183: for v4,v3,v2 holds  not v2,v3,c7 are_collinear or  not v2,v3,c5
::  are_collinear or  not c7,c5,v4 are_collinear or v2,v3,v4
::  are_collinear by A181,A182;

:: A184: for v2,v1,v0 holds  not v0,v1,c7 are_collinear or  not v0,v1,c5
::  are_collinear or  not c7,c5,v2 are_collinear or v0,v1,v2
::  are_collinear by A183;

:: A185: for v2,v100 holds  not v100,c7,c7 are_collinear or  not
::  v100,c7,c5 are_collinear or  not c7,c5,v2 are_collinear or v100,c7,v2
::  are_collinear by A184;

:: A186: for v100 holds v100,c7,c7 are_collinear by A44;

:: A187: for v2,v100 holds  not v100,c7,c5 are_collinear or  not
::  c7,c5,v2 are_collinear or v100,c7,v2 are_collinear
:: proof let v2,v100;
::  not v100,c7,c7 are_collinear or  not v100,c7,c5 are_collinear or 
::  not c7,c5,v2 are_collinear or v100,c7,v2 are_collinear by A185;
:: hence thesis by A186;
:: end;

:: A188: for v1,v0 holds  not v0,c7,c5 are_collinear or  not c7,c5,v1
::  are_collinear or v0,c7,v1 are_collinear by A187;

:: A189: for v1 holds  not c1,c7,c5 are_collinear or  not c7,c5,v1
::  are_collinear or c1,c7,v1 are_collinear by A188;

:: A190: for v1 holds  not c7,c5,v1 are_collinear or c1,c7,v1
::  are_collinear by A189,A23;

:: A191: for v0 holds  not c7,c5,v0 are_collinear or c1,c7,v0
::  are_collinear by A190;

:: A192:  not c7,c5,c4 are_collinear or c1,c7,c4 are_collinear by A191;

:: A193:  not c7,c5,c4 are_collinear by A192,A48;

:: A194: c4,c2,c5 are_collinear or c4,c2,c6 are_collinear or c4,c3,c5
::  are_collinear or c4,c3,c6 are_collinear or c2,c7,c5 are_collinear or
::  c2,c7,c6 are_collinear or c3,c7,c5 are_collinear or c3,c7,c6
::  are_collinear or c2,c3,c5 are_collinear or c2,c3,c6 are_collinear or
::  c7,c6,c4 are_collinear or c5,c6,c4 are_collinear or c5,c6,c2
::  are_collinear by A193,A146;

:: A195: c4,c2,c5 are_collinear or c4,c2,c6 are_collinear or c4,c3,c5
::  are_collinear or c4,c3,c6 are_collinear or c2,c7,c5 are_collinear or
::  c2,c7,c6 are_collinear or c3,c7,c5 are_collinear or c3,c7,c6
::  are_collinear or c2,c3,c5 are_collinear or c2,c3,c6 are_collinear or
::  c5,c6,c4 are_collinear or c5,c6,c2 are_collinear by A180,A194;

:: A196: c4,c2,c5 are_collinear or c4,c2,c6 are_collinear or c4,c3,c5
::  are_collinear or c4,c3,c6 are_collinear or c2,c7,c5 are_collinear or
::  c2,c7,c6 are_collinear or c3,c7,c5 are_collinear or c3,c7,c6
::  are_collinear or c2,c3,c5 are_collinear or c2,c3,c6 are_collinear or
::  c5,c6,c2 are_collinear by A167,A195;

:: A197:  not c7=c3 or c2,c3,c7 are_collinear by A4;

:: A198:  not c7=c3 by A197,A78;

:: A199:  not c7=c2 or c2,c3,c7 are_collinear by A3;

:: A200:  not c7=c2 by A199,A78;

:: A201: for v3,v2 holds c7=c3 or  not c3,c7,v2 are_collinear or  not
::  c3,c7,v3 are_collinear or c3,v2,v3 are_collinear by A8;

:: A202: for v3,v2 holds  not c3,c7,v2 are_collinear or  not c3,c7,v3
::  are_collinear or c3,v2,v3 are_collinear by A201,A198;

:: A203: for v1,v0 holds  not c3,c7,v0 are_collinear or  not c3,c7,v1
::  are_collinear or c3,v0,v1 are_collinear by A202;

:: A204: for v0 holds  not c3,c7,v0 are_collinear or  not c3,c7,c7
::  are_collinear or c3,v0,c7 are_collinear by A203;

:: A205: c3,c7,c7 are_collinear by A44;

:: A206: for v0 holds  not c3,c7,v0 are_collinear or c3,v0,c7
::  are_collinear by A204,A205;

:: A207:  not c3,c7,c1 are_collinear or c3,c1,c7 are_collinear by A206;

:: A208:  not c3,c7,c1 are_collinear by A207,A106;

:: A209:  not c7,c5,c1 are_collinear or c5,c7,c1 are_collinear by A5;

:: A210: c5,c7,c1 are_collinear by A81,A209;

:: A211: for v4,v3,v2 holds c5=c1 or  not v2,v3,c1 are_collinear or  not
::  v2,v3,c5 are_collinear or  not c1,c5,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A212: for v4,v3,v2 holds  not v2,v3,c1 are_collinear or  not v2,v3,c5
::  are_collinear or  not c1,c5,v4 are_collinear or v2,v3,v4
::  are_collinear by A211,A15;

:: A213: for v2,v1,v0 holds  not v0,v1,c1 are_collinear or  not v0,v1,c5
::  are_collinear or  not c1,c5,v2 are_collinear or v0,v1,v2
::  are_collinear by A212;

:: A214: for v2,v100 holds  not v100,c1,c1 are_collinear or  not
::  v100,c1,c5 are_collinear or  not c1,c5,v2 are_collinear or v100,c1,v2
::  are_collinear by A213;

:: A215: for v100 holds v100,c1,c1 are_collinear by A44;

:: A216: for v2,v100 holds  not v100,c1,c5 are_collinear or  not
::  c1,c5,v2 are_collinear or v100,c1,v2 are_collinear
:: proof let v2,v100;
::  not v100,c1,c1 are_collinear or  not v100,c1,c5 are_collinear or 
::  not c1,c5,v2 are_collinear or v100,c1,v2 are_collinear by A214;
:: hence thesis by A215;
:: end;

:: A217: for v1,v0 holds  not v0,c1,c5 are_collinear or  not c1,c5,v1
::  are_collinear or v0,c1,v1 are_collinear by A216;

:: A218: for v0 holds  not v0,c1,c5 are_collinear or  not c1,c5,c7
::  are_collinear or v0,c1,c7 are_collinear by A217;

:: A219: for v0 holds  not v0,c1,c5 are_collinear or v0,c1,c7
::  are_collinear by A218,A83;

:: A220:  not c4,c1,c5 are_collinear or c4,c1,c7 are_collinear by A219;

:: A221:  not c4,c1,c5 are_collinear by A220,A50;

:: A222:  not c7,c6,c1 are_collinear or c6,c1,c7 are_collinear by A7;

:: A223: c6,c1,c7 are_collinear by A87,A222;

:: A224:  not c7,c6,c1 are_collinear or c6,c7,c1 are_collinear by A5;

:: A225: c6,c7,c1 are_collinear by A87,A224;

:: A226: for v3,v2 holds c7=c2 or  not c2,c7,v2 are_collinear or  not
::  c2,c7,v3 are_collinear or c2,v2,v3 are_collinear by A8;

:: A227: for v3,v2 holds  not c2,c7,v2 are_collinear or  not c2,c7,v3
::  are_collinear or c2,v2,v3 are_collinear by A226,A200;

:: A228: for v1,v0 holds  not c2,c7,v0 are_collinear or  not c2,c7,v1
::  are_collinear or c2,v0,v1 are_collinear by A227;

:: A229: for v0 holds  not c2,c7,v0 are_collinear or  not c2,c7,c7
::  are_collinear or c2,v0,c7 are_collinear by A228;

:: A230: c2,c7,c7 are_collinear by A44;

:: A231: for v0 holds  not c2,c7,v0 are_collinear or c2,v0,c7
::  are_collinear by A229,A230;

:: A232:  not c2,c7,c1 are_collinear or c2,c1,c7 are_collinear by A231;

:: A233:  not c2,c7,c1 are_collinear by A232,A118;

:: A234: for v4,v3,v2 holds c6=c1 or  not v2,v3,c1 are_collinear or  not
::  v2,v3,c6 are_collinear or  not c1,c6,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A235: for v4,v3,v2 holds  not v2,v3,c1 are_collinear or  not v2,v3,c6
::  are_collinear or  not c1,c6,v4 are_collinear or v2,v3,v4
::  are_collinear by A234,A16;

:: A236: for v2,v1,v0 holds  not v0,v1,c1 are_collinear or  not v0,v1,c6
::  are_collinear or  not c1,c6,v2 are_collinear or v0,v1,v2
::  are_collinear by A235;

:: A237: for v2 holds  not c4,c3,c1 are_collinear or  not c4,c3,c6
::  are_collinear or  not c1,c6,v2 are_collinear or c4,c3,v2
::  are_collinear by A236;

:: A238: for v2 holds  not c4,c3,c6 are_collinear or  not c1,c6,v2
::  are_collinear or c4,c3,v2 are_collinear by A237,A66;

:: A239: for v0 holds  not c4,c3,c6 are_collinear or  not c1,c6,v0
::  are_collinear or c4,c3,v0 are_collinear by A238;

:: A240:  not c4,c3,c6 are_collinear or  not c1,c6,c7 are_collinear or
::  c4,c3,c7 are_collinear by A239;

:: A241:  not c4,c3,c6 are_collinear or c4,c3,c7 are_collinear by
::  A240,A89;

:: A242:  not c4,c3,c6 are_collinear by A241,A131;

:: A243: for v4,v3,v2 holds c5=c1 or  not v2,v3,c1 are_collinear or  not
::  v2,v3,c5 are_collinear or  not c1,c5,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A244: for v4,v3,v2 holds  not v2,v3,c1 are_collinear or  not v2,v3,c5
::  are_collinear or  not c1,c5,v4 are_collinear or v2,v3,v4
::  are_collinear by A243,A15;

:: A245: for v2,v1,v0 holds  not v0,v1,c1 are_collinear or  not v0,v1,c5
::  are_collinear or  not c1,c5,v2 are_collinear or v0,v1,v2
::  are_collinear by A244;

:: A246: for v2 holds  not c4,c3,c1 are_collinear or  not c4,c3,c5
::  are_collinear or  not c1,c5,v2 are_collinear or c4,c3,v2
::  are_collinear by A245;

:: A247: for v2 holds  not c4,c3,c5 are_collinear or  not c1,c5,v2
::  are_collinear or c4,c3,v2 are_collinear by A246,A66;

:: A248: for v0 holds  not c4,c3,c5 are_collinear or  not c1,c5,v0
::  are_collinear or c4,c3,v0 are_collinear by A247;

:: A249:  not c4,c3,c5 are_collinear or  not c1,c5,c7 are_collinear or
::  c4,c3,c7 are_collinear by A248;

:: A250:  not c4,c3,c5 are_collinear or c4,c3,c7 are_collinear by
::  A249,A83;

:: A251:  not c4,c3,c5 are_collinear by A250,A131;

:: A252: c4,c2,c5 are_collinear or c4,c2,c6 are_collinear or c4,c3,c6
::  are_collinear or c2,c7,c5 are_collinear or c2,c7,c6 are_collinear or
::  c3,c7,c5 are_collinear or c3,c7,c6 are_collinear or c2,c3,c5
::  are_collinear or c2,c3,c6 are_collinear or c5,c6,c2 are_collinear by
::  A251,A196;

:: A253: c4,c2,c5 are_collinear or c4,c2,c6 are_collinear or c2,c7,c5
::  are_collinear or c2,c7,c6 are_collinear or c3,c7,c5 are_collinear or
::  c3,c7,c6 are_collinear or c2,c3,c5 are_collinear or c2,c3,c6
::  are_collinear or c5,c6,c2 are_collinear by A242,A252;

:: A254: for v4,v3,v2 holds c6=c1 or  not v2,v3,c1 are_collinear or  not
::  v2,v3,c6 are_collinear or  not c1,c6,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A255: for v4,v3,v2 holds  not v2,v3,c1 are_collinear or  not v2,v3,c6
::  are_collinear or  not c1,c6,v4 are_collinear or v2,v3,v4
::  are_collinear by A254,A16;

:: A256: for v2,v1,v0 holds  not v0,v1,c1 are_collinear or  not v0,v1,c6
::  are_collinear or  not c1,c6,v2 are_collinear or v0,v1,v2
::  are_collinear by A255;

:: A257: for v2 holds  not c4,c2,c1 are_collinear or  not c4,c2,c6
::  are_collinear or  not c1,c6,v2 are_collinear or c4,c2,v2
::  are_collinear by A256;

:: A258: for v2 holds  not c4,c2,c6 are_collinear or  not c1,c6,v2
::  are_collinear or c4,c2,v2 are_collinear by A257,A60;

:: A259: for v0 holds  not c4,c2,c6 are_collinear or  not c1,c6,v0
::  are_collinear or c4,c2,v0 are_collinear by A258;

:: A260:  not c4,c2,c6 are_collinear or  not c1,c6,c7 are_collinear or
::  c4,c2,c7 are_collinear by A259;

:: A261:  not c4,c2,c6 are_collinear or c4,c2,c7 are_collinear by
::  A260,A89;

:: A262:  not c4,c2,c6 are_collinear by A261,A144;

:: A263: for v4,v3,v2 holds c5=c1 or  not v2,v3,c1 are_collinear or  not
::  v2,v3,c5 are_collinear or  not c1,c5,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A264: for v4,v3,v2 holds  not v2,v3,c1 are_collinear or  not v2,v3,c5
::  are_collinear or  not c1,c5,v4 are_collinear or v2,v3,v4
::  are_collinear by A263,A15;

:: A265: for v2,v1,v0 holds  not v0,v1,c1 are_collinear or  not v0,v1,c5
::  are_collinear or  not c1,c5,v2 are_collinear or v0,v1,v2
::  are_collinear by A264;

:: A266: for v2 holds  not c4,c2,c1 are_collinear or  not c4,c2,c5
::  are_collinear or  not c1,c5,v2 are_collinear or c4,c2,v2
::  are_collinear by A265;

:: A267: for v2 holds  not c4,c2,c5 are_collinear or  not c1,c5,v2
::  are_collinear or c4,c2,v2 are_collinear by A266,A60;

:: A268: for v0 holds  not c4,c2,c5 are_collinear or  not c1,c5,v0
::  are_collinear or c4,c2,v0 are_collinear by A267;

:: A269:  not c4,c2,c5 are_collinear or  not c1,c5,c7 are_collinear or
::  c4,c2,c7 are_collinear by A268;

:: A270:  not c4,c2,c5 are_collinear or c4,c2,c7 are_collinear by
::  A269,A83;

:: A271:  not c4,c2,c5 are_collinear by A270,A144;

:: A272: c4,c2,c6 are_collinear or c2,c7,c5 are_collinear or c2,c7,c6
::  are_collinear or c3,c7,c5 are_collinear or c3,c7,c6 are_collinear or
::  c2,c3,c5 are_collinear or c2,c3,c6 are_collinear or c5,c6,c2
::  are_collinear by A271,A253;

:: A273: c2,c7,c5 are_collinear or c2,c7,c6 are_collinear or c3,c7,c5
::  are_collinear or c3,c7,c6 are_collinear or c2,c3,c5 are_collinear or
::  c2,c3,c6 are_collinear or c5,c6,c2 are_collinear by A262,A272;

:: A274: for v4,v3,v2 holds c6=c5 or  not v2,v3,c5 are_collinear or  not
::  v2,v3,c6 are_collinear or  not c5,c6,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A275: for v4,v3,v2 holds  not v2,v3,c5 are_collinear or  not v2,v3,c6
::  are_collinear or  not c5,c6,v4 are_collinear or v2,v3,v4
::  are_collinear by A274,A17;

:: A276: for v2,v1,v0 holds  not v0,v1,c5 are_collinear or  not v0,v1,c6
::  are_collinear or  not c5,c6,v2 are_collinear or v0,v1,v2
::  are_collinear by A275;

:: A277: for v2 holds  not c7,c1,c5 are_collinear or  not c7,c1,c6
::  are_collinear or  not c5,c6,v2 are_collinear or c7,c1,v2
::  are_collinear by A276;

:: A278: for v2 holds  not c7,c1,c6 are_collinear or  not c5,c6,v2
::  are_collinear or c7,c1,v2 are_collinear by A277,A85;

:: A279: for v0 holds  not c7,c1,c6 are_collinear or  not c5,c6,v0
::  are_collinear or c7,c1,v0 are_collinear by A278;

:: A280: for v0 holds  not c7,c1,c6 are_collinear or  not c5,c6,v0
::  are_collinear or c7,c1,v0 are_collinear by A279;

:: A281: for v0 holds  not c5,c6,v0 are_collinear or c7,c1,v0
::  are_collinear by A280,A91;

:: A282:  not c5,c6,c2 are_collinear or c7,c1,c2 are_collinear by A281;

:: A283:  not c5,c6,c2 are_collinear by A282,A157;

:: A284: c2,c7,c5 are_collinear or c2,c7,c6 are_collinear or c3,c7,c5
::  are_collinear or c3,c7,c6 are_collinear or c2,c3,c5 are_collinear or
::  c2,c3,c6 are_collinear by A283,A273;

:: A285:  not c1,c4,c3 are_collinear or c1,c2,c3 are_collinear by A58;

:: A286: c1,c2,c3 are_collinear by A285,A22;

:: A287: for v4,v3,v2 holds c7=c5 or  not v2,v3,c5 are_collinear or  not
::  v2,v3,c7 are_collinear or  not c5,c7,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A288: for v4,v3,v2 holds  not v2,v3,c5 are_collinear or  not v2,v3,c7
::  are_collinear or  not c5,c7,v4 are_collinear or v2,v3,v4
::  are_collinear by A287,A18;

:: A289: for v2,v1,v0 holds  not v0,v1,c5 are_collinear or  not v0,v1,c7
::  are_collinear or  not c5,c7,v2 are_collinear or v0,v1,v2
::  are_collinear by A288;

:: A290: for v2,v100 holds  not v100,c7,c5 are_collinear or  not
::  v100,c7,c7 are_collinear or  not c5,c7,v2 are_collinear or v100,c7,v2
::  are_collinear by A289;

:: A291: for v100 holds v100,c7,c7 are_collinear by A44;

:: A292: for v2,v100 holds  not v100,c7,c5 are_collinear or  not
::  c5,c7,v2 are_collinear or v100,c7,v2 are_collinear
:: proof let v2,v100;
::  not v100,c7,c5 are_collinear or  not v100,c7,c7 are_collinear or 
::  not c5,c7,v2 are_collinear or v100,c7,v2 are_collinear by A290;
:: hence thesis by A291;
:: end;

:: A293: for v1,v0 holds  not v0,c7,c5 are_collinear or  not c5,c7,v1
::  are_collinear or v0,c7,v1 are_collinear by A292;

:: A294: for v0 holds  not v0,c7,c5 are_collinear or  not c5,c7,c1
::  are_collinear or v0,c7,c1 are_collinear by A293;

:: A295: for v0 holds  not v0,c7,c5 are_collinear or v0,c7,c1
::  are_collinear by A294,A210;

:: A296:  not c3,c7,c5 are_collinear or c3,c7,c1 are_collinear by A295;

:: A297:  not c3,c7,c5 are_collinear by A296,A208;

:: A298: for v4,v3,v2 holds c6=c7 or  not v2,v3,c7 are_collinear or  not
::  v2,v3,c6 are_collinear or  not c7,c6,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A299:  not c6=c7 by A19;

:: A300: for v4,v3,v2 holds  not v2,v3,c7 are_collinear or  not v2,v3,c6
::  are_collinear or  not c7,c6,v4 are_collinear or v2,v3,v4
::  are_collinear by A298,A299;

:: A301: for v2,v1,v0 holds  not v0,v1,c7 are_collinear or  not v0,v1,c6
::  are_collinear or  not c7,c6,v2 are_collinear or v0,v1,v2
::  are_collinear by A300;

:: A302: for v2,v100 holds  not v100,c7,c7 are_collinear or  not
::  v100,c7,c6 are_collinear or  not c7,c6,v2 are_collinear or v100,c7,v2
::  are_collinear by A301;

:: A303: for v100 holds v100,c7,c7 are_collinear by A44;

:: A304: for v2,v100 holds  not v100,c7,c6 are_collinear or  not
::  c7,c6,v2 are_collinear or v100,c7,v2 are_collinear
:: proof let v2,v100;
::  not v100,c7,c7 are_collinear or  not v100,c7,c6 are_collinear or 
::  not c7,c6,v2 are_collinear or v100,c7,v2 are_collinear by A302;
:: hence thesis by A303;
:: end;

:: A305: for v1,v0 holds  not v0,c7,c6 are_collinear or  not c7,c6,v1
::  are_collinear or v0,c7,v1 are_collinear by A304;

:: A306: for v0 holds  not v0,c7,c6 are_collinear or  not c7,c6,c1
::  are_collinear or v0,c7,c1 are_collinear by A305;

:: A307: for v0 holds  not v0,c7,c6 are_collinear or v0,c7,c1
::  are_collinear by A306,A87;

:: A308:  not c3,c7,c6 are_collinear or c3,c7,c1 are_collinear by A307;

:: A309:  not c3,c7,c6 are_collinear by A308,A208;

:: A310: c2,c7,c5 are_collinear or c2,c7,c6 are_collinear or c3,c7,c6
::  are_collinear or c2,c3,c5 are_collinear or c2,c3,c6 are_collinear by
::  A297,A284;

:: A311: c2,c7,c5 are_collinear or c2,c7,c6 are_collinear or c2,c3,c5
::  are_collinear or c2,c3,c6 are_collinear by A309,A310;

:: A312: for v4,v3,v2 holds c3=c2 or  not v2,v3,c2 are_collinear or  not
::  v2,v3,c3 are_collinear or  not c2,c3,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A313: for v4,v3,v2 holds  not v2,v3,c2 are_collinear or  not v2,v3,c3
::  are_collinear or  not c2,c3,v4 are_collinear or v2,v3,v4
::  are_collinear by A312,A12;

:: A314: for v2,v1,v0 holds  not v0,v1,c2 are_collinear or  not v0,v1,c3
::  are_collinear or  not c2,c3,v2 are_collinear or v0,v1,v2
::  are_collinear by A313;

:: A315: for v2 holds  not c4,c1,c2 are_collinear or  not c4,c1,c3
::  are_collinear or  not c2,c3,v2 are_collinear or c4,c1,v2
::  are_collinear by A314;

:: A316: for v2 holds  not c4,c1,c3 are_collinear or  not c2,c3,v2
::  are_collinear or c4,c1,v2 are_collinear by A315,A64;

:: A317: for v0 holds  not c4,c1,c3 are_collinear or  not c2,c3,v0
::  are_collinear or c4,c1,v0 are_collinear by A316;

:: A318: for v0 holds  not c4,c1,c3 are_collinear or  not c2,c3,v0
::  are_collinear or c4,c1,v0 are_collinear by A317;

:: A319: for v0 holds  not c2,c3,v0 are_collinear or c4,c1,v0
::  are_collinear by A318,A68;

:: A320:  not c2,c3,c5 are_collinear or c4,c1,c5 are_collinear by A319;

:: A321:  not c2,c3,c5 are_collinear by A320,A221;

:: A322: c2,c7,c5 are_collinear or c2,c7,c6 are_collinear or c2,c3,c6
::  are_collinear by A321,A311;

:: A323:  not c1,c2,c3 are_collinear or c2,c3,c1 are_collinear by A7;

:: A324: c2,c3,c1 are_collinear by A286,A323;

:: A325: for v4,v3,v2 holds c7=c6 or  not v2,v3,c6 are_collinear or  not
::  v2,v3,c7 are_collinear or  not c6,c7,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A326: for v4,v3,v2 holds  not v2,v3,c6 are_collinear or  not v2,v3,c7
::  are_collinear or  not c6,c7,v4 are_collinear or v2,v3,v4
::  are_collinear by A325,A19;

:: A327: for v2,v1,v0 holds  not v0,v1,c6 are_collinear or  not v0,v1,c7
::  are_collinear or  not c6,c7,v2 are_collinear or v0,v1,v2
::  are_collinear by A326;

:: A328: for v2,v100 holds  not v100,c7,c6 are_collinear or  not
::  v100,c7,c7 are_collinear or  not c6,c7,v2 are_collinear or v100,c7,v2
::  are_collinear by A327;

:: A329: for v100 holds v100,c7,c7 are_collinear by A44;

:: A330: for v2,v100 holds  not v100,c7,c6 are_collinear or  not
::  c6,c7,v2 are_collinear or v100,c7,v2 are_collinear
:: proof let v2,v100;
::  not v100,c7,c6 are_collinear or  not v100,c7,c7 are_collinear or 
::  not c6,c7,v2 are_collinear or v100,c7,v2 are_collinear by A328;
:: hence thesis by A329;
:: end;

:: A331: for v1,v0 holds  not v0,c7,c6 are_collinear or  not c6,c7,v1
::  are_collinear or v0,c7,v1 are_collinear by A330;

:: A332: for v0 holds  not v0,c7,c6 are_collinear or  not c6,c7,c1
::  are_collinear or v0,c7,c1 are_collinear by A331;

:: A333: for v0 holds  not v0,c7,c6 are_collinear or v0,c7,c1
::  are_collinear by A332,A225;

:: A334:  not c2,c7,c6 are_collinear or c2,c7,c1 are_collinear by A333;

:: A335:  not c2,c7,c6 are_collinear by A334,A233;

:: A336: for v4,v3,v2 holds c7=c5 or  not v2,v3,c5 are_collinear or  not
::  v2,v3,c7 are_collinear or  not c5,c7,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A337: for v4,v3,v2 holds  not v2,v3,c5 are_collinear or  not v2,v3,c7
::  are_collinear or  not c5,c7,v4 are_collinear or v2,v3,v4
::  are_collinear by A336,A18;

:: A338: for v2,v1,v0 holds  not v0,v1,c5 are_collinear or  not v0,v1,c7
::  are_collinear or  not c5,c7,v2 are_collinear or v0,v1,v2
::  are_collinear by A337;

:: A339: for v2,v100 holds  not v100,c7,c5 are_collinear or  not
::  v100,c7,c7 are_collinear or  not c5,c7,v2 are_collinear or v100,c7,v2
::  are_collinear by A338;

:: A340: for v100 holds v100,c7,c7 are_collinear by A44;

:: A341: for v2,v100 holds  not v100,c7,c5 are_collinear or  not
::  c5,c7,v2 are_collinear or v100,c7,v2 are_collinear
:: proof let v2,v100;
::  not v100,c7,c5 are_collinear or  not v100,c7,c7 are_collinear or 
::  not c5,c7,v2 are_collinear or v100,c7,v2 are_collinear by A339;
:: hence thesis by A340;
:: end;

:: A342: for v1,v0 holds  not v0,c7,c5 are_collinear or  not c5,c7,v1
::  are_collinear or v0,c7,v1 are_collinear by A341;

:: A343: for v0 holds  not v0,c7,c5 are_collinear or  not c5,c7,c1
::  are_collinear or v0,c7,c1 are_collinear by A342;

:: A344: for v0 holds  not v0,c7,c5 are_collinear or v0,c7,c1
::  are_collinear by A343,A210;

:: A345:  not c2,c7,c5 are_collinear or c2,c7,c1 are_collinear by A344;

:: A346:  not c2,c7,c5 are_collinear by A345,A233;

:: A347: c2,c7,c6 are_collinear or c2,c3,c6 are_collinear by A346,A322;

:: A348: c2,c3,c6 are_collinear by A335,A347;

:: A349: for v4,v3,v2 holds c1=c6 or  not v2,v3,c6 are_collinear or  not
::  v2,v3,c1 are_collinear or  not c6,c1,v4 are_collinear or v2,v3,v4
::  are_collinear by A9;

:: A350:  not c1=c6 by A16;

:: A351: for v4,v3,v2 holds  not v2,v3,c6 are_collinear or  not v2,v3,c1
::  are_collinear or  not c6,c1,v4 are_collinear or v2,v3,v4
::  are_collinear by A349,A350;

:: A352: for v2,v1,v0 holds  not v0,v1,c6 are_collinear or  not v0,v1,c1
::  are_collinear or  not c6,c1,v2 are_collinear or v0,v1,v2
::  are_collinear by A351;

:: A353: for v2 holds  not c2,c3,c6 are_collinear or  not c2,c3,c1
::  are_collinear or  not c6,c1,v2 are_collinear or c2,c3,v2
::  are_collinear by A352;

:: A354: for v2 holds  not c2,c3,c6 are_collinear or  not c6,c1,v2
::  are_collinear or c2,c3,v2 are_collinear by A353,A324;

:: A355: for v0 holds  not c2,c3,c6 are_collinear or  not c6,c1,v0
::  are_collinear or c2,c3,v0 are_collinear by A354;

:: A356:  not c2,c3,c6 are_collinear or  not c6,c1,c7 are_collinear or
::  c2,c3,c7 are_collinear by A355;

:: A357:  not c2,c3,c6 are_collinear or c2,c3,c7 are_collinear by
::  A356,A223;

:: A358:  not c2,c3,c6 are_collinear by A357,A78;

:: thus A359: contradiction by A348,A358;

:: end;

:: On Fuzzy Negations and Laws of Contraposition. Lattice of Fuzzy Negations
::  by Adam Grabowski
:: 
:: Received November 21, 2023
:: Copyright (c) 2023 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, XXREAL_1, REAL_1, XXREAL_0, FUZIMPL1, SUBSET_1, CARD_1,
      TARSKI, ARYTM_1, ARYTM_3, POWER, FUNCT_1, XBOOLE_0, RELAT_1, BINOP_1,
      FUZIMPL2, ORDINAL2, VALUED_0, FUNCT_2, FUZIMPL3, ZFMISC_1, BORSUK_1,
      OPOSET_1, FUZIMPL4, LFUZZY_0, LATTICES, WAYBEL_0, REWRITE1, LATTICE2,
      FUNCT_7, JGRAPH_2, TOPMETR, TREAL_1, VALUED_1, STRUCT_0, QC_LANG1,
      FUZZY_1, YELLOW_0, NEWTON, CAT_1, RELAT_2, EQREL_1, REAL_LAT;
 notations TARSKI, XBOOLE_0, SUBSET_1, XCMPLX_0, XXREAL_0, NUMBERS, BINOP_1,
      ZFMISC_1, VALUED_0, XREAL_0, RELAT_1, FUNCT_1, FUNCT_2, FUNCT_3, RCOMP_1,
      PARTFUN1, MEMBERED, POWER, FCONT_1, FUNCSDOM, STRUCT_0, PRE_TOPC,
      ORDERS_2, BORSUK_1, LATTICES, LATTICE2, LATTICE3, LFUZZY_0, EUCLID,
      TOPMETR, TMAP_1, TREAL_1, REAL_LAT, FUZIMPL1, FUZIMPL2, FUZIMPL3,
      YELLOW_0, YELLOW_1, WAYBEL_0, WAYBEL_1, WAYBEL_3, COUSIN2, FUZZY_1;
 constructors SEQ_4, TOPMETR, PREPOWER, POWER, FUZIMPL1, FUZIMPL2, FUNCT_3,
      FUZIMPL3, LFUZZY_0, BORSUK_1, FCONT_1, TREAL_1, TMAP_1, ORDERS_1,
      ORDERS_2, XXREAL_0, REAL_LAT, FUNCSDOM, STRUCT_0, WAYBEL_1, YELLOW_0,
      YELLOW_1, COUSIN2, LATTICE3, ORDERS_3, WAYBEL_3, RELSET_1, FUZZY_1,
      SETFAM_1, MEMBERED, XXREAL_2, BINOP_1, VALUED_0;
 registrations XBOOLE_0, RELSET_1, XXREAL_0, XREAL_0, MEMBERED, ORDINAL1,
      FUZNORM1, VALUED_0, NUMBERS, FUNCT_2, FOMODEL0, FUNCT_1, RELAT_1,
      FUZIMPL2, BORSUK_1, FUZIMPL1, FUZIMPL3, LFUZZY_0, XXREAL_1, STRUCT_0,
      YELLOW_0, YELLOW_1, WAYBEL_0, WAYBEL_1, SUBSET_1, REALSET1, ORDERS_1,
      ORDERS_2, PRE_TOPC, TOPS_1, XXREAL_2, EUCLID, TOPMETR, LATTICE3,
      WAYBEL_3, FUNCOP_1;
 requirements REAL, NUMERALS, BOOLE, SUBSET, ARITHM;


begin :: Laws of Contraposition
:: Definition 1.5.1

registration
  cluster decreasing for Fuzzy_Negation;
end;

definition let N be Fuzzy_Negation;
  let I be BinOp of [.0,1.];  :: note in Baczynski it should be FI
  attr I is N-satisfying_CP means
:: FUZIMPL4:def 1
    for x,y being Element of [.0,1.] holds
      I.(x,y) = I.(N.y,N.x);
end;

definition
  let N be Fuzzy_Negation;
  let I be BinOp of [.0,1.];  :: note in Baczynski it should be FI
  attr I is N-satisfying_L-CP means
:: FUZIMPL4:def 2
    for x,y being Element of [.0,1.] holds
      I.(N.x,y) = I.(N.y,x);
end;

definition
  let N be Fuzzy_Negation;
  let I be BinOp of [.0,1.];  :: note in Baczynski it should be FI
  attr I is N-satisfying_R-CP means
:: FUZIMPL4:def 3
    for x,y being Element of [.0,1.] holds
      I.(x,N.y) = I.(y,N.x);
end;

begin ::

theorem :: FUZIMPL4:1
  N_CC = AffineMap (-1,1)|[.0,1.];

registration
  cluster N_CC -> continuous;
end;

registration
  cluster N_CC -> negation-strong;
end;

registration
  cluster negation-strict for Fuzzy_Negation;
  cluster negation-strong for Fuzzy_Negation;
end;

:: Every strong negation is strict

:: if N is negation-strict, then it is decreasing, so N is one-to-one

registration
  cluster satisfying_(N3) -> decreasing for Fuzzy_Negation;
  cluster decreasing -> satisfying_(N3) for Fuzzy_Negation;
end;

:: cluster FINSEQ_1 for increasing

registration
  cluster -> REAL-defined real-valued for UnOp of [.0,1.];
end;

registration
  cluster REAL-defined decreasing -> one-to-one for real-valued Function;
end;

registration
  cluster decreasing -> one-to-one for UnOp of [.0,1.];
end;

registration
  cluster -> non-increasing for Fuzzy_Negation;
end;

registration
  cluster negation-strict -> one-to-one for Fuzzy_Negation;
end;

theorem :: FUZIMPL4:2
  for R being Function st R~ is Function holds
    R is one-to-one;

theorem :: FUZIMPL4:3
  for N1,N2 being Fuzzy_Negation st N1~ = N2 holds
    N1 is one-to-one;

theorem :: FUZIMPL4:4
  for N1,N2 being Fuzzy_Negation st N1~ = N2 holds
    N1 is onto;

:: Proposition 1.5.2
theorem :: FUZIMPL4:5
  for I being BinOp of [.0,1.],
      N being negation-strict Fuzzy_Negation,
      N1 being Fuzzy_Negation st N~ = N1 holds
   I is N-satisfying_L-CP iff
     I is N1-satisfying_R-CP;

begin

:: Proposition 1.5.3 (i) => (ii)
theorem :: FUZIMPL4:6
  for I being BinOp of [.0,1.],
      N being negation-strong Fuzzy_Negation holds
   I is N-satisfying_CP implies
     I is N-satisfying_L-CP;

:: Proposition 1.5.3 (ii) => (iii)
theorem :: FUZIMPL4:7
  for I being BinOp of [.0,1.],
      N being negation-strong Fuzzy_Negation holds
   I is N-satisfying_L-CP implies
     I is N-satisfying_R-CP;

:: Proposition 1.5.3 (iii) => (i)
theorem :: FUZIMPL4:8
  for I being BinOp of [.0,1.],
      N being negation-strong Fuzzy_Negation holds
   I is N-satisfying_R-CP implies
     I is N-satisfying_CP;

:: Proposition 1.5.3 (i) <=> (ii)
theorem :: FUZIMPL4:9
  for I being BinOp of [.0,1.],
      N being negation-strong Fuzzy_Negation holds
   I is N-satisfying_CP iff
     I is N-satisfying_L-CP;

:: Proposition 1.5.3 (i) <=> (iii)
theorem :: FUZIMPL4:10
  for I being BinOp of [.0,1.],
      N being negation-strong Fuzzy_Negation holds
   I is N-satisfying_CP iff
     I is N-satisfying_R-CP;

:: Lemma 1.5.4 (i)
theorem :: FUZIMPL4:11
  for I being BinOp of [.0,1.],    :: for Fuzzy_Implication it is trivial
      N being Fuzzy_Negation st
    I is satisfying_(I1) N-satisfying_CP holds
      I is satisfying_(I2);

:: Lemma 1.5.4 (ii)
theorem :: FUZIMPL4:12
  for I being BinOp of [.0,1.],    :: for Fuzzy_Implication it is trivial
      N being Fuzzy_Negation st
    I is satisfying_(I2) N-satisfying_CP holds
      I is satisfying_(I1);

:: Lemma 1.5.4 (iii)
theorem :: FUZIMPL4:13
  for I being BinOp of [.0,1.],    :: for Fuzzy_Implication it is trivial
      N being Fuzzy_Negation st
    I is satisfying_(LB) N-satisfying_CP holds
      I is satisfying_(RB);

:: Lemma 1.5.4 (iv)
theorem :: FUZIMPL4:14
  for I being BinOp of [.0,1.],    :: for Fuzzy_Implication it is trivial
      N being Fuzzy_Negation st
    I is satisfying_(RB) N-satisfying_CP holds
      I is satisfying_(LB);

:: Lemma 1.5.4 (v) a
theorem :: FUZIMPL4:15
  for I being BinOp of [.0,1.],    :: for Fuzzy_Implication it is trivial
      N being Fuzzy_Negation st
    I is satisfying_(NP) N-satisfying_CP holds
      N = FNegation I & FNegation I is negation-strong;

:: Lemma 1.5.4 (v) b
theorem :: FUZIMPL4:16
  for I being BinOp of [.0,1.],    :: for Fuzzy_Implication it is trivial
      N being Fuzzy_Negation st
    I is satisfying_(NP) N-satisfying_CP holds
      I is satisfying_(I3) satisfying_(I4) satisfying_(I5);

:: Corollary 1.5.5
theorem :: FUZIMPL4:17
  for I being BinOp of [.0,1.] st
    I is satisfying_(NP) holds
      FNegation I is not negation-strong implies
        for N being Fuzzy_Negation holds
          I is not N-satisfying_CP;

:: Lemma 1.5.6 (i)
theorem :: FUZIMPL4:18
  for I being BinOp of [.0,1.],
      N being negation-strong Fuzzy_Negation st
    N = FNegation I holds
     I is N-satisfying_CP implies
       I is satisfying_(NP);

:: Lemma 1.5.6 (ii)
theorem :: FUZIMPL4:19
  for I being BinOp of [.0,1.],
      N being negation-strong Fuzzy_Negation st
      N = FNegation I holds
     I is satisfying_(EP) implies
       I is satisfying_(I3) satisfying_(I4) satisfying_(I5)
         satisfying_(NP) N-satisfying_CP;

theorem :: FUZIMPL4:20  :: Corollary 1.5.7 (i)
  for I being BinOp of [.0,1.],
      N being Fuzzy_Negation st
    I is N-satisfying_CP holds
      I is satisfying_(I1) iff I is satisfying_(I2);

theorem :: FUZIMPL4:21 :: Corollary 1.5.7 (ii)
  for I being BinOp of [.0,1.],
      N being Fuzzy_Negation st
    I is N-satisfying_CP holds
      I is satisfying_(LB) iff I is satisfying_(RB);

theorem :: FUZIMPL4:22 :: Corollary 1.5.7 (iii)
  for I being BinOp of [.0,1.],
      N being Fuzzy_Negation st
    I is N-satisfying_CP holds
      N is negation-strong implies
      (I is satisfying_(NP) iff N = FNegation I);

theorem :: FUZIMPL4:23 :: Corollary 1.5.8
  for I being BinOp of [.0,1.],
      N being Fuzzy_Negation st
    I is N-satisfying_CP satisfying_(I1) satisfying_(NP) holds
      I in FI & FNegation I = N & N is negation-strong;

theorem :: FUZIMPL4:24 :: Corollary 1.5.9
  for I being satisfying_(NP) satisfying_(EP) Fuzzy_Implication holds
    FNegation I is negation-strong iff
      I is (FNegation I)-satisfying_CP;

begin :: Some Further Examples of Fuzzy Implications

:: Example 1.5.10
:: (ii) I_4

definition :: Example 1.5.10 (i) - I_3 by Drewniak
  func I_I3 -> BinOp of [.0,1.] means
:: FUZIMPL4:def 4
    for x,y being Element of [.0,1.] holds
      (x = 0 or y <> 0 implies it.(x,y) = 1) &
      (x <> 0 & y = 0 implies it.(x,y) = 0);
end;

registration
  cluster I_I3 -> decreasing_on_1st increasing_on_2nd
    00-dominant 11-dominant 10-weak;
end;

theorem :: FUZIMPL4:25
  FNegation I_I3 = NegationD1;

registration
  cluster I_I3 -> satisfying_(EP) non satisfying_(NP);
end;

registration
  cluster I_I3 -> (FNegation I_I3)-satisfying_CP;
end;

definition
  func I_I4 -> BinOp of [.0,1.] means
:: FUZIMPL4:def 5
    for x,y being Element of [.0,1.] holds
      (x <> 1 or y = 1 implies it.(x,y) = 1) &
      (x = 1 & y <> 1 implies it.(x,y) = 0);
end;

registration
  cluster I_I4 -> decreasing_on_1st increasing_on_2nd
    00-dominant 11-dominant 10-weak;
end;

theorem :: FUZIMPL4:26
  FNegation I_I4 = NegationD2;

registration
  cluster I_I4 -> satisfying_(EP) non satisfying_(NP);
end;

registration
  cluster I_I4 -> (FNegation I_I4)-satisfying_CP;
end;

:: Attribute satisfying CP wrt the natural negation

definition let I be Fuzzy_Implication;
  attr I is satisfying_CP means
:: FUZIMPL4:def 6
    I is (FNegation I)-satisfying_CP;
  attr I is satisfying_L-CP means
:: FUZIMPL4:def 7
    I is (FNegation I)-satisfying_L-CP;
  attr I is satisfying_R-CP means
:: FUZIMPL4:def 8
    I is (FNegation I)-satisfying_R-CP;
end;

registration
  cluster I_LK -> (N_CC)-satisfying_L-CP (N_CC)-satisfying_R-CP
                  (N_CC)-satisfying_CP;
end;

registration
  cluster I_LK -> satisfying_L-CP satisfying_R-CP satisfying_CP;
end;

registration
  cluster I_GD -> (NegationD1)-satisfying_R-CP;
end;

registration
  cluster I_GD -> satisfying_R-CP;
end;

registration
  cluster I_RC -> (N_CC)-satisfying_CP
                  (N_CC)-satisfying_L-CP (N_CC)-satisfying_R-CP;
end;

registration
  cluster I_RC -> satisfying_CP satisfying_L-CP satisfying_R-CP;
end;

registration
  cluster I_KD -> (N_CC)-satisfying_CP;
end;

registration
  cluster I_KD -> (N_CC)-satisfying_L-CP;
end;

registration
  cluster I_KD -> (N_CC)-satisfying_R-CP;
end;

registration
  cluster I_KD -> satisfying_CP satisfying_L-CP satisfying_R-CP;
end;

registration
  cluster I_GG -> (NegationD1)-satisfying_R-CP;
end;

registration
  cluster I_GG -> satisfying_R-CP;
end;

theorem :: FUZIMPL4:27
  I_RS is (N_CC)-satisfying_L-CP;

registration
  cluster I_RS -> (N_CC)-satisfying_CP (N_CC)-satisfying_L-CP
                   (N_CC)-satisfying_R-CP;
end;

theorem :: FUZIMPL4:28
  for N being decreasing Fuzzy_Negation holds
    I_RS is N-satisfying_CP;

registration
  cluster I_YG -> (NegationD1)-satisfying_R-CP;
end;

registration
  cluster I_YG -> satisfying_R-CP;
end;

registration
  cluster I_WB -> (NegationD2)-satisfying_R-CP;
end;

registration
  cluster I_WB -> satisfying_R-CP;
end;

registration
  cluster I_FD -> (N_CC)-satisfying_CP
                  (N_CC)-satisfying_L-CP (N_CC)-satisfying_R-CP;
end;

registration
  cluster I_FD -> satisfying_CP satisfying_L-CP satisfying_R-CP;
end;

begin :: Fuzzy Lattice Revisited

theorem :: FUZIMPL4:29 :: Theorem 1.4.3, just for the illustration
  FuzzyLattice [.0,1.] is complete Heyting distributive LATTICE;

theorem :: FUZIMPL4:30
  the set of all f where f is Fuzzy_Negation c= Funcs ([.0,1.],[.0,1.]);

definition let N1,N2 be Fuzzy_Negation;
  func max (N1,N2) -> Fuzzy_Negation means
:: FUZIMPL4:def 9
    ex f,g being Function of [.0,1.], REAL st
     f = N1 & g = N2 & it = max (f,g);
  func min (N1,N2) -> Fuzzy_Negation means
:: FUZIMPL4:def 10
    ex f,g being Function of [.0,1.], REAL st
     f = N1 & g = N2 & it = min (f,g);
end;

definition
  func Fuzzy_Negations -> strict full SubRelStr of
       FuzzyLattice [.0,1.] means
:: FUZIMPL4:def 11
    the carrier of it = the set of all f where f is Fuzzy_Negation;
end;

registration
  cluster Fuzzy_Negations -> non empty reflexive transitive antisymmetric;
end;

theorem :: FUZIMPL4:31
  for f,g being Fuzzy_Negation holds
    max(f,g) = (maxfuncreal [.0,1.]).(f,g);

theorem :: FUZIMPL4:32
  for f,g being Fuzzy_Negation,
      ff, gg being Membership_Func of [.0,1.] st
    f = ff & g = gg holds
    max(f,g) = max (ff,gg);

theorem :: FUZIMPL4:33
  for f,g being Fuzzy_Negation,
      ff, gg being Membership_Func of [.0,1.] st
    f = ff & g = gg holds
    min (f,g) = min (ff,gg);

theorem :: FUZIMPL4:34
  for f,g being Fuzzy_Negation holds
    min(f,g) = (minfuncreal [.0,1.]).(f,g);

::: The following formalize more or less the same notions of max, remove:
::: func max from FUZZY_1:def 4
::: func max from COUSIN2
::: func maxfuncreal from REAL_LAT
::: Also dual notions are repeated

definition let L be non empty 1-sorted;
  let a,b be Element of L;
  redefine func {a,b} -> Subset of L;
end;

registration
  cluster Fuzzy_Negations -> join-inheriting;
  cluster Fuzzy_Negations -> meet-inheriting;
end;

theorem :: FUZIMPL4:35
  for N1,N2 being Element of Fuzzy_Negations,
      NN1,NN2 being Fuzzy_Negation st N1 = NN1 & N2 = NN2 holds
    N1 "\/" N2 = max (NN1,NN2);

theorem :: FUZIMPL4:36
  for N1,N2 being Element of Fuzzy_Negations,
      NN1,NN2 being Fuzzy_Negation st N1 = NN1 & N2 = NN2 holds
    N1 "/\" N2 = min (NN1,NN2);

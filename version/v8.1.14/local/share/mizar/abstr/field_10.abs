:: Splitting Fields for the Rational Polynomials X^2-2, X^2+X+1, X^3-1, and 
:: X^3-2
::  by Christoph Schwarzweller and Sara Burgoa
:: 
:: Received April 30, 2022
:: Copyright (c) 2022-2023 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies ARYTM_3, VECTSP_1, TARSKI, ABIAN, STRUCT_0, SUBSET_1, SUPINF_2,
      NAT_1, MESFUNC1, C0SP1, FUNCT_4, CARD_3, POLYNOM1, POLYNOM2, POLYNOM3,
      RLVECT_3, EC_PF_1, HURWITZ, FINSEQ_1, PREPOWER, FUNCT_1, RELAT_1, CARD_1,
      SQUARE_1, XBOOLE_0, NUMBERS, POLYNOM5, GROUP_1, COMPTRIG, RAT_1,
      AFINSQ_1, GLIB_000, FDIFF_1, CAT_1, YELLOW_8, RATFUNC1, RING_2, ALGNUM_1,
      ARYTM_1, FOMODEL1, FINSET_1, NEWTON, XXREAL_0, GAUSSINT, COMPLFLD,
      RING_3, RING_5, FIELD_6, XCMPLX_0, FIELD_8, REALALG2, INT_1, FIELD_4,
      FUNCT_7, COMPLEX1, FIELD_7, ALGSEQ_1, FIELD_9, FIELD_10, RLVECT_2,
      ZFMISC_1, ALGSTR_0, REALSET1, ORDINAL4;
 notations TARSKI, XBOOLE_0, SUBSET_1, RELAT_1, RELSET_1, REALSET1, ZFMISC_1,
      FUNCT_1, ORDINAL1, FUNCT_2, STRUCT_0, NUMBERS, CARD_1, ENUMSET1, BINOP_1,
      XCMPLX_0, XXREAL_0, NAT_1, NAT_D, SQUARE_1, COMPTRIG, INT_1, FUNCT_7,
      FINSET_1, POLYNOM4, ALGSEQ_1, FINSEQ_1, FINSEQ_4, ABIAN, POLYNOM3, RAT_1,
      POLYNOM5, NEWTON, PREPOWER, GROUP_1, BINOM, O_RING_1, COMPLEX1, ALGSTR_0,
      RLVECT_1, HURWITZ, VECTSP_1, VECTSP_6, VECTSP_7, C0SP1, EC_PF_1,
      RATFUNC1, GAUSSINT, COMPLFLD, RING_2, RING_3, RING_4, RING_5, ALGNUM_1,
      FIELD_4, FIELD_5, FIELD_6, FIELD_7, FIELD_8, FIELD_9;
 constructors BINOP_1, REAL_1, FINSOP_1, POLYNOM3, FUNCT_4, ORDINAL1, NAT_1,
      ALGSTR_0, POLYNOM4, XBOOLE_0, RELSET_1, ARYTM_3, RLVECT_1, ABIAN,
      FUNCT_7, FINSEQ_1, CARD_1, FINSET_1, GAUSSINT, RATFUNC1, O_RING_1, GCD_1,
      GROUP_1, GROUP_4, BINOM, MEMBERED, RING_3, FINSEQ_4, PREPOWER, REALSET1,
      EC_PF_1, ALGSEQ_1, RING_2, NEWTON, RING_4, FUNCOP_1, ALGNUM_1, SQUARE_1,
      POLYNOM5, POLYNOM1, VECTSP_7, VECTSP_6, RING_5, COMPLFLD, COMPLEX1,
      RAT_1, NAT_D, BINOP_2, INT_1, FIELD_4, FIELD_5, FIELD_6, FIELD_7,
      FIELD_8, FIELD_9;
 registrations XBOOLE_0, ORDINAL1, RELSET_1, FUNCOP_1, XCMPLX_0, XXREAL_0,
      XREAL_0, NAT_1, INT_1, MEMBERED, STRUCT_0, VECTSP_1, ALGSTR_1, POLYNOM4,
      SQUARE_1, RAT_1, REALSET1, RLVECT_1, FUNCT_1, CARD_1, NEWTON, FINSET_1,
      RATFUNC1, GAUSSINT, COMPLFLD, COMPLEX1, RING_4, RING_5, ABIAN, POLYNOM3,
      POLYNOM5, ALGNUM_1, FIELD_4, FIELD_5, FIELD_6, FIELD_7, FIELD_9;
 requirements NUMERALS, SUBSET, BOOLE, REAL, ARITHM;


begin :: Preliminaries

definition
let L be non empty doubleLoopStr;
let a,b,c be Element of L;
redefine func {a,b,c} -> Subset of L;
end;

registration
let i be Integer;
cluster i|^3 -> integer;
end;

registration
let i be even Integer;
cluster i|^3 -> even;
end;

registration
let i be odd Integer;
cluster i|^3 -> odd;
end;

theorem :: FIELD_10:1
for r,s being Complex holds (r * s) |^ 3 = (r |^ 3) * (s |^ 3);

theorem :: FIELD_10:2
for r being Rational holds r|^3 >= 0 iff r >= 0;

theorem :: FIELD_10:3
not ex r being Rational st r|^3 = 2;

registration
cluster 3-Root 2 -> non rational;
end;

theorem :: FIELD_10:4
for X1,X2 being finite set st X1 c= X2 & card X1 = card X2 holds X1 = X2;

registration
let F be Field;
cluster linear for Element of the carrier of Polynom-Ring F;
cluster non linear non constant for Element of the carrier of Polynom-Ring F;
end;

theorem :: FIELD_10:5
for F being Field
for p being Element of the carrier of Polynom-Ring F st deg p = 2
holds p is reducible iff p is with_roots;

theorem :: FIELD_10:6
for F being Field
for p being Element of the carrier of Polynom-Ring F st deg p = 3
holds p is reducible iff p is with_roots;


begin :: More on Field Extensions

registration
cluster F_Complex -> F_Rat-extending;
end;

registration
cluster F_Rat-membered for Element of F_Real;
cluster non F_Rat-membered for Element of F_Real;
cluster F_Real-membered for Element of F_Complex;
cluster non F_Real-membered for Element of F_Complex;
cluster F_Rat-membered for Element of F_Complex;
cluster non F_Rat-membered for Element of F_Complex;
end;

theorem :: FIELD_10:7
for F being Field,
    E being FieldExtension of F,
    K being E-extending FieldExtension of F
for p being Element of the carrier of Polynom-Ring F,
    q being Element of the carrier of Polynom-Ring E
st p = q holds Roots(K,p) = Roots(K,q);

theorem :: FIELD_10:8
for F being Field
for E being FieldExtension of F,
    K being F-extending FieldExtension of E
for a being Element of E,
    b being Element of K st b = a holds RAdj(F,{a}) = RAdj(F,{b});

theorem :: FIELD_10:9
for F being Field
for E being FieldExtension of F,
    K being F-extending FieldExtension of E
for a being F-algebraic Element of E,
    b being F-algebraic Element of K st b = a holds FAdj(F,{a}) = FAdj(F,{b});

theorem :: FIELD_10:10
for F being Field,
    E being FieldExtension of F,
    K being E-extending FieldExtension of F
for a being F-algebraic Element of E,
    b being F-algebraic Element of K st a = b holds MinPoly(a,F) = MinPoly(b,F)
;

theorem :: FIELD_10:11
for F being Field
for E being F-finite FieldExtension of F
for a being Element of E holds deg MinPoly(a,F) divides deg(E,F);

registration
let F be Field,
    E be FieldExtension of F;
let T1,T2 be Subset of E;
cluster FAdj(F,T1\/T2) -> FAdj(F,T1)-extending FAdj(F,T2)-extending;
end;

registration
let F be Field,
    E be FieldExtension of F;
let a,b be Element of E;
cluster FAdj(F,{a,b}) -> FAdj(F,{a})-extending FAdj(F,{b})-extending;
end;

registration
let F be Field,
    E be FieldExtension of F;
let a,b,c be Element of E;
cluster FAdj(F,{a,b,c}) -> FAdj(F,{a,b})-extending FAdj(F,{a,c})-extending
                           FAdj(F,{b,c})-extending;
end;


begin :: The Rational Polynomials X^2-2, X^3-1, X^2+X+1 and X^3-2

definition
func X^2-2 -> Element of the carrier of Polynom-Ring F_Rat equals
:: FIELD_10:def 1
  <%-(1.F_Rat+1.F_Rat),0.F_Rat,1.F_Rat%>;
func X^3-1 -> Element of the carrier of Polynom-Ring F_Rat equals
:: FIELD_10:def 2
  0_.(F_Rat)+*(0,-1)+*(3,1);
func X^3-2 -> Element of the carrier of Polynom-Ring F_Rat equals
:: FIELD_10:def 3
  0_.(F_Rat)+*(0,-2)+*(3,1);
func X^2+X+1 -> Element of the carrier of Polynom-Ring F_Rat equals
:: FIELD_10:def 4
  <%1.F_Rat,1.F_Rat,1.F_Rat%>;
end;

definition
func 2-Root(2) -> non zero Element of F_Real equals
:: FIELD_10:def 5
  sqrt 2;
func 3-Root(2) -> non zero Element of F_Real equals
:: FIELD_10:def 6
  3-Root 2;
func 2-CRoot(2) -> non zero Element of F_Complex equals
:: FIELD_10:def 7
  sqrt 2;
func 3-CRoot(2) -> non zero Element of F_Complex equals
:: FIELD_10:def 8
  3-Root 2;
func sqrt(-3) -> non zero Element of F_Complex equals
:: FIELD_10:def 9
  <i> * (sqrt 3);
func zeta -> non zero Element of F_Complex equals
:: FIELD_10:def 10
  (-1 + <i> * (sqrt 3)) / 2;
end;

registration
cluster X^2-2 -> monic purely_quadratic irreducible;
cluster X^3-2 -> monic non constant irreducible;
cluster X^3-1 -> monic non constant reducible;
cluster X^2+X+1 -> monic quadratic irreducible;
end;

registration
cluster 2-Root(2) -> non (F_Rat)-membered F_Rat-algebraic;
cluster 2-CRoot(2) -> non (F_Rat)-membered F_Rat-algebraic;
cluster 3-Root(2) -> non (F_Rat)-membered F_Rat-algebraic;
cluster 3-CRoot(2) -> non (F_Rat)-membered F_Rat-algebraic;
cluster zeta -> non (F_Real)-membered F_Rat-algebraic;
cluster zeta^2 -> non (F_Real)-membered F_Rat-algebraic;
end;

registration
cluster FAdj(F_Rat,{3-Root(2)}) -> (F_Rat)-finite;
cluster FAdj(F_Rat,{3-CRoot(2),zeta}) -> (F_Rat)-finite;
end;

registration
cluster F_Real -> FAdj(F_Rat,{2-Root(2)})-extending;
cluster F_Real -> FAdj(F_Rat,{3-Root(2)})-extending;
cluster F_Complex -> FAdj(F_Rat,{2-Root(2)})-extending;
cluster F_Complex -> FAdj(F_Rat,{3-Root(2)})-extending;
cluster F_Complex -> FAdj(F_Rat,{3-CRoot(2),zeta})-extending;
end;

theorem :: FIELD_10:12
zeta = (-1/2) + <i> * ((sqrt 3) / 2);

theorem :: FIELD_10:13
zeta^2 = (-1/2) - <i> * (sqrt 3) / 2;

theorem :: FIELD_10:14
zeta|^2 <> 1 & zeta|^3 = 1 & zeta|^2 = -zeta - 1;

theorem :: FIELD_10:15
zeta is CRoot of 3,1 & zeta^2 is CRoot of 3,1;

theorem :: FIELD_10:16
3-Root(2) |^ 3 = 2;

theorem :: FIELD_10:17
X^3-1 = X-(1.F_Rat) * X^2+X+1;

theorem :: FIELD_10:18
deg X^2-2 = 2 & deg X^3-2 = 3 & deg X^3-1 = 3 & deg X^2+X+1 = 2;

theorem :: FIELD_10:19
for x being Element of F_Rat holds eval(X^2-2,x) = x|^2 - 2;

theorem :: FIELD_10:20
for x being Element of F_Rat holds eval(X^3-1,x) = x|^3 - 1;

theorem :: FIELD_10:21
for x being Element of F_Rat holds eval(X^2+X+1,x) = x|^2 + x + 1;

theorem :: FIELD_10:22
for x being Element of F_Rat holds eval(X^3-2,x) = x|^3 - 2;

theorem :: FIELD_10:23
for r being Element of F_Real holds Ext_eval(X^2-2,r) = r|^2 - 2;

theorem :: FIELD_10:24
for z being Element of F_Complex holds Ext_eval(X^3-1,z) = z|^3 - 1;

theorem :: FIELD_10:25
for z being Element of F_Complex holds Ext_eval(X^2+X+1,z) = z|^2 + z + 1;

theorem :: FIELD_10:26
for z being Element of F_Complex holds Ext_eval(X^3-2,z) = z|^3 - 2;

theorem :: FIELD_10:27
for z being Element of the carrier of F_Complex holds
Ext_eval(X^3-1,z) = 0.F_Complex iff z is CRoot of 3,1;

theorem :: FIELD_10:28
Discriminant X^2+X+1 = -3;

theorem :: FIELD_10:29
FAdj(F_Rat,{zeta}) = FAdj(F_Rat,{sqrt(-3)});


begin :: A Splitting Field of X^2-2

theorem :: FIELD_10:30
MinPoly(2-Root(2),F_Rat) = X^2-2;

theorem :: FIELD_10:31
deg(FAdj(F_Rat,{2-Root(2)}),F_Rat) = 2;

theorem :: FIELD_10:32
{ 1, sqrt 2 } is Basis of VecSp(FAdj(F_Rat,{2-Root(2)}),F_Rat);

theorem :: FIELD_10:33
Roots X^2-2 = {};

theorem :: FIELD_10:34
not X^2-2 splits_in F_Rat;

theorem :: FIELD_10:35
Roots(F_Real,X^2-2) = {2-Root(2), -2-Root(2)};

theorem :: FIELD_10:36
X^2-2 = X-2-Root(2) * X+2-Root(2);

theorem :: FIELD_10:37
FAdj(F_Rat,{2-Root(2)}) is SplittingField of X^2-2;

theorem :: FIELD_10:38
not 3-Root(2) is Element of FAdj(F_Rat,{2-Root(2)});

theorem :: FIELD_10:39
not F_Real is SplittingField of X^2-2;

theorem :: FIELD_10:40
not F_Complex is SplittingField of X^2-2;


begin :: A Splitting Field of X^3-1 and X^2+X+1

theorem :: FIELD_10:41
Roots X^3-1 = {1};

theorem :: FIELD_10:42
Roots X^2+X+1 = {};

theorem :: FIELD_10:43
MinPoly(zeta,F_Rat) = X^2+X+1;

theorem :: FIELD_10:44
Roots(F_Complex,X^3-1) = {1, zeta, zeta^2};

theorem :: FIELD_10:45
Roots(F_Complex,X^2+X+1) = {zeta, zeta^2};

theorem :: FIELD_10:46
not X^3-1 splits_in F_Rat;

theorem :: FIELD_10:47
not X^3-1 splits_in F_Real;

theorem :: FIELD_10:48
not X^2+X+1 splits_in F_Rat;

theorem :: FIELD_10:49
not X^2+X+1 splits_in F_Real;

theorem :: FIELD_10:50
X^2+X+1 = X-zeta * X-(zeta^2);

theorem :: FIELD_10:51
X^3-1 = X-(1.F_Complex) * X-zeta * X-(zeta^2);

theorem :: FIELD_10:52
FAdj(F_Rat,{zeta}) is SplittingField of X^2+X+1;

theorem :: FIELD_10:53
FAdj(F_Rat,{zeta}) is SplittingField of X^3-1;

theorem :: FIELD_10:54
deg(FAdj(F_Rat,{zeta}),F_Rat) = 2;

theorem :: FIELD_10:55
{1, zeta} is Basis of VecSp(FAdj(F_Rat,{zeta}),F_Rat);

theorem :: FIELD_10:56
not sqrt 2 is Element of FAdj(F_Rat,{zeta});

theorem :: FIELD_10:57
not F_Complex is SplittingField of X^2+X+1;

theorem :: FIELD_10:58
not F_Complex is SplittingField of X^3-1;


begin :: A Splitting Field of X^3-2

theorem :: FIELD_10:59
MinPoly(3-Root(2),F_Rat) = X^3-2;

theorem :: FIELD_10:60
deg(FAdj(F_Rat,{3-Root(2)}),F_Rat) = 3;

theorem :: FIELD_10:61
{ 1, 3-Root(2), 3-Root(2)^2 }
is Basis of VecSp(FAdj(F_Rat,{3-Root(2)}),F_Rat);

theorem :: FIELD_10:62
Roots X^3-2 = {};

theorem :: FIELD_10:63
not X^3-2 splits_in F_Rat;

theorem :: FIELD_10:64
Roots(FAdj(F_Rat,{3-Root(2)}),X^3-2) = {3-Root(2)};

theorem :: FIELD_10:65
not X^3-2 splits_in FAdj(F_Rat,{3-Root(2)});

theorem :: FIELD_10:66
Roots(F_Real,X^3-2) = {3-Root(2)};

theorem :: FIELD_10:67
not X^3-2 splits_in F_Real;

theorem :: FIELD_10:68
Roots(F_Complex,X^3-2) = {3-Root(2), 3-Root(2) * zeta, 3-Root(2) * zeta^2};

theorem :: FIELD_10:69
X^3-2 = X-(3-CRoot(2)) * X-(3-CRoot(2) * zeta) * X-(3-CRoot(2) * zeta^2);

theorem :: FIELD_10:70
FAdj(F_Rat,{3-CRoot(2), zeta}) is SplittingField of X^3-2;

registration
cluster F_Complex -> FAdj(F_Rat,{3-CRoot(2)})-extending;
cluster FAdj(F_Rat,{3-CRoot(2),zeta}) -> FAdj(F_Rat,{3-CRoot(2)})-extending;
end;

registration
cluster zeta -> FAdj(F_Rat,{3-CRoot(2)})-algebraic;
end;

theorem :: FIELD_10:71
MinPoly(zeta,FAdj(F_Rat,{3-CRoot(2)})) = X^2+X+1;

theorem :: FIELD_10:72
deg(FAdj(F_Rat,{3-CRoot(2),zeta}), FAdj(F_Rat,{3-CRoot(2)})) = 2;

theorem :: FIELD_10:73
{ 1, zeta } is Basis of
VecSp(FAdj(F_Rat,{3-CRoot(2),zeta}), FAdj(F_Rat,{3-CRoot(2)}));

theorem :: FIELD_10:74
deg(FAdj(F_Rat,{3-CRoot(2),zeta}), F_Rat) = 6;

theorem :: FIELD_10:75
{ 1, 3-Root(2), 3-Root(2)^2, zeta, 3-Root(2) * zeta, 3-Root(2)^2 * zeta }
is Basis of VecSp(FAdj(F_Rat,{3-CRoot(2),zeta}),F_Rat);

registration
cluster F_Complex -> FAdj(F_Rat,{2-CRoot(2)})-extending;
cluster F_Complex -> FAdj(F_Rat,{2-CRoot(2),zeta})-extending;
cluster FAdj(F_Rat,{2-CRoot(2),zeta}) -> FAdj(F_Rat,{2-CRoot(2)})-extending;
cluster FAdj(F_Rat,{3-CRoot(2),zeta,2-CRoot(2)}) ->
                                    FAdj(F_Rat,{2-CRoot(2),zeta})-extending;
end;

registration
cluster zeta -> FAdj(F_Rat,{2-CRoot(2)})-algebraic;
cluster 3-CRoot(2) -> FAdj(F_Rat,{2-CRoot(2),zeta})-algebraic;
end;

registration
cluster FAdj(F_Rat,{3-CRoot(2),zeta,2-CRoot(2)}) ->
                                       FAdj(F_Rat,{2-CRoot(2),zeta})-finite;
end;

theorem :: FIELD_10:76
MinPoly(zeta,FAdj(F_Rat,{2-CRoot(2)})) = X^2+X+1;

theorem :: FIELD_10:77
deg(FAdj(F_Rat,{2-CRoot(2), zeta}), FAdj(F_Rat,{2-CRoot(2)})) = 2;

theorem :: FIELD_10:78
deg(FAdj(F_Rat,{2-CRoot(2),zeta}),F_Rat) = 4;

theorem :: FIELD_10:79
not sqrt 2 is Element of FAdj(F_Rat,{3-CRoot(2),zeta});

theorem :: FIELD_10:80
not F_Complex is SplittingField of X^3-2;

:: Isomorphism between Spaces of Multilinear Maps and Nested Compositions 
:: over Real Normed Vector Spaces
::  by Kazuhisa Nakasho and Yuichi Futa
:: 
:: Received April 30, 2022
:: Copyright (c) 2022-2023 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies LOPBAN12, LOPBAN10, NUMBERS, REAL_1, NORMSP_1, PRE_TOPC, FUNCT_1,
      SUBSET_1, RELAT_1, LOPBAN_1, TARSKI, ARYTM_3, GROUP_2, FUNCT_4, VECTMETR,
      FUNCT_2, ARYTM_1, SUPINF_2, FCONT_1, STRUCT_0, CARD_1, SEQ_4, XXREAL_0,
      FINSEQ_1, RLVECT_1, NDIFF_7, PRVECT_1, PRVECT_2, CARD_3, PDIFF_1,
      MONOID_0, REWRITE1, MSSUBFAM, NAT_1, FUNCOP_1, LOPBAN_8, LOPBAN_9,
      ZFMISC_1, ORDINAL4, LOPBAN14;
 notations TARSKI, SUBSET_1, RELAT_1, FUNCT_1, RELSET_1, PARTFUN1, FUNCT_2,
      FUNCT_7, FUNCOP_1, MONOID_0, ORDINAL1, NUMBERS, XCMPLX_0, XXREAL_0,
      XREAL_0, NAT_1, NAT_D, CARD_3, FINSEQ_1, SEQ_4, STRUCT_0, PRE_TOPC,
      VECTSP_1, RLVECT_1, NORMSP_0, NORMSP_1, MAZURULM, RVSUM_1, LOPBAN_1,
      PRVECT_1, PRVECT_2, NDIFF_5, NDIFF_7, LOPBAN_8, LOPBAN_9, LOPBAN10;
 constructors SEQ_4, RELSET_1, RSSPACE3, NDIFF_5, ABIAN, NDIFF_7, MONOID_0,
      LOPBAN_9, LOPBAN10, NAT_D;
 registrations RELSET_1, STRUCT_0, XREAL_0, MEMBERED, FINSEQ_1, FUNCT_2,
      FUNCOP_1, NUMBERS, XBOOLE_0, NDIFF_5, LOPBAN_1, PRVECT_1, PRVECT_2,
      PRVECT_3, NDIFF_7, CARD_3, NORMSP_1, MONOID_0, FUNCT_7, RVSUM_1,
      LOPBAN_9, LOPBAN10, LOPBAN12, ORDINAL1, FUNCT_1, INT_1, VALUED_0,
      RELAT_1;
 requirements SUBSET, REAL, BOOLE, NUMERALS, ARITHM;


begin

definition
  let X be RealLinearSpace;
  func IsoCPRLSP(X) -> LinearOperator of X,product <*X*> means
:: LOPBAN14:def 1

  for x be Point of X holds it.x = <*x*>;
end;

theorem :: LOPBAN14:1
  for X be RealLinearSpace
  holds 0.(product <*X*>) = (IsoCPRLSP(X)).(0.X);

registration
  let X be RealLinearSpace;
  cluster IsoCPRLSP(X) -> one-to-one onto;
end;

registration
  let X be RealLinearSpace;
  cluster one-to-one onto for
    LinearOperator of X,product <*X*>;
end;

definition
  let X be RealLinearSpace;
  let f be bijective LinearOperator of X, product <*X*>;
  redefine func f" -> LinearOperator of product <*X*>, X;
end;

registration
  let X be RealLinearSpace;
  let f be one-to-one onto
      LinearOperator of X, product <*X*>;
  cluster f" -> bijective
    for LinearOperator of product <*X*>, X;
end;

registration
  let X be RealLinearSpace;
  cluster one-to-one onto
    for LinearOperator of product <*X*>, X;
end;

theorem :: LOPBAN14:2
  for X be RealLinearSpace,
      x be Point of X
  holds (IsoCPRLSP X)" . <*x*> = x;

theorem :: LOPBAN14:3
  for X be RealLinearSpace holds
    (IsoCPRLSP X)".(0.(product <*X*>)) = 0.X;

theorem :: LOPBAN14:4
  for G be RealLinearSpace holds
    ( for x be set holds
      ( x is Point of product <*G*>
        iff ex x1 be Point of G st x = <*x1*> ) )
  & ( for x,y be Point of product <*G*>,
          x1,y1 be Point of G
      st x = <*x1*> & y = <*y1*>
      holds x+y = <*x1+y1*> )
  & 0.(product <*G*>) = <* 0.G *>
  & ( for x be Point of product <*G*>, x1 be Point of G
      st x = <*x1*>
      holds -x = <* -x1 *> )
  & ( for x be Point of product <*G*>, x1 be Point of G,
      a be Real
      st x = <*x1*>
      holds a*x = <* a*x1 *> );

theorem :: LOPBAN14:5
  for X,Y be RealLinearSpace,
      f be Function of X,Y
  holds
    f is LinearOperator of X,Y
    iff f * (IsoCPRLSP X)" is LinearOperator of product <*X*>,Y;

theorem :: LOPBAN14:6
  for X,Y be RealLinearSpace,
      f be Function of product <*X*>,Y
  holds
    f is LinearOperator of product <*X*>,Y
    iff f * (IsoCPRLSP X) is LinearOperator of X,Y;

theorem :: LOPBAN14:7
  for X be RealLinearSpace,
      s be Point of product <*X*>,
      i be Element of dom <*X*>
  holds reproj(i,s) = IsoCPRLSP(X);

theorem :: LOPBAN14:8
  for X,Y be RealLinearSpace,
      f be object
  holds
    f is LinearOperator of product <*X*>,Y
    iff f is MultilinearOperator of <*X*>,Y;

theorem :: LOPBAN14:9
  for X,Y be RealLinearSpace holds
  MultilinearOperators(<*X*>,Y) = LinearOperators(product <*X*>,Y);

theorem :: LOPBAN14:10
  for X,Y be RealLinearSpace holds
  R_VectorSpace_of_MultilinearOperators(<*X*>,Y)
    = R_VectorSpace_of_LinearOperators(product <*X*>,Y);

theorem :: LOPBAN14:11
  for G be RealNormSpace holds
    ( for x be set holds
      ( x is Point of product <*G*>
        iff ex x1 be Point of G st x = <*x1*> ) )
  & ( for x,y be Point of product <*G*>, x1,y1 be Point of G
      st x = <*x1*> & y = <*y1*>
      holds x+y = <* x1+y1 *> )
  & 0.(product <*G*>) = <* 0.G *>
  & ( for x be Point of product <*G*>, x1 be Point of G
      st x = <*x1*>
      holds -x = <* -x1 *> )
  & ( for x be Point of product <*G*>,
         x1 be Point of G, a be Real
      st x = <*x1*>
      holds a*x = <* a*x1 *> )
  & ( for x be Point of product <*G*>, x1 be Point of G
      st x = <*x1*> holds ||.x.|| = ||.x1.|| );

definition
  let X be RealNormSpace;
  func IsoCPNrSP(X) -> LinearOperator of X,product <*X*> means
:: LOPBAN14:def 2

  for x be Point of X holds it.x = <*x*>;
end;

theorem :: LOPBAN14:12
  for X be RealNormSpace holds
  0.(product <*X*>) = (IsoCPNrSP X).(0.X);

registration
  let X be RealNormSpace;
  cluster IsoCPNrSP(X) -> one-to-one onto isometric;
end;

registration
  let X be RealNormSpace;
  cluster one-to-one onto isometric
    for LinearOperator of X,product <*X*>;
end;

definition
  let X be RealNormSpace;
  let I be one-to-one onto isometric
      LinearOperator of X,product <*X*>;
  redefine func I" -> LinearOperator of product <*X*>,X;
end;

registration
  let X be RealNormSpace;
  let I be one-to-one onto isometric
      LinearOperator of X,product <*X*>;
  cluster I" -> one-to-one onto isometric
    for LinearOperator of product <*X*>,X;
end;

registration
  let X be RealNormSpace;
  cluster one-to-one onto isometric
    for LinearOperator of product <*X*>,X;
end;

theorem :: LOPBAN14:13
  for X,Y be RealNormSpace,
      f be Function of X,Y
  holds
    f is LinearOperator of X,Y
    iff f * (IsoCPNrSP X)" is LinearOperator of product <*X*>,Y;

theorem :: LOPBAN14:14
  for X,Y be RealNormSpace,
      f be Function of X,Y
  holds
    f is Lipschitzian LinearOperator of X,Y
    iff f * (IsoCPNrSP X)" is Lipschitzian LinearOperator of product <*X*>,Y;

theorem :: LOPBAN14:15
  for X,Y be RealNormSpace,
      f be Function of product <*X*>,Y
  holds
    f is LinearOperator of product <*X*>,Y
    iff f * (IsoCPNrSP X) is LinearOperator of X,Y;

theorem :: LOPBAN14:16
  for X,Y be RealNormSpace,
        f be Function of product <*X*>,Y
  holds
    f is Lipschitzian LinearOperator of product <*X*>,Y
    iff f * (IsoCPNrSP X) is Lipschitzian LinearOperator of X,Y;

theorem :: LOPBAN14:17
  for X be RealNormSpace,
      s be Point of product <*X*>,
      i be Element of dom <*X*>
  holds reproj(i,s) = IsoCPNrSP(X);

theorem :: LOPBAN14:18
  for X be RealNormSpace,
      x be Point of product <*X*>
  holds NrProduct x = ||.x.||;

theorem :: LOPBAN14:19
  for X,Y be RealNormSpace,
      f be object
  holds
    f is LinearOperator of product <*X*>,Y
    iff f is MultilinearOperator of <*X*>,Y;

theorem :: LOPBAN14:20
  for X,Y be RealNormSpace, f be object
  holds
    f is Lipschitzian LinearOperator of product <*X*>,Y
    iff f is Lipschitzian MultilinearOperator of <*X*>,Y;

theorem :: LOPBAN14:21
  for X,Y be RealNormSpace holds
  MultilinearOperators(<*X*>,Y) = LinearOperators(product <*X*>,Y);

theorem :: LOPBAN14:22
  for X,Y be RealNormSpace holds
  BoundedMultilinearOperators(<*X*>,Y)
    = BoundedLinearOperators(product <*X*>,Y);

theorem :: LOPBAN14:23
  for X,Y be RealNormSpace holds
  BoundedMultilinearOperatorsNorm(<*X*>,Y)
    = BoundedLinearOperatorsNorm(product <*X*>,Y);

theorem :: LOPBAN14:24
  for X,Y be RealNormSpace holds
  R_VectorSpace_of_MultilinearOperators(<*X*>,Y)
    = R_VectorSpace_of_LinearOperators(product <*X*>,Y);

theorem :: LOPBAN14:25
  for X,Y be RealNormSpace holds
  R_NormSpace_of_BoundedMultilinearOperators(<*X*>,Y)
    = R_NormSpace_of_BoundedLinearOperators(product <*X*>,Y);

theorem :: LOPBAN14:26
  for X be RealNormSpace st X is complete
  holds product <*X*> is complete;

begin :: Spaces of multilinear maps and nested compositions over real normed vector spaces

theorem :: LOPBAN14:27
  for X,Y be RealNormSpace-Sequence,
      Z be RealNormSpace,
      f be Lipschitzian BilinearOperator of product X, product Y, Z
  holds
  f * (IsoCPNrSP(product X,product Y)) " is
  Lipschitzian MultilinearOperator of <*product X,product Y*>,Z;

theorem :: LOPBAN14:28
  for X,Y be RealNormSpace-Sequence,
      Z be RealNormSpace,
      f be Point of
    R_NormSpace_of_BoundedBilinearOperators(product X, product Y, Z)
  holds
    f * (IsoCPNrSP(product X, product Y)) " is Point of
    R_NormSpace_of_BoundedMultilinearOperators(<* product X, product Y *>,Z);

theorem :: LOPBAN14:29
  for X,Y be RealLinearSpace-Sequence
  holds carr(X^Y) = (carr X) ^ (carr Y);

theorem :: LOPBAN14:30
  for X be RealLinearSpace
  holds
    len carr <*X*> = len <*X*>
  & len carr <*X*> = 1
  & carr <*X*> = <* the carrier of X *>;

theorem :: LOPBAN14:31
  for X be RealNormSpace-Sequence,
      x be Element of product X,
      Y be RealNormSpace,
      z be Element of product(X ^ <*Y*>),
      i be Element of dom X,
      j be Element of dom(X ^ <*Y*>),
      xi be Element of X.i,
      y be Point of Y
  st i = j & z = x ^ <*y*>
  holds
    reproj(j,z).xi = (reproj(i,x).xi) ^ <*y*>;

theorem :: LOPBAN14:32
  for X be RealNormSpace-Sequence,
      x be Element of product X,
      Y be RealNormSpace,
      z be Element of product(X ^ <*Y*>),
      j be Element of dom(X ^ <*Y*>),
      y be Element of Y,
      y0 be Point of Y
    st z = x ^ <*y0*> & j = len x + 1
  holds
    reproj(j,z).y = x ^ <*y*>;

theorem :: LOPBAN14:33
  for X be RealNormSpace-Sequence,
      x be Element of product X,
      Y be RealNormSpace,
      y be Point of Y
  holds
    x ^ <*y*> is Point of product(X ^ <*Y*>);

theorem :: LOPBAN14:34
  for X be RealNormSpace-Sequence,
      x be Element of product X,
      Y be RealNormSpace,
      z be Element of product(X ^ <*Y*>),
      y be Point of Y
    st z = x ^ <*y*>
  holds NrProduct z = ||.y.|| * (NrProduct x);

theorem :: LOPBAN14:35
  for X,Z be RealNormSpace,
      Y be RealNormSpace-Sequence
  holds
  ex I be Lipschitzian LinearOperator of
    R_NormSpace_of_BoundedLinearOperators(X,
        R_NormSpace_of_BoundedMultilinearOperators(Y,Z)),
    R_NormSpace_of_BoundedMultilinearOperators(Y ^ <*X*>, Z)
  st I is one-to-one onto isometric
   & for u be Point of R_NormSpace_of_BoundedLinearOperators(X,
        R_NormSpace_of_BoundedMultilinearOperators(Y,Z))
     holds
        ||.u.|| = ||.I.u.||
      & for y be Point of product Y,
            x be Point of X
        holds (I.u).(y ^ <*x*>) = (u.x).y;

definition
  let Y be RealNormSpace,
      X be RealNormSpace-Sequence;
  func NestingLB(X,Y) -> RealNormSpace means
:: LOPBAN14:def 3

  ex f be Function
  st dom f = NAT
   & it = f.(len X)
   & f.0 = Y
   & for i be Nat st i < len X
     holds
       ex fi be RealNormSpace,
          j be Element of dom X
       st fi = f.i
        & i + 1 = j
        & f.(i + 1) = R_NormSpace_of_BoundedLinearOperators(X.j, fi);
end;

theorem :: LOPBAN14:36
  for X,Y,Z be RealNormSpace,
      I be Lipschitzian LinearOperator of Y,Z
    st I is one-to-one onto isometric
  holds
  ex L be Lipschitzian LinearOperator of
    R_NormSpace_of_BoundedLinearOperators(X,Y),
    R_NormSpace_of_BoundedLinearOperators(X,Z)
  st L is one-to-one onto isometric
   & for f be Point of R_NormSpace_of_BoundedLinearOperators(X,Y)
     holds L.f = I * f;

theorem :: LOPBAN14:37
  for X,Y,Z be RealNormSpace,
      I be Lipschitzian LinearOperator of Y,Z
    st I is one-to-one onto isometric
  holds
    ex L be Lipschitzian LinearOperator of
      R_NormSpace_of_BoundedLinearOperators(Y,X),
      R_NormSpace_of_BoundedLinearOperators(Z,X)
    st L is one-to-one onto isometric
     & for f be Point of R_NormSpace_of_BoundedLinearOperators(Y,X)
       holds L.f = f * I";

theorem :: LOPBAN14:38
  for X,Y be RealNormSpace holds
  ex I be Lipschitzian LinearOperator of
    R_NormSpace_of_BoundedLinearOperators(X,Y),
    R_NormSpace_of_BoundedLinearOperators(product <*X*>,Y)
  st I is one-to-one onto isometric
   & (for u be Point of R_NormSpace_of_BoundedLinearOperators(X,Y),
          x be Point of X
      holds (I.u).<*x*> = u.x)
   & for u be Point of R_NormSpace_of_BoundedLinearOperators(X,Y)
     holds ||.u.|| = ||.I.u.||;

theorem :: LOPBAN14:39
  for X,Y,Z,W be RealNormSpace,
      I be Lipschitzian LinearOperator of X,Z,
      J be Lipschitzian LinearOperator of Y,W
   st I is one-to-one onto isometric
    & J is one-to-one onto isometric
  holds
    ex K be Lipschitzian LinearOperator of
      R_NormSpace_of_BoundedLinearOperators(X,Y),
      R_NormSpace_of_BoundedLinearOperators(Z,W)
    st K is one-to-one onto isometric
     & for x be Point of R_NormSpace_of_BoundedLinearOperators(X,Y)
       holds K.x = J * (x * I");

theorem :: LOPBAN14:40
  for n be Nat,
      A,B be RealNormSpace-Sequence,
      X,Y be RealNormSpace
  st len A = n + 1 & A|n = B & X = A.(n + 1)
  holds NestingLB(A,Y)
      = R_NormSpace_of_BoundedLinearOperators(X,NestingLB(B,Y));

registration
  let Y be RealNormSpace,
      X be RealNormSpace-Sequence;
  cluster NestingLB(X,Y) -> constituted-Functions;
  end;

definition
  let Y be RealNormSpace,
      X be RealNormSpace-Sequence;
  func NestMult(X,Y) -> Lipschitzian LinearOperator of
       NestingLB(X,Y),R_NormSpace_of_BoundedMultilinearOperators(X,Y)
  means
:: LOPBAN14:def 4
  it is one-to-one onto isometric
    &
  (for u being Element of NestingLB(X,Y)
   holds ||.it.u.|| = ||.u.||)
    &
  for u be Point of NestingLB(X,Y),
      x be Point of product X
  ex g be FinSequence
  st len g = len X & g.1 = u
   & (for i be Element of NAT
       st 1 <= i & i < len X
      holds
      ex Xi be RealNormSpace-Sequence,
          h be Point of NestingLB(Xi,Y)
      st Xi = X | (len X -' i + 1) & h = g.i
       & g.(i + 1) = h.(x.(len X -' i + 1)))
   & ex X1 be RealNormSpace-Sequence,
         h be Point of NestingLB(X1,Y)
     st X1 = <*X.1*> & h = g.(len X)
      & (it.u).x = h.(x.1);
end;

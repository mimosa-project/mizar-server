:: Elementary Number Theory Problems. {P}art {VIII}
::  by Artur Korni{\l}owicz
:: 
:: Received June 30, 2023
:: Copyright (c) 2023 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, NAT_1, RELAT_1, FUNCT_1, XXREAL_0, ARYTM_3, XCMPLX_0,
      CARD_1, INT_1, NEWTON, INT_2, ARYTM_1, SUBSET_1, XBOOLE_0, TARSKI,
      FINSET_1, ABIAN, EULER_1, MEMBERED, REAL_1, MOEBIUS1, ZFMISC_1, VALUED_0,
      CARD_3, REALSET1, FINSEQ_1, ORDINAL1, PBOOLE, FUNCOP_1, PRE_POLY,
      FUNCT_4, NAT_3, UPROOTS, SQUARE_1, VALUED_1, PARTFUN1, ORDINAL4,
      ORDINAL2, PARTFUN3, PYTHTRIP, RFINSEQ2, CLASSES1, COMPLEX1, NAT_LAT,
      RAT_1, MCART_1, XREAL_0, POWER, PREPOWER, NUMBER08;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, ENUMSET1, XTUPLE_0, DOMAIN_1,
      ORDINAL1, CARD_1, NUMBERS, XCMPLX_0, RELAT_1, FUNCT_1, PARTFUN1, PBOOLE,
      FINSET_1, MEMBERED, VALUED_0, VALUED_1, CLASSES1, XREAL_0, RAT_1, INT_1,
      INT_2, NAT_1, XXREAL_0, XXREAL_2, SQUARE_1, FUNCOP_1, FINSEQ_1, FUNCT_4,
      PARTFUN3, PYTHTRIP, RVSUM_1, RFINSEQ2, NEWTON, PREPOWER, POWER, ABIAN,
      EULER_1, NAT_LAT, PRE_POLY, NAT_3, MOEBIUS1;
 constructors NAT_D, RELSET_1, ABIAN, EULER_1, PEPIN, FIB_NUM2, XXREAL_2,
      NAT_3, RVSUM_1, CLASSES1, NAT_LAT, PYTHTRIP, FUNCT_4, MOEBIUS1, RFINSEQ2,
      PARTFUN3, NEWTON03, PREPOWER, POWER, DOMAIN_1;
 registrations ORDINAL1, RELSET_1, FINSET_1, NUMBERS, XCMPLX_0, XXREAL_0,
      XREAL_0, NAT_1, INT_1, MEMBERED, VALUED_0, CARD_1, NEWTON, NEWTON02,
      NEWTON03, ABIAN, NAT_6, JORDAN1D, WSIERP_1, XXREAL_2, NEWTON01, FINSEQ_1,
      RVSUM_1, PRE_POLY, FUNCT_1, RELAT_1, XBOOLE_0, NAT_3, FUNCT_4, FUNCOP_1,
      SUBSET_1, NUMBER02, PYTHTRIP, PBOOLE, VALUED_1, PARTFUN3, FINSEQ_9,
      NAT_LAT, RAMSEY_1, XTUPLE_0, RAT_1, SQUARE_1, POWER;
 requirements REAL, NUMERALS, BOOLE, SUBSET, ARITHM;


begin

reserve X for set;
reserve a,b,c,k,m,n for Nat;
reserve i,j for Integer;
reserve r,s for Real;
reserve p,p1,p2,p3 for Prime;

registration
  let n,r;
  cluster n-r+r -> natural;
  cluster n+r-r -> natural;
end;

theorem :: NUMBER08:1
  for x,y being Nat st x < y < x+2 holds y = x+1;

theorem :: NUMBER08:2
  NATPLUS = NAT \ {0};

registration
  cluster NATPLUS -> infinite;
end;

theorem :: NUMBER08:3
  for f,g being FinSequence holds
  f^g is X-valued implies f is X-valued & g is X-valued;

theorem :: NUMBER08:4
  for f1,f2,f3 being complex-valued ManySortedSet of X st
  for x being object st x in X holds f1.x = f2.x * f3.x holds
  f1 = f2(#)f3;

theorem :: NUMBER08:5
  b <> 0 & c <> 0 implies (r*b+c) / b > r;

theorem :: NUMBER08:6
  m <= n implies m! divides n!;

theorem :: NUMBER08:7
  p1 divides p2 implies p1 = p2;

theorem :: NUMBER08:8
  m,n are_coprime implies a*n+m,n are_coprime;

theorem :: NUMBER08:9
  n divides 9 implies n = 1 or n = 3 or n = 9;

theorem :: NUMBER08:10
  n divides 25 implies n = 1 or n = 5 or n = 25;

theorem :: NUMBER08:11
  n divides 27 implies n = 1 or n = 3 or n = 9 or n = 27;

begin :: Problem 25

theorem :: NUMBER08:12
  for f being Function holds support (EmptyBag X +* f) = support f;

registration
  let X be set;
  let f be finite-support Function;
  cluster EmptyBag X +* f -> finite-support;
end;

registration
  let p be Prime;
  let n be non zero Nat;
  cluster p |-count (p|^n) -> non zero;
end;

theorem :: NUMBER08:13
  for b being finite-support Function holds
  dom(b*canFS(support b)) = dom canFS(support b);

theorem :: NUMBER08:14
  for f,g being complex-valued Function holds support(f(#)g) c= support f;

registration
  let f,g be finite-support complex-valued Function;
  cluster f(#)g -> finite-support;
end;

theorem :: NUMBER08:15
  for f,g being complex-valued Function st
  support(f) = support(g) holds support(f(#)g) = support f;

theorem :: NUMBER08:16
  for b1,b2 being finite-support complex-valued ManySortedSet of X st
  support b1 = support b2 holds Product(b1(#)b2) = Product(b1) * Product(b2);

definition
  let n be non zero Nat;
  func Euler_factorization n -> Function means
:: NUMBER08:def 1
  dom it = support ppf n &
  for p being Nat st p in dom it
   ex c being non zero Nat st c = p |-count n & it.p = p|^c - p|^(c-1);
end;

registration
  let n be non zero Nat;
  cluster dom Euler_factorization n -> finite;
end;

registration
  let n be non zero Nat;
  cluster Euler_factorization n -> SetPrimes-defined;
end;

theorem :: NUMBER08:17
  for n being non zero Nat, p being object
  st p in dom Euler_factorization n holds p is Prime;

theorem :: NUMBER08:18
  for n being non zero Nat
  for p being Nat st p in dom Euler_factorization n holds
  ex c being non zero Nat st c = p |-count n &
  (Euler_factorization n).p = p|^(c-1) * (p-1);

registration
  let n be non zero Nat;
  cluster Euler_factorization n -> natural-valued;
end;

registration
  let n be non zero Nat;
  cluster Euler_factorization n -> finite-support;
end;

registration
  cluster Euler_factorization 1 -> empty;
end;

theorem :: NUMBER08:19
  for n being non zero Nat holds
  Euler_factorization (p|^n) = p .--> (p|^n-p|^(n-1));

theorem :: NUMBER08:20
  Euler_factorization p = p .--> (p-1);

theorem :: NUMBER08:21
  for n being non zero Nat holds
  support Euler_factorization n = dom Euler_factorization n;

theorem :: NUMBER08:22
  for n being non zero Nat st n > 1 holds
  support Euler_factorization n is non empty;

theorem :: NUMBER08:23
  for n being non zero Nat st n > 1 holds Euler_factorization n is non empty;

theorem :: NUMBER08:24
  for s,t being non zero Nat st s,t are_coprime holds
  dom Euler_factorization s misses dom Euler_factorization t;

theorem :: NUMBER08:25
  for s,t being non zero Nat st s,t are_coprime holds
  (EmptyBag SetPrimes +* Euler_factorization(s*t)) =
  (EmptyBag SetPrimes +* Euler_factorization s) +
  (EmptyBag SetPrimes +* Euler_factorization t);

theorem :: NUMBER08:26
  for n being non zero Nat holds
  Euler n = Product ((EmptyBag SetPrimes) +* Euler_factorization n);

definition
  let n be non zero Nat;
  func Euler_factorization_1 n -> Function means
:: NUMBER08:def 2
  dom it = support ppf n &
  for p being Nat st p in dom it
   ex c being non zero Nat st c = p |-count n & it.p = p|^(c-1);
end;

registration
  let n be non zero Nat;
  cluster dom Euler_factorization_1 n -> finite;
end;

registration
  let n be non zero Nat;
  cluster Euler_factorization_1 n -> SetPrimes-defined;
end;

theorem :: NUMBER08:27
  for n being non zero Nat, p being object
  st p in dom Euler_factorization_1 n holds p is Prime;

registration
  let n be non zero Nat;
  cluster Euler_factorization_1 n -> natural-valued;
end;

registration
  let n be non zero Nat;
  cluster Euler_factorization_1 n -> finite-support;
end;

theorem :: NUMBER08:28
  for n being non zero Nat holds
  support Euler_factorization_1 n = dom Euler_factorization_1 n;

definition
  let n be non zero Nat;
  func Euler_factorization_2 n -> Function means
:: NUMBER08:def 3
  dom it = support ppf n &
  for p being Nat st p in dom it holds it.p = p-1;
end;

registration
  let n be non zero Nat;
  cluster dom Euler_factorization_2 n -> finite;
end;

registration
  let n be non zero Nat;
  cluster Euler_factorization_2 n -> SetPrimes-defined;
end;

theorem :: NUMBER08:29
  for n being non zero Nat, p being object
  st p in dom Euler_factorization_2 n holds p is Prime;

registration
  let n be non zero Nat;
  cluster Euler_factorization_2 n -> natural-valued;
end;

registration
  let n be non zero Nat;
  cluster Euler_factorization_2 n -> finite-support;
end;

theorem :: NUMBER08:30
  for n being non zero Nat holds
  support Euler_factorization_2 n = dom Euler_factorization_2 n;

theorem :: NUMBER08:31
  for n being non zero Nat holds
  EmptyBag SetPrimes +* Euler_factorization n =
  (EmptyBag SetPrimes +* Euler_factorization_1 n) (#)
  (EmptyBag SetPrimes +* Euler_factorization_2 n);

theorem :: NUMBER08:32
  for f1,f2 being integer-valued FinSequence st len f1 = len f2 &
  for n st 1 <= n <= len f1 holds f1.n divides f2.n holds
  Product f1 divides Product f2;

theorem :: NUMBER08:33
  for n being non zero Nat holds
  Product (EmptyBag SetPrimes +* Euler_factorization_1 n) divides n;

definition
  let f be real-valued Function;
  let r be Real;
  pred f <= r means
:: NUMBER08:def 4
  for x being object st x in dom f holds f.x <= r;
end;

theorem :: NUMBER08:34
  for f being real-valued Function, r1,r2 being Real st f <= r1 <= r2
  holds f <= r2;

theorem :: NUMBER08:35
  for f,g being real-valued Function st rng g c= rng f & f <= n holds g <= n;

theorem :: NUMBER08:36
  for f,g being ext-real-valued FinSequence holds
  f^g is increasing implies f is increasing & g is increasing;

theorem :: NUMBER08:37
  for f,g being ext-real-valued FinSequence holds
  f^g is positive-yielding implies
  f is positive-yielding & g is positive-yielding;

theorem :: NUMBER08:38
  for f being natural-valued FinSequence st
  f <= n & f is increasing positive-yielding holds
  Product(f) divides n!;

registration
  let f be natural-valued FinSequence;
  cluster sort_a(f) -> natural-valued;
  cluster sort_d(f) -> natural-valued;
end;

registration
  let f be integer-valued FinSequence;
  cluster sort_a(f) -> integer-valued;
  cluster sort_d(f) -> integer-valued;
end;

registration
  let f be rational-valued FinSequence;
  cluster sort_a(f) -> rational-valued;
  cluster sort_d(f) -> rational-valued;
end;

theorem :: NUMBER08:39
  for P,R being Relation st rng R c= rng P & P is positive-yielding holds
  R is positive-yielding;

registration
  let f be positive-yielding real-valued FinSequence;
  cluster sort_a(f) -> positive-yielding;
end;

registration
  cluster SetPrimes-defined -> NAT-defined for Function;
end;

theorem :: NUMBER08:40
  for f being real-valued finite-support Function holds
  f <= n implies
  for F being real-valued FinSequence st
  F = ((EmptyBag SetPrimes)+*f)*canFS(support((EmptyBag SetPrimes)+*f))
  holds F <= n;

theorem :: NUMBER08:41
  for f being natural-valued finite-support Function
  for F being real-valued FinSequence st
  F = ((EmptyBag SetPrimes)+*f)*canFS(support((EmptyBag SetPrimes)+*f))
  holds F is positive-yielding;

theorem :: NUMBER08:42
  for f being natural-valued finite-support SetPrimes-defined Function holds
  f is increasing implies
  for F being real-valued FinSequence st
  F = ((EmptyBag SetPrimes)+*f)*canFS(support((EmptyBag SetPrimes)+*f))
  holds sort_a(F) is one-to-one;

theorem :: NUMBER08:43
  for f being natural-valued finite-support SetPrimes-defined Function holds
  f is increasing implies
  for F being real-valued FinSequence st
  F = ((EmptyBag SetPrimes)+*f)*canFS(support((EmptyBag SetPrimes)+*f))
  holds sort_a(F) is increasing;

theorem :: NUMBER08:44
  for f being natural-valued finite-support SetPrimes-defined Function holds
  f <= n & f is increasing implies
  Product (EmptyBag SetPrimes +* f) divides n!;

theorem :: NUMBER08:45
  for n being non zero Nat holds Euler_factorization_2 n <= n-1;

registration
  let n be non zero Nat;
  cluster Euler_factorization_2 n -> increasing;
  cluster Euler_factorization_2 n -> positive-yielding;
end;

theorem :: NUMBER08:46
  for n being non zero Nat holds
  Product (EmptyBag SetPrimes +* Euler_factorization_2 n) divides (n-1)!;

theorem :: NUMBER08:47
  for n being non zero Nat holds Euler n divides n!;

:: Problem 25
theorem :: NUMBER08:48
  for n being odd Nat holds n divides 2|^(n!) - 1;

begin :: Problem 86

theorem :: NUMBER08:49
  p1,p2,p3 are_mutually_distinct implies
  p1 >= 2 & p2 >= 3 & p3 >= 5 or p1 >= 2 & p2 >= 5 & p3 >= 3 or
  p1 >= 3 & p2 >= 2 & p3 >= 5 or p1 >= 3 & p2 >= 5 & p3 >= 2 or
  p1 >= 5 & p2 >= 2 & p3 >= 3 or p1 >= 5 & p2 >= 3 & p3 >= 2;

definition
  let n be Nat;
  pred n satisfies_Sierpinski_problem_86 means
:: NUMBER08:def 5
  ex p1,p2,p3 be Prime st p1,p2,p3 are_mutually_distinct & n|^2-1 = p1*p2*p3;
end;

theorem :: NUMBER08:50
  n satisfies_Sierpinski_problem_86 implies n >= 6;

theorem :: NUMBER08:51
  for a,b,c being Prime st n|^2-1 = a*b*c holds n-1 is prime or n+1 is prime;

theorem :: NUMBER08:52
  n satisfies_Sierpinski_problem_86 implies
  n-1 is prime & (ex x,y being Prime st x <> y & n+1 = x*y) or
  n+1 is prime & (ex x,y being Prime st x <> y & n-1 = x*y);

theorem :: NUMBER08:53
  n satisfies_Sierpinski_problem_86 implies n is even;

theorem :: NUMBER08:54
  14|^2 - 1 = 3*5*13;

theorem :: NUMBER08:55
  16|^2 - 1 = 3*5*17;

theorem :: NUMBER08:56
  20|^2 - 1 = 3*7*19;

theorem :: NUMBER08:57
  22|^2 - 1 = 3*7*23;

theorem :: NUMBER08:58
  32|^2 - 1 = 3*11*31;

::Problem 86 a
theorem :: NUMBER08:59
  14 satisfies_Sierpinski_problem_86;

::Problem 86 b
theorem :: NUMBER08:60
  16 satisfies_Sierpinski_problem_86;

::Problem 86 c
theorem :: NUMBER08:61
  20 satisfies_Sierpinski_problem_86;

::Problem 86 d
theorem :: NUMBER08:62
  22 satisfies_Sierpinski_problem_86;

::Problem 86 e
theorem :: NUMBER08:63
  32 satisfies_Sierpinski_problem_86;

:: Problem 86
theorem :: NUMBER08:64
  n satisfies_Sierpinski_problem_86 & n <= 32 implies n in {14,16,20,22,32};

begin :: Problem 184

theorem :: NUMBER08:65
  3|^(2*k),1 are_congruent_mod 8;

theorem :: NUMBER08:66
  not 8 divides 3|^n+1;

:: Problem 184
theorem :: NUMBER08:67
  n <> 0 & 2|^m - 3|^n = 1 implies m = 2 & n = 1;

begin :: Problem 185

theorem :: NUMBER08:68
  3|^(2*k),1 are_congruent_mod 4;

theorem :: NUMBER08:69
  2|^n mod 4 = 2 implies n = 1;

theorem :: NUMBER08:70
  2|^m - 2|^n = 2 implies m = 2 & n = 1;

theorem :: NUMBER08:71
  n is odd & 3|^n - 2|^m = 1 implies n = m = 1;

theorem :: NUMBER08:72
  n is even & 3|^n - 2|^m = 1 implies n = 2 & m = 3;

:: Problem 185
theorem :: NUMBER08:73
  3|^n - 2|^m = 1 implies n = m = 1 or n = 2 & m = 3;

begin :: Problem 88

definition
  let n;
  attr n is having_exactly_one_prime_divisor means
:: NUMBER08:def 6
  ex p being Prime st p divides n &
  for r being Prime st r <> p holds not r divides n;
end;

definition
  let n;
  assume
 n is having_exactly_one_prime_divisor;
  func the_only_divisor_of n -> Prime means
:: NUMBER08:def 7
  it divides n & for r being Prime st r <> it holds not r divides n;
end;

theorem :: NUMBER08:74
  n is having_exactly_one_prime_divisor & p divides n implies
  the_only_divisor_of n = p;

registration
  cluster prime -> having_exactly_one_prime_divisor for Nat;
end;

theorem :: NUMBER08:75
  the_only_divisor_of p = p;

registration
  cluster zero -> non having_exactly_one_prime_divisor for Nat;
end;

theorem :: NUMBER08:76
  1 is non having_exactly_one_prime_divisor;

registration
  let p be Prime;
  cluster p|^0 -> non having_exactly_one_prime_divisor;
end;

registration
  let p be Prime;
  let k be non zero Nat;
  cluster p|^k -> having_exactly_one_prime_divisor;
end;

theorem :: NUMBER08:77
  p1 <> p2 implies not p1*p2 is having_exactly_one_prime_divisor;

theorem :: NUMBER08:78
  n is having_exactly_one_prime_divisor implies
  ex k being non zero Nat st n = (the_only_divisor_of n) |^ k;

:: Problem 88
theorem :: NUMBER08:79
  n > 7 implies
  ex m being Nat, p, q being Prime st p <> q &
  (m = n or m = n+1 or m = n+2) & p divides m & q divides m;

begin :: Problem 105

definition
  let n;
  attr n is having_at_least_three_different_prime_divisors means
:: NUMBER08:def 8
  ex q1,q2,q3 being Prime st q1,q2,q3 are_mutually_distinct &
  q1 divides n & q2 divides n & q3 divides n;
end;

definition
  let n be non zero Nat;
  pred n satisfies_Sierpinski_problem_105 means
:: NUMBER08:def 9
  n-1 is having_at_least_three_different_prime_divisors &
  n+1 is having_at_least_three_different_prime_divisors;
end;

theorem :: NUMBER08:80
  n is having_exactly_one_prime_divisor implies
  not n is having_at_least_three_different_prime_divisors;

registration
  cluster zero -> having_at_least_three_different_prime_divisors for Nat;
end;

theorem :: NUMBER08:81
  n > 0 & n is having_at_least_three_different_prime_divisors implies n >= 30;

registration
  cluster prime -> non having_at_least_three_different_prime_divisors for Nat;
end;

registration
  let p1,p2;
  cluster p1*p2 -> non having_at_least_three_different_prime_divisors;
end;

registration
  let p,n;
  cluster p|^n -> non having_at_least_three_different_prime_divisors;
end;

registration
  let p1,p2,m,n;
  cluster p1|^m * p2|^n -> non having_at_least_three_different_prime_divisors;
end;

:: Problem 105 a
theorem :: NUMBER08:82
  131 satisfies_Sierpinski_problem_105;

:: Problem 105
theorem :: NUMBER08:83
  not ex p being Prime st p <= 130 & p satisfies_Sierpinski_problem_105;

begin :: Problem 111

theorem :: NUMBER08:84
  1 + 3 + 3|^2 + 3|^3 + 3|^4 = 11|^2;

theorem :: NUMBER08:85
  m divides p|^4 iff m in {1,p,p|^2,p|^3,p|^4};

theorem :: NUMBER08:86
  1 + p + p|^2 + p|^3 + p|^4 is square iff p = 3;

:: Problem 111 a
theorem :: NUMBER08:87
  NatDivisors(p|^4) = {1,p,p|^2,p|^3,p|^4};

:: Problem 111
theorem :: NUMBER08:88
  { p where p is Prime: 1 + p + p|^2 + p|^3 + p|^4 is square } = {3};

begin :: Problem 137

registration
  let D be non empty set;
  cluster -> total for sequence of D;
end;

registration
  let D be non empty set;
  let f be [:COMPLEX,D:]-valued ManySortedSet of NAT;
  let n be Nat;
  cluster (f.n)`1 -> complex;
end;

registration
  let D be non empty set;
  let f be [:D,COMPLEX:]-valued ManySortedSet of NAT;
  let n be Nat;
  cluster (f.n)`2 -> complex;
end;

registration
  let D be non empty set;
  let f be [:REAL,D:]-valued ManySortedSet of NAT;
  let n be Nat;
  cluster (f.n)`1 -> real;
end;

registration
  let D be non empty set;
  let f be [:D,REAL:]-valued ManySortedSet of NAT;
  let n be Nat;
  cluster (f.n)`2 -> real;
end;

registration
  let D be non empty set;
  let f be [:RAT,D:]-valued ManySortedSet of NAT;
  let n be Nat;
  cluster (f.n)`1 -> rational;
end;

registration
  let D be non empty set;
  let f be [:D,RAT:]-valued ManySortedSet of NAT;
  let n be Nat;
  cluster (f.n)`2 -> rational;
end;

registration
  let D be non empty set;
  let f be [:INT,D:]-valued ManySortedSet of NAT;
  let n be Nat;
  cluster (f.n)`1 -> integer;
end;

registration
  let D be non empty set;
  let f be [:D,INT:]-valued ManySortedSet of NAT;
  let n be Nat;
  cluster (f.n)`2 -> integer;
end;

registration
  let D be non empty set;
  let f be [:NAT,D:]-valued ManySortedSet of NAT;
  let n be Nat;
  cluster (f.n)`1 -> natural;
end;

registration
  let D be non empty set;
  let f be [:D,NAT:]-valued ManySortedSet of NAT;
  let n be Nat;
  cluster (f.n)`2 -> natural;
end;

definition
  let a,b,x1,x2,x3,y1,y2,y3 be Complex;
  func recSeqCart(a,b,x1,x2,x3,y1,y2,y3) ->
       [:COMPLEX,COMPLEX:]-valued ManySortedSet of NAT
  means
:: NUMBER08:def 10
  it.0 = [a,b] &
  for n being Nat holds
  it.(n+1) = [x1*(it.n)`1 + x2*(it.n)`2 + x3 , y1*(it.n)`1 + y2*(it.n)`2 + y3];
end;

registration
  let a,b,x1,x2,x3,y1,y2,y3 be Real;
  cluster recSeqCart(a,b,x1,x2,x3,y1,y2,y3) -> [:REAL,REAL:]-valued;
end;

registration
  let a,b,x1,x2,x3,y1,y2,y3 be Rational;
  cluster recSeqCart(a,b,x1,x2,x3,y1,y2,y3) -> [:RAT,RAT:]-valued;
end;

registration
  let a,b,x1,x2,x3,y1,y2,y3 be Integer;
  cluster recSeqCart(a,b,x1,x2,x3,y1,y2,y3) -> [:INT,INT:]-valued;
end;

registration
  let a,b,x1,x2,x3,y1,y2,y3 be Nat;
  cluster recSeqCart(a,b,x1,x2,x3,y1,y2,y3) -> [:NAT,NAT:]-valued;
end;

theorem :: NUMBER08:89
  for a,b,a1,a2,a3,b1,b2,b3 being Real st a > 0 & b > 0 & a3 >= 0 & b3 >= 0 &
  (a1 > 0 & a2 >= 0 or a1 >= 0 & a2 > 0) &
  (b1 > 0 & b2 >= 0 or b1 >= 0 & b2 > 0) holds
  for n being Nat holds
  (recSeqCart(a,b,a1,a2,a3,b1,b2,b3).n)`1 > 0 &
  (recSeqCart(a,b,a1,a2,a3,b1,b2,b3).n)`2 > 0;

theorem :: NUMBER08:90
  for a,b,a1,a2,a3,b1,b2,b3 being Real st a >= 0 & b >= 0 &
  a1 >= 0 & a2 >= 0 & a3 >= 0 & b1 >= 0 & b2 >= 0 & b3 >= 0 holds
  for n being Nat holds
  (recSeqCart(a,b,a1,a2,a3,b1,b2,b3).n)`1 >= 0 &
  (recSeqCart(a,b,a1,a2,a3,b1,b2,b3).n)`2 >= 0;

theorem :: NUMBER08:91
  for a,b,a1,a2,a3,b1,b2,b3 being Real st
  a > 0 & b > 0 & a1 >= 1 & a2 > 0 & a3 >= 0 & b1 > 0 & b2 >= 1 & b3 >= 0 holds
  for m,n being Nat st m > n holds
  (recSeqCart(a,b,a1,a2,a3,b1,b2,b3).m)`1
  > (recSeqCart(a,b,a1,a2,a3,b1,b2,b3).n)`1 &
  (recSeqCart(a,b,a1,a2,a3,b1,b2,b3).m)`2
  > (recSeqCart(a,b,a1,a2,a3,b1,b2,b3).n)`2;

theorem :: NUMBER08:92
  for a,b,a1,a2,a3,b1,b2,b3 being Real st
  a > 0 & b > 0 & a1 >= 1 & a2 > 0 & a3 >= 0 & b1 > 0 & b2 >= 1 & b3 >= 0 holds
  recSeqCart(a,b,a1,a2,a3,b1,b2,b3) is one-to-one;

::Problem 137
theorem :: NUMBER08:93
  { [x,y] where x,y is positive Nat: 3*x^2-7*y^2+1 = 0 } is infinite;

begin :: Problem 138

registration
  cluster infinite natural-membered for set;
end;

theorem :: NUMBER08:94
  i divides p implies i = 1 or i = -1 or i = p or i = -p;

:: Problem 138 a
theorem :: NUMBER08:95
  { [x,y] where x,y is Integer: 2*x|^3 + x*y - 7 = 0 } =
  { [1,5], [7,-97], [-1,-9], [-7,-99] };

theorem :: NUMBER08:96
  for r being Complex st r <> 0 holds 2*(7/r)|^3 + 7/r*(r-98/r^2) - 7 = 0;

theorem :: NUMBER08:97
  n|^3 <= 98 implies n <= 4;

:: Problem 138 b
theorem :: NUMBER08:98
  { [x,y] where x,y is positive Rational: 2*x|^3 + x*y - 7 = 0 } is infinite;

begin :: Problem 139

:: Problem 139
theorem :: NUMBER08:99
  { [x,y] where x,y is positive Nat : (x-1)^2+(x+1)^2 = y^2+1 } is infinite;

begin :: Problem 140

registration
  let a be Rational, n be Nat;
  cluster a |^ n -> rational;
end;

registration
  let a be Rational, i be Integer;
  cluster a #Z i -> rational;
end;

registration
  let a be Rational, i be Integer;
  cluster a to_power i -> rational;
end;

theorem :: NUMBER08:100
  n > 1 implies 3|^n - 3 to_power(1-n) - 2 > 0;

theorem :: NUMBER08:101
  n > 1 implies 3|^n + 3 to_power(1-n) - 4 > 0;

theorem :: NUMBER08:102
  for x,y being Complex st
   x = (3|^n-3 to_power(1-n)-2)/4 & y = (3|^n+3 to_power(1-n)-4)/8
   holds x*(x+1) = 4*y*(y+1);

theorem :: NUMBER08:103
  m < n implies 3|^m - 3 to_power(1-m) < 3|^n - 3 to_power(1-n);

:: Problem 140 a
theorem :: NUMBER08:104
  not ex x,y being positive Nat st x*(x+1) = 4*y*(y+1);

:: Problem 140 b
theorem :: NUMBER08:105
  { [x,y] where x,y is positive Rational: x*(x+1) = 4*y*(y+1) } is infinite;

begin :: Problem 141

theorem :: NUMBER08:106
  m <> 0 & p|^m divides a*b implies p divides a or p divides b;

theorem :: NUMBER08:107
  a,b are_coprime & p|^n divides a*b implies p|^n divides a or p|^n divides b;

:: Problem 141
theorem :: NUMBER08:108
  n <> 0 implies not ex x,y being positive Nat st x*(x+1) = p|^(2*n)*y*(y+1);

begin :: Problem 142

:: Problem 142
theorem :: NUMBER08:109
  for k,x,y being Nat st x^2 - 2*y^2 = k
  for t,u being Nat st t = x-2*y & u = x-y holds
  t^2 - 2*u^2 = -k;


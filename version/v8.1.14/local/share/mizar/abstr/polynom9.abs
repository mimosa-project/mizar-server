:: Prime Representing Polynomial with 10 Unknowns
::  by Karol P\kak
:: 
:: Received December 27, 2022
:: Copyright (c) 2022-2023 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, XBOOLE_0, SUBSET_1, FINSEQ_1, RELAT_1, PARTFUN1, CARD_1,
      FUNCT_1, TARSKI, XXREAL_0, ARYTM_1, ARYTM_3, NAT_1, ORDERS_1, GROUP_1,
      BINOP_1, ALGSTR_0, RLVECT_1, VECTSP_1, LATTICES, ZFMISC_1, FINSET_1,
      STRUCT_0, SUPINF_2, CARD_3, FINSOP_1, ORDINAL4, PRE_POLY, FUNCT_4,
      FUNCOP_1, ORDINAL1, WELLORD2, MESFUNC1, POLYNOM1, ALGSEQ_1, POLYNOM2,
      HILBASIS, GRAPH_2, AFINSQ_1, HILB10_2, CQC_LANG, SQUARE_1, VALUED_1,
      REAL_1, UPROOTS, POLYNOM7, CAT_3, COMPLFLD, COMPLEX1, POLYNOM5, FUNCT_3,
      FINSUB_1, PBOOLE, FINSEQ_2, VALUED_0, BINOP_2, XCMPLX_0, HILB10_7,
      SETWISEO, FUNCT_6, WAYBEL_4, ABIAN, AOFA_I00, FINSEQOP, PRGCOR_2,
      SGRAPH1, NEWTON, INT_1, INT_2, RING_3, QC_LANG1, PYTHTRIP, ABCMIZ_1,
      POLYNOM9, FUNCT_2;
 notations TARSKI, XBOOLE_0, SUBSET_1, CARD_1, ORDINAL1, NUMBERS, RELAT_1,
      FINSOP_1, RELSET_1, FUNCT_1, FINSET_1, XCMPLX_0, PARTFUN1, FUNCT_2,
      RVSUM_1, BINOP_1, BINOP_2, FUNCT_4, FUNCT_7, NAT_1, NEWTON, ORDERS_1,
      FINSEQ_1, FINSEQ_2, STRUCT_0, ALGSTR_0, RLVECT_1, FUNCOP_1, VFUNCT_1,
      VECTSP_1, GROUP_1, XXREAL_0, PBOOLE, DOMAIN_1, VALUED_0, COMPLFLD,
      FUNCT_3, INT_1, VALUED_1, FINSEQOP, COMPLEX1, SQUARE_1, XREAL_0, ABIAN,
      FINSUB_1, SETWISEO, SETFAM_1, RLAFFIN3, HILB10_7, AFINSQ_1, NAT_D,
      RING_3, GROUP_4, PRE_POLY, POLYNOM1, POLYNOM2, UPROOTS, POLYNOM7,
      HILB10_2, FINSEQ_4, BAGORDER, POLYRED, INT_2, PYTHTRIP, HILBASIS;
 constructors REAL_1, FINSOP_1, GROUP_4, RECDEF_1, VFUNCT_1, POLYNOM2,
      SETWISEO, FINSEQOP, BINOP_2, BAGORDER, UPROOTS, POLYNOM7, HILB10_7,
      ABIAN, RLAFFIN3, RING_3, HILB10_2, WSIERP_1, HILBASIS, PYTHTRIP,
      FINSEQ_4, PEPIN, RVSUM_4, POLYRED;
 registrations XBOOLE_0, ORDINAL1, RELSET_1, FUNCOP_1, FINSET_1, XREAL_0,
      NAT_1, INT_1, FINSEQ_1, FINSEQ_2, NEWTON, STRUCT_0, VECTSP_1, POLYNOM1,
      VALUED_0, CARD_1, SUBSET_1, PRE_POLY, RELAT_1, VFUNCT_1, FUNCT_2,
      FUNCT_1, PBOOLE, POLYNOM2, MEMBERED, GROUP_1, FVSUM_1, AFINSQ_1,
      VALUED_1, XCMPLX_0, POLYNOM7, COMPLFLD, SQUARE_1, RLVECT_1, HILB10_7,
      NEWTON04, FOMODEL0, ABIAN, NEWTON03, GR_CY_1, BAGORDER, NUMBERS,
      HILB10_2, PEPIN, XXREAL_0, OSALG_1, WSIERP_1, HILB10_3, FINSEQ_4, NIVEN,
      AOFA_A01, RVSUM_4;
 requirements NUMERALS, BOOLE, SUBSET, REAL, ARITHM;


begin :: Preliminaries

reserve i,j,k,n,m for Nat,
        X for set,
        b,s for bag of X,
        x for object;

theorem :: POLYNOM9:1
  for i be Integer holds i '*' 1_ F_Complex = i;

theorem :: POLYNOM9:2
  for z1,z2 be Complex st Re z1 >=0 & Re z2>=0 & Im z1 >=0 & Im z2>=0 &
    z1^2=z2^2 & z1^2 is Real holds z1=z2;

theorem :: POLYNOM9:3
  for a,b be Integer st a^2 divides b^2 holds
    a divides b;

theorem :: POLYNOM9:4
  for m be positive Nat holds card bool (Seg m\{1}) = 2|^(m-'1);

theorem :: POLYNOM9:5
  for n be Ordinal, A be finite Subset of n holds
    RelIncl n linearly_orders A;

theorem :: POLYNOM9:6
  for x be Element of F_Real st x<>0.F_Real holds
     (power F_Real).(x,n) <> 0.F_Real;

begin :: More on Bags

theorem :: POLYNOM9:7
  for b be bag of X holds
    support (n(#)b) c= support b;

theorem :: POLYNOM9:8
  for b be bag of X st n <> 0 holds support (n(#)b) = support b;

theorem :: POLYNOM9:9
  for b be bag of X holds
    support (b +*(x,n)) c= {x} \/ support b;

registration
  let X be set;
  let b be bag of X;
  let n be natural number;
  cluster n(#)b -> finite-support;
  let x be object;
  cluster b+*(x,n) -> finite-support;
end;

theorem :: POLYNOM9:10
   for b be bag of X holds 0 (#) b = EmptyBag X;

theorem :: POLYNOM9:11
  for n be Ordinal,
      L be right_zeroed add-associative right_complementable
              well-unital distributive Abelian non trivial commutative
              associative non empty doubleLoopStr
   for x being Function of n, L
     for b be bag of n, i be Nat st i<>0
holds
   eval(i (#) b,x) = (power L) . (eval(b,x) , i);

theorem :: POLYNOM9:12
  for X be non empty set,x be Element of X, i be Element of NAT holds
   (EmptyBag X) +*(x,i) = ({x},i)-bag;

theorem :: POLYNOM9:13
  for X be set,x,i st x in X & i <>0 holds
    support((EmptyBag X) +*(x,i))={x};

theorem :: POLYNOM9:14
  for n be Ordinal,
      L be well-unital non trivial doubleLoopStr,
      y be Function of n, L st x in n holds
  eval((EmptyBag n) +*(x,i),y) = power(L).(y.x,i);

theorem :: POLYNOM9:15
  for b be bag of X holds
    b = b +*(x,0) + (EmptyBag X) +* (x,b.x);

theorem :: POLYNOM9:16
  for b be bag of X holds
    support (b +*(x,0)) = support b\{x};

theorem :: POLYNOM9:17
  for n be Ordinal,
      L be right_zeroed add-associative right_complementable
              well-unital distributive Abelian non trivial commutative
              associative non empty doubleLoopStr
  for x being Function of n, L
    for b be bag of n, i be object,j be Nat st i in n holds
  eval (b+*(i,j),x) * (power L).(x/.i, b.i) = eval (b,x) * (power L).(x/.i, j);

definition
  let A,B be set;
  let f be Function of A,B;
  let x be object, b be Element of B;
  redefine func f +*(x,b) -> Function of A,B;
end;

theorem :: POLYNOM9:18
  for n be Ordinal,
      L be well-unital non trivial doubleLoopStr,
      b be bag of n,
      f be Function of n, L,
       u be Element of L st b.x = 0 holds
    eval(b,f +*(x,u)) = eval(b,f);

theorem :: POLYNOM9:19
  for n be Nat, b be bag of n, i st b.i = degree b holds
    b = (EmptyBag n) +* (i,b.i);

theorem :: POLYNOM9:20
  for X be set
    for b1,b2 be bag of X st 2(#)b1 +* (0,b1.0) = 2(#)b2 +* (0,b2.0)
  holds b1 = b2;

theorem :: POLYNOM9:21
  for X be set
    for b be bag of X holds support(2(#)b +* (0,b.0)) = support b;

theorem :: POLYNOM9:22
  for b be bag of X holds
    b +*(x,i+k) = b +*(x,i) + (EmptyBag X) +* (x,k);

theorem :: POLYNOM9:23
  for L be add-associative right_zeroed right_complementable
           non empty doubleLoopStr
    for a be Element of L, b be bag of X holds
      Monom(-a,b) = -Monom(a,b);

theorem :: POLYNOM9:24
  for L be add-associative right_zeroed right_complementable non
     empty doubleLoopStr
    for a1,a2 be Element of L, b be bag of X holds
      Monom(a1,b) + Monom(a2,b) = Monom(a1+a2,b);

theorem :: POLYNOM9:25
  for L be non empty ZeroStr
    for b be bag of X holds Monom(0.L,b) = 0_(X,L);

theorem :: POLYNOM9:26
  for O be Ordinal, R be right_zeroed add-associative right_complementable
      right_unital distributive non trivial doubleLoopStr
    for p be Polynomial of O,R, b be bag of O
  holds Support(p - Monom(p.b,b)) = Support(p)\{b};

theorem :: POLYNOM9:27
  for n be Nat, p be object st p in n
  for i be integer Element of F_Real
   for x be Function of n,F_Real holds
     eval( Monom(i,(EmptyBag n) +*(p,1)),x) = i*(x/.p);

registration
  let X be set;
  let b be bag of X;
  let i be integer Element of F_Real;
  cluster Monom(i,b) -> INT -valued;
end;

begin :: Power of Multivariate Polynomial

reserve O for Ordinal,
        R for right_zeroed add-associative right_complementable
          right_unital distributive non trivial doubleLoopStr,
        p for Polynomial of O, R;

definition
  let n be Ordinal, R be right_zeroed add-associative right_complementable
      right_unital distributive non trivial doubleLoopStr;
  let p be Polynomial of n, R;
  let k be Nat;
  func p `^ k -> Polynomial of n,R equals
:: POLYNOM9:def 1
    (power Polynom-Ring (n, R)) . (p,k);
end;

theorem :: POLYNOM9:28
  R is well-unital implies p `^ 0 = 1_(O,R) & p `^ 1 = p;

theorem :: POLYNOM9:29
  p `^ (n+1) = (p `^ n) *' p;

theorem :: POLYNOM9:30
  for R be Abelian well-unital commutative
      associative right_zeroed add-associative right_complementable
      right_unital distributive non trivial doubleLoopStr
  for p be Polynomial of O, R, f be Function of O, R holds
     eval(p`^k,f) = (power R).( eval(p,f), k);

registration
  let O be Ordinal;
  let p be INT -valued Polynomial of O, F_Real;
  let n be Nat;
  cluster p `^ n -> INT -valued;
end;

begin :: Substitution in Multivariate Polynomials

definition
  let X be set;
  let b,s be bag of X;
  let x be object;
  func Subst(b,x,s) -> bag of X equals
:: POLYNOM9:def 2
    b+*(x,0) + s;
end;

theorem :: POLYNOM9:31
  support Subst(b,x,s) = support b\{x} \/ support s;

theorem :: POLYNOM9:32
  for s1,s2,b be bag of X st
    Subst(b,x,s1) = Subst(b,x,s2) holds s1 = s2;

definition
  let X be Ordinal, L be right_zeroed add-associative right_complementable
      right_unital distributive non trivial doubleLoopStr;
  let t be bag of X;
  let p be Polynomial of X, L;
  let x be object;
  func Subst(t,x,p) -> Series of X, L means
:: POLYNOM9:def 3
     for b be bag of X holds
       ((ex s be bag of X st b = Subst(t,x,s)) implies
          for s be bag of X st b = Subst(t,x,s) holds
         it.b = (p `^ (t.x) ).s) &
       ((for s be bag of X holds b <> Subst(t,x,s)) implies it.b = 0.L);
end;

reserve O for Ordinal,
        R for right_zeroed add-associative right_complementable
             right_unital distributive non trivial doubleLoopStr,
        p for Polynomial of O, R;

theorem :: POLYNOM9:33
  for t,s be bag of O holds
    Subst(t,x,p).Subst(t,x,s) = (p `^ (t.x) ).s;

theorem :: POLYNOM9:34
  for t be bag of O
    for ordP be one-to-one FinSequence of Bags O st
      rng ordP = Support (p `^ (t.x))
      ex ordS be one-to-one FinSequence of Bags O st
        rng ordS = Support Subst(t,x,p) &
        len ordS = len ordP  &
        for j st 1 <= j <= len ordS holds ordS.j = Subst(t,x,ordP/.j);

registration
  let O be Ordinal, R be right_zeroed add-associative right_complementable
      right_unital distributive non trivial doubleLoopStr;
  let t be bag of O;
  let p be Polynomial of O, R;
  let x be object;
  cluster Subst(t,x,p) -> finite-Support;
end;

theorem :: POLYNOM9:35
  for R be commutative associative
           Abelian right_zeroed add-associative right_complementable
           well-unital distributive non trivial doubleLoopStr
    for t be bag of O, p be Polynomial of O, R, i be object
      for x being Function of O, R st i in O holds
    eval(Subst(t,i,p),x) = eval(t, x+*(i,eval(p,x)));

registration
  let X be set, L be add-associative right_zeroed right_complementable
    right-distributive non empty doubleLoopStr,
    p be finite-Support Series of X,L, a be Element of L;
  cluster a * p -> finite-Support;
end;

definition
  let X be Ordinal, L be right_zeroed add-associative right_complementable
      right_unital well-unital distributive non trivial doubleLoopStr;
  let p,s be Polynomial of X, L;
  let x be object;
  func Subst(p,x,s) -> Polynomial  of X, L means
:: POLYNOM9:def 4
   ex S be FinSequence of Polynom-Ring (X, L) st
     it = Sum S & len SgmX(BagOrder X, Support p) = len S &
   for i st i in dom S holds
     S.i = p.(SgmX(BagOrder X, Support p)/.i) *
                Subst(SgmX(BagOrder X, Support p)/.i,x, s);
end;

registration
  let O be Ordinal;
  let t be bag of O;
  let p be INT -valued Polynomial of O, F_Real;
  let x be object;
  cluster Subst(t,x,p) -> INT -valued;
end;

registration
  let O be Ordinal;
  let p,s be INT -valued Polynomial of O, F_Real;
  let x be object;
  cluster Subst(p,x,s) -> INT -valued;
end;

theorem :: POLYNOM9:36
  for O be Ordinal, L be right_zeroed add-associative
    right_complementable Abelian well-unital distributive non trivial
    doubleLoopStr,
    p be Polynomial of O,L,
    x be Function of  O,L
  for P be FinSequence of Polynom-Ring (O, L) st p = Sum P
    for E be FinSequence of L st len E = len P &
      for s be Polynomial of O,L,i st i in dom E & s = P.i holds E.i=eval(s,x)
    holds eval(p,x) = Sum E;

theorem :: POLYNOM9:37
  for R be commutative associative
           Abelian right_zeroed add-associative right_complementable
           well-unital distributive non trivial doubleLoopStr
    for p, s be Polynomial of O, R, i be object
      for x be Function of O, R st i in O holds
    eval(Subst(p,i,s),x) = eval(p, x+*(i,eval(s,x)));

begin :: Set of Variables Used in Multivariate Polynomial

definition
  let X be set, S be ZeroStr;
  let p be Series of X,S;
  func vars p -> Subset of X means
:: POLYNOM9:def 5
    for x be object holds
      x in it iff ex b be bag of X st b in Support p & b.x <> 0;
end;

theorem :: POLYNOM9:38
  for X be Ordinal, S be non empty ZeroStr
    for p be Series of X,S holds
      vars p = {} iff p is Constant;

theorem :: POLYNOM9:39
  for X be set, S be ZeroStr
    for p be Series of X,S holds
        vars p = union{ support b where b is Element of Bags X:b in Support p};

theorem :: POLYNOM9:40
  for X be set, S be ZeroStr
    for p be Series of X,S, b be bag of X st b in Support p holds
       support b c= vars p;

registration
  let X be Ordinal, S be non empty ZeroStr;
  let p be Polynomial of X, S;
  cluster vars p -> finite;
end;

theorem :: POLYNOM9:41
  for X be set, S be right_zeroed non empty addLoopStr
  for p,q be Series of X, S holds
    vars (p+q) c= vars p \/ vars q;

theorem :: POLYNOM9:42
  for X be set, S be add-associative right_zeroed right_complementable
     non empty addLoopStr
  for p be Series of X, S holds
    vars p = vars -p;

theorem :: POLYNOM9:43
  for X be Ordinal, S be add-associative right_complementable right_zeroed
    right_unital distributive non empty doubleLoopStr
  for p,q be Polynomial of X, S holds
    vars (p*'q) c= vars p \/  vars q;

theorem :: POLYNOM9:44
  for X be set, S be add-associative right_zeroed right_complementable
    right-distributive non empty doubleLoopStr
  for p be Series of X,S, a be Element of S
    holds vars (a * p) c= vars p;

theorem :: POLYNOM9:45
  for X be Ordinal, S be right_zeroed add-associative right_complementable
      right_unital distributive well-unital non trivial doubleLoopStr
  for p be Polynomial of X, S, k be Nat holds
     vars (p `^ k) c= vars p;

theorem :: POLYNOM9:46
  for X be Ordinal, S be right_zeroed add-associative right_complementable
    right_unital distributive well-unital non trivial doubleLoopStr
  for p be Polynomial of X, S, t be bag of X holds
    vars Subst(t,x,p) c= (support t)\{x} \/ vars p;

theorem :: POLYNOM9:47
  for X be Ordinal, S be right_zeroed add-associative right_complementable
      right_unital distributive well-unital non trivial doubleLoopStr
  for p,s be Polynomial of X, S holds
    vars Subst(p,x,s) c= (vars p)\{x} \/ vars s;

theorem :: POLYNOM9:48
  for X be set, S be non empty ZeroStr
    for s be Element of S holds vars Monom(s,(EmptyBag X) +*(x,n)) c= {x};

begin :: Polynomial Without the Last Variable

definition
  let n be Nat;
  let L be non empty ZeroStr;
  let p be Series of n+1,L;
  func p removed_last -> Series of n,L means
:: POLYNOM9:def 6
    for b be bag of n holds it.b = p.(b bag_extend 0);
end;

registration
  let n be Nat;
  let L be non empty ZeroStr;
  let p be Polynomial of n+1,L;
  cluster p removed_last -> finite-Support;
end;

theorem :: POLYNOM9:49
  for n be Nat for L be non empty ZeroStr
  for p be Series of n,L
    holds (p extended_by_0) removed_last = p;

theorem :: POLYNOM9:50
  for n be Nat
    for L be non empty ZeroStr
      for p be Series of n+1,L st not n in vars p
  holds (p removed_last) extended_by_0 = p;

theorem :: POLYNOM9:51
  for n be Nat
  for L be right_zeroed add-associative right_complementable
      well-unital distributive non trivial doubleLoopStr
  for p be Polynomial of n+1,L,
    x be Function of n, L,
    y be Function of (n+1), L st not n in vars p & y|n=x
  holds
    eval(p removed_last,x) = eval(p,y);

theorem :: POLYNOM9:52
  for n be Nat
  for L be non empty ZeroStr
  for p be Series of n+1,L holds vars(p removed_last) c= vars p\{n};

theorem :: POLYNOM9:53
  for X be Ordinal
  for S be right_zeroed add-associative right_complementable
    well-unital distributive non trivial doubleLoopStr
  for p be Polynomial of X, S, i be object
  for x be Function of X, S st i in X\vars p
  for s be Element of S holds
    eval(p,x) = eval(p, x+*(i,s));

begin :: Square Root Function -- Some Generalization

definition
  let n be Ordinal;
  let x be object, A be finite Subset of n;
  let f be real-valued Function;
  func _sqrtSegm(f,x,A) -> FinSequence of F_Complex means
:: POLYNOM9:def 7
    len it = 1+card A &
    it.1 = f.x &
    for i be Nat st i in dom SgmX(RelIncl n, A) holds
      (it.(i+1))^2 = f.(SgmX(RelIncl n, A).i) &
      Re (it.(i+1)) >=0 & Im (it.(i+1)) >=0;
end;

definition
  let n be Nat;
  let f be finite Function;
  func count_reps(f,n) -> bag of n means
:: POLYNOM9:def 8
    for i be Nat st i in n holds it.i = card (f"{i+1});
end;

theorem :: POLYNOM9:54
   count_reps({},n) = EmptyBag n;

theorem :: POLYNOM9:55
  for f be FinSequence holds
    count_reps(f^<*i+1*>,n) = count_reps(f,n) + (EmptyBag n) +*(i,1);

definition
  let f be finite Function;
  let L be doubleLoopStr;
  let E be Function;
  func SgnMembershipNumber(f,L,E) -> Element of L  means
:: POLYNOM9:def 9
    for c be Nat st c = card {x where x is Element of dom f:
        x in dom f & f.x in E.x}
    holds
      (c is even implies it = 1.L) &
      (c is odd implies  it = -1.L);
end;

theorem :: POLYNOM9:56
  for L be doubleLoopStr, E be Function holds
    SgnMembershipNumber({},L,E) = 1.L;

theorem :: POLYNOM9:57
  for L be doubleLoopStr
    for f,e be FinSequence, x be object,E be set st
    len f = len e & not x in E holds
      SgnMembershipNumber(f^<*x*>,L,e^<*E*>) = SgnMembershipNumber(f,L,e);

theorem :: POLYNOM9:58
  for L be add-associative right_zeroed right_complementable non
     empty doubleLoopStr
    for f,e be FinSequence, x be object,E be set st len f = len e & x in E
  holds
     SgnMembershipNumber(f^<*x*>,L,e^<*E*>) = - SgnMembershipNumber(f,L,e);

theorem :: POLYNOM9:59
   for L be add-associative right_zeroed right_complementable
            well-unital distributive associative Abelian commutative
            non empty non trivial doubleLoopStr
   for n be Nat
     for f be FinSequence of L
       for xf be Function of n,L st xf = FS2XFS f
         for F be finite set
           for E be Enumeration of F
   for d be FinSequence st d in doms (SignGenOp(f,the addF of L,F) * E)
     holds
  (the multF of L) "**" ((App (SignGenOp(f,the addF of L,F) * E)).d) =
    eval(Monom(SgnMembershipNumber(d,L,E),count_reps(d,n)),xf);

theorem :: POLYNOM9:60
  for f be finite Function st f is with_evenly_repeated_values
    holds count_reps(f,n).x is even;

theorem :: POLYNOM9:61
  for f be FinSequence of Seg n
    holds degree count_reps(f,n) = len f;

theorem :: POLYNOM9:62
  for L be doubleLoopStr
    for f be finite Function, E be Function holds
      SgnMembershipNumber(f,L,E) = 1.L or
      SgnMembershipNumber(f,L,E) = -1.L;

theorem :: POLYNOM9:63
  for f be FinSequence of Seg n,i st
    i in n & count_reps(f,n) = (EmptyBag n) +* (i,len f)
  holds f = len f |-> (i+1);

theorem :: POLYNOM9:64
  i in n implies count_reps(m |-> (i+1),n) = (EmptyBag n) +* (i,m);

begin :: Jpolynom

definition
  let L be Abelian commutative add-associative right_zeroed
           right_complementable associative well-unital distributive
           non empty non trivial doubleLoopStr;
  let m be Nat such that
 m > 1;
  mode Jpolynom of m,L -> Polynomial of m,L means
:: POLYNOM9:def 10
      it.((EmptyBag m) +* (0,2 |^ (m-'1))) = 1.L &
      (for b be bag of m st b in Support it holds
        degree b = 2 |^ (m-'1) &
        (ex i be Integer st  it.b = i '*' 1_L) &
        (  2 |^ (m-'1) in rng b  implies ( it.b = 1.L or it.b = -1.L)) &
         for n holds b.n is even) &
     for f be FinSequence of L
        for xf be Function of m,L st xf = FS2XFS f holds
          eval(it,xf) = SignGenOp(f,the multF of L,the addF of L,Seg m\{1});
end;

definition
  let f be real-valued FinSequence;
  func _sqrt(f) -> FinSequence of F_Complex means
:: POLYNOM9:def 11
    len it = len f &
    it.1 = f.1 &
    for i be Nat st i in dom f & i <> 1 holds
      (it.i)^2 = f.i &
      Re (it.i) >=0 & Im (it.i) >=0;
end;

definition
  let L be non empty 1-sorted;
  let m be set;
  let P be Series of m,L;
  func JsqrtSeries P -> Series of m,L means
:: POLYNOM9:def 12
     for b be bag of m holds
       it.b = P.( 2(#)b +* (0,b.0));
end;

registration
  let L be non empty ZeroStr;
  let m be Ordinal;
  let P be Polynomial of m,L;
  cluster JsqrtSeries P -> finite-Support;
end;

theorem :: POLYNOM9:65
  for L be non empty ZeroStr
  for m be Nat
  for p be Polynomial of m,L st
    for b be bag of m,n st b in Support p holds b.n is even
  for CS be one-to-one FinSequence of Bags m st
    rng CS = Support JsqrtSeries p
  ex S be one-to-one FinSequence of Bags m st
    len S = len CS & rng S = Support p &
    for i st i in dom S holds S.i = 2(#)(CS/.i) +* (0,(CS/.i.0));

theorem :: POLYNOM9:66
  for m be non trivial Nat
    for p be Jpolynom of m,F_Complex
      for f be FinSequence of REAL
        for xf,cxf be Function of m,F_Complex st
      xf = FS2XFS f & cxf = FS2XFS _sqrt(f) holds
  eval(p,cxf) = eval(JsqrtSeries p,xf);

theorem :: POLYNOM9:67
  for fc be FinSequence of F_Complex, fr be FinSequence of F_Real st fc = fr
    holds Product fc = Product fr;

theorem :: POLYNOM9:68
  for m be Ordinal for b be bag of m
    for xc be Function of m,F_Complex,xr be Function of m,F_Real st
      xc = xr
  holds eval(b,xc) = eval(b,xr);

theorem :: POLYNOM9:69
  for m be Ordinal
     for Pc be Polynomial of m,F_Complex,
         Pr be Polynomial of m,F_Real st Pc = Pr
      for xc be Function of m,F_Complex,
          xr be  Function of m,F_Real st xc = xr
  holds eval(Pc,xc) = eval(Pr,xr);

definition
  let m be Nat such that
 m >1;
  let M be Jpolynom of m,F_Complex;
  func Jsqrt M-> INT -valued Polynomial of m,F_Real equals
:: POLYNOM9:def 13
    JsqrtSeries M;
end;

theorem :: POLYNOM9:70
  for m be non trivial Nat, M be Jpolynom of m,F_Complex
    for f be Function of m,F_Real
  holds
    eval(Jsqrt M,f)=0 iff ex A be Subset of Seg m\{1} st
      (the addF of F_Complex) "**"
      SignGen(_sqrt XFS2FS(@f),the addF of F_Complex,A) = 0;

registration
  let x,y,z,t be object;
  cluster <%x,y,z,t%> -> 4 -element;
end;

registration
  let x be Real;
  cluster <%x%> -> REAL-valued;
end;

registration
  let x,y,z,t be Real;
  cluster <%x,y,z,t%> -> REAL -valued;
end;

theorem :: POLYNOM9:71
  for f be real-valued FinSequence st i >1 & f.i >=0 holds
    (_sqrt f).i = sqrt (f.i);

theorem :: POLYNOM9:72
  for f be FinSequence of F_Complex,A be set holds
   ex i be Integer st (i = 1 or i =-1) &
       SignGen(f,the addF of F_Complex,A).x = i * (f.x);

begin :: Prime Representing Polynomial Construction

theorem :: POLYNOM9:73
  for M be Jpolynom of 4,F_Complex
    for x1,x2,x3 be Nat st x1 is odd & x2 is odd
      for z be Integer st eval(Jsqrt M,@<%z,x1,4*x2,16*x3%>)=0 holds
        x1 is square & x2 is square  & x3 is square &
        -z <= sqrt x1+2*sqrt x2 + 4*sqrt x3;

theorem :: POLYNOM9:74
  for M be Jpolynom of 4,F_Complex
    for x1,x2,x3 be Nat st x1 is square & x2 is square & x3 is square
      ex z be Integer st -z = sqrt x1 + 2* sqrt x2 + 4 *sqrt x3 &
        eval(Jsqrt M,@<%z,x1,4*x2,16*x3%>)=0;

theorem :: POLYNOM9:75
  for L being right_zeroed add-associative right_complementable
       well-unital distributive non trivial doubleLoopStr,
     p being Polynomial of n,L
     ex q being Polynomial of n+m,L st
        rng q c= rng p \/ {0.L}&
        (for b be bag of n+m holds b in Support q iff b|n in Support p &
                 for i st i >= n holds b.i=0 ) &
        (for b be bag of n+m st b in Support q holds
           q.b = p.(b|n)) &
     for x being Function of n, L,
         y being Function of (n+m), L st y|n=x
       holds eval(p,x) = eval(q,y);

theorem :: POLYNOM9:76
  for M be Jpolynom of 4,F_Complex
    ex K2 be INT -valued Polynomial of 6,F_Real st
      (for f be Function of 6,F_Real st f.5 <>0
       holds eval(K2,f) = (power F_Real).(f/.5,8)*
         eval(Jsqrt M, @ <%- (f.0) + (f.4/f.5),f.1,f.2,f.3%>)) &
            for f be INT -valued Function of 6,F_Real st f.5 <>0 &
                  eval(K2,f) = 0 holds f.5 divides f.4;

registration
  let x be Integer;
  cluster <%x%> -> INT -valued;
end;

registration
  let x,y,z,t be Integer;
  cluster <%x,y,z,t%> -> INT -valued;
end;

theorem :: POLYNOM9:77
  ex K3 be INT -valued Polynomial of 8,F_Real st
    for x1,x2,x3,P,R,N be Nat,V be Integer st
        x1 is odd & x2 is odd & P > 0 &
        N > sqrt x1 + 2*sqrt x2 + 4*sqrt x3 +R
      holds
        (x1 is square & x2 is square  & x3 is square & P divides R & V>=0)
      iff
        ex z be Nat st for f be Function of 8,F_Real
              st f = <%z,x1,4*x2,16*x3%>^<%R,P,N,V%> holds eval(K3,f) = 0;

theorem :: POLYNOM9:78
  for X be set, S be right_zeroed non empty addLoopStr
  for p,q be Series of X, S
  for V be set st vars p c= V & vars q c= V holds
    vars (p+q) c= V;

theorem :: POLYNOM9:79
  for X be Ordinal, S be add-associative right_complementable right_zeroed
    right_unital distributive non empty doubleLoopStr
  for p,q be Polynomial of X, S
  for V be set st vars p c= V & vars q c= V holds
    vars (p*'q) c= V;

theorem :: POLYNOM9:80
  for X be set, S be add-associative right_zeroed right_complementable
    right-distributive non empty doubleLoopStr
  for p be Series of X,S, a be Element of S
  for V be set st vars p c= V holds vars (a * p) c= V;

theorem :: POLYNOM9:81
  for X be set, S be add-associative right_zeroed right_complementable
    non empty addLoopStr
  for p,q be Series of X, S
  for V be set st vars p c= V & vars q c= V holds vars (p-q) c= V;

theorem :: POLYNOM9:82
  ex Z be INT -valued Polynomial of 17,F_Real st
    vars Z c= {0}\/(17\8) &
  for xk be Nat st xk > 0 holds
    xk+1 is prime iff
    ex x being INT -valued Function of 17, F_Real st
       x/.8 = xk & x/.9 is positive Nat & x/.10 is positive Nat &
       x/.11 is positive Nat & x/.12 is positive Nat & x/.13 is positive Nat &
       x/.14 is Nat & x/.15 is Nat & x/.16 is Nat & x/.0 is Nat &
       eval(Z,x) = 0.F_Real;

theorem :: POLYNOM9:83
  for L being right_zeroed add-associative right_complementable
       well-unital distributive non trivial doubleLoopStr,
     p being Polynomial of n+m,L st vars p c= n
     ex q being Polynomial of n,L st
        vars q c= n
         & rng q c= rng p &
        (for b be bag of n+m holds b|n in Support q &
         (for i st i >= n holds b.i=0) iff b in Support p)&
        (for b be bag of n+m st b in Support p holds
           q.(b|n) = p.b) &
     for x being Function of (n+m), L,
         y being Function of n, L st x|n=y
       holds eval(p,x) = eval(q,y);

theorem :: POLYNOM9:84
  for X be Ordinal
  for L be non empty ZeroStr
  for s be Series of X,L
  for perm be Permutation of X
    holds vars (s permuted_by perm) c= perm.:vars(s);

::$N Prime Representing Polynomial with 10 Variables

theorem :: POLYNOM9:85
  ex Poly be INT -valued Polynomial of 10,F_Real st
    for k be positive Nat holds
       k+1 is prime
    iff ex v being natural-valued Function of 10,F_Real st
          v.1 = k & eval(Poly,v) = 0.F_Real;

:: Existence and Uniqueness of Algebraic Closures
::  by Christoph Schwarzweller
:: 
:: Received December 27, 2022
:: Copyright (c) 2022-2023 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies ARYTM_3, VECTSP_1, ALGSTR_0, TARSKI, EQREL_1, STRUCT_0, NAT_1,
      SUBSET_1, SUPINF_2, POLYNOM8, FUNCT_2, INT_2, MESFUNC1, C0SP1, CARD_1,
      GROUP_6, POLYNOM1, POLYNOM3, FUNCSDOM, RLVECT_1, GROUP_2, EC_PF_1,
      HURWITZ, FINSEQ_1, FINSET_1, FUNCT_1, RELAT_1, PRALG_1, BINOP_1,
      XBOOLE_0, NUMBERS, POLYNOM5, GROUP_1, ZFMISC_1, VECTSP_2, MOD_4,
      GLIB_000, REARRAN1, CAT_1, YELLOW_8, RATFUNC1, RING_2, RING_3, RING_4,
      MSSUBFAM, LATTICES, IDEAL_1, GROEB_2, FDIFF_1, ALGNUM_1, ARYTM_1,
      FIELD_4, FIELD_2, FOMODEL1, REALSET1, WELLORD1, XXREAL_0, QUOFIELD,
      QC_LANG1, XCMPLX_0, FIELD_6, GCD_1, ORDERS_1, RING_5, FIELD_1, RLVECT_2,
      POLYNOM2, FIELD_7, WAYBEL20, FIELD_8, FACIRC_1, SEQ_4, RELAT_2, MCART_1,
      FIELD_12;
 notations TARSKI, XBOOLE_0, SUBSET_1, BINOP_1, RELAT_1, RELSET_1, FUNCT_1,
      ORDINAL1, FUNCT_2, ZFMISC_1, NUMBERS, CARD_1, PARTFUN1, REALSET1,
      RELAT_2, XCMPLX_0, XXREAL_0, NAT_1, VFUNCT_1, FINSET_1, ALGSEQ_1,
      XTUPLE_0, ORDERS_1, WELLORD1, POLYNOM3, POLYNOM5, POLYNOM4, STRUCT_0,
      GROUP_1, GROUP_6, MOD_4, GCD_1, PRALG_1, ALGSTR_0, QUOFIELD, IDEAL_1,
      RLVECT_1, VECTSP_2, HURWITZ, VECTSP_1, C0SP1, EC_PF_1, RATFUNC1,
      RINGCAT1, EQREL_1, RING_1, RING_2, RING_3, RING_4, RING_5, ALGNUM_1,
      FIELD_1, FIELD_2, FIELD_4, FIELD_6, FIELD_7, FIELD_8;
 constructors ARYTM_1, POLYNOM4, VFUNCT_1, RATFUNC1, GCD_1, REALSET1, RINGCAT1,
      ALGSEQ_1, EQREL_1, ALGNUM_1, TSEP_1, RING_5, ORDERS_1, PRALG_1, FIELD_2,
      FIELD_7, FIELD_8;
 registrations XBOOLE_0, ORDINAL1, RELSET_1, XREAL_0, NAT_1, INT_1, STRUCT_0,
      VECTSP_1, EC_PF_1, XTUPLE_0, FUNCT_2, ALGSTR_0, MOD_4, RLVECT_1,
      QUOFIELD, RELAT_2, FUNCT_1, VFUNCT_1, CARD_1, FINSET_1, RATFUNC1,
      RELAT_1, RINGCAT1, RING_2, RING_3, RING_4, RING_5, REALSET1, INT_3,
      POLYNOM3, POLYNOM5, FIELD_1, FIELD_2, FIELD_4, FIELD_6, FIELD_7;
 requirements NUMERALS, SUBSET, BOOLE, REAL, ARITHM;


begin :: Preliminaries

registration
let L be non empty doubleLoopStr;
cluster the doubleLoopStr of L -> non empty;
end;

registration
let L be non trivial doubleLoopStr;
cluster the doubleLoopStr of L -> non trivial;
end;

registration
let L be non degenerated doubleLoopStr;
cluster the doubleLoopStr of L -> non degenerated;
end;

registration
let L be add-associative doubleLoopStr;
cluster the doubleLoopStr of L -> add-associative;
end;

registration
let L be right_zeroed doubleLoopStr;
cluster the doubleLoopStr of L -> right_zeroed;
end;

registration
let L be right_complementable doubleLoopStr;
cluster the doubleLoopStr of L -> right_complementable;
end;

registration
let L be Abelian doubleLoopStr;
cluster the doubleLoopStr of L -> Abelian;
end;

registration
let L be associative doubleLoopStr;
cluster the doubleLoopStr of L -> associative;
end;

registration
let L be well-unital non empty doubleLoopStr;
cluster the doubleLoopStr of L -> well-unital;
end;

registration
let L be left-distributive non empty doubleLoopStr;
cluster the doubleLoopStr of L -> left-distributive;
end;

registration
let L be right-distributive non empty doubleLoopStr;
cluster the doubleLoopStr of L -> right-distributive;
end;

registration
let L be commutative doubleLoopStr;
cluster the doubleLoopStr of L -> commutative;
end;

registration
let L be domRing-like non empty doubleLoopStr;
cluster the doubleLoopStr of L -> domRing-like;
end;

registration
let L be almost_left_invertible doubleLoopStr;
cluster the doubleLoopStr of L -> almost_left_invertible;
end;

theorem :: FIELD_12:1
for F being Field holds the doubleLoopStr of F == F;

registration
let F be Field;
cluster strict for FieldExtension of F;
end;

registration
let F be Field;
let L be F-monomorphic Field;
cluster F-homomorphic F-monomorphic for FieldExtension of L;
end;

registration
let F be Field;
cluster monic irreducible for Element of the carrier of Polynom-Ring F;
end;

registration
let F be non algebraic-closed Field;
cluster monic non constant non with_roots for
                            Element of the carrier of Polynom-Ring F;
end;

theorem :: FIELD_12:2
for F1 being Field,
    F2 being F1-monomorphic F1-homomorphic Field
for h being Monomorphism of F1,F2
for p being Element of the carrier of Polynom-Ring F1
holds (PolyHom h).(-p) = -(PolyHom h).p;

theorem :: FIELD_12:3
for F1 being Field,
    F2 being F1-monomorphic F1-homomorphic Field
for h being Monomorphism of F1,F2
for p,q being Element of the carrier of Polynom-Ring F1
holds p divides q implies (PolyHom h).p divides (PolyHom h).q;

registration
let F1 be Field,
    F2 be F1-monomorphic F1-homomorphic Field;
let h be Monomorphism of F1,F2;
let p be non constant Element of the carrier of Polynom-Ring F1;
cluster (PolyHom h).p -> non constant for
                             Element of the carrier of Polynom-Ring F2;
end;

definition
let R be gcdDomain;
let a,b be Element of R;
pred a,b are_coprime means
:: FIELD_12:def 1
  1.R is a_gcd of a,b;
end;

theorem :: FIELD_12:4
for F being Field
for p,q being Element of the carrier of Polynom-Ring F
holds p,q are_coprime iff p gcd q = 1_.(F);

theorem :: FIELD_12:5
for F being Field
for p,q being Element of the carrier of Polynom-Ring F
st p,q are_coprime holds p,q have_no_common_roots;

theorem :: FIELD_12:6
for F being Field
for p being Element of the carrier of Polynom-Ring F
holds (ex E being FieldExtension of F,
          a being F-algebraic Element of E st p = MinPoly(a,F)) iff
      (p is monic irreducible);

theorem :: FIELD_12:7
for F being Field
for p being irreducible Element of the carrier of Polynom-Ring F
ex E being F-finite FieldExtension of F
st deg(E,F) = deg p & p is_with_roots_in E;

theorem :: FIELD_12:8
for F being Field
for p being non constant Element of the carrier of Polynom-Ring F
ex E being F-finite FieldExtension of F
st p is_with_roots_in E & deg(E,F) <= deg p;

theorem :: FIELD_12:9
for F being Field
for E being F-algebraic FieldExtension of F
for K being E-extending FieldExtension of F
for a being Element of K st a is E-algebraic holds a is F-algebraic;

theorem :: FIELD_12:10
for F1,F2,L being Field
for E1 being FieldExtension of F1,
    K1 being E1-extending FieldExtension of F1
for h1 being Function of F1,L, h2 being Function of E1,L,
    h3 being Function of K1,L
st h2 is h1-extending & h3 is h2-extending holds h3 is h1-extending;

registration
let F be Field;
cluster -> F-monomorphic F-homomorphic for FieldExtension of F;
end;

registration
let F be Field,
    E be FieldExtension of F;
cluster E-homomorphic E-monomorphic F-homomorphic F-monomorphic for Field;
end;

begin :: Sequences of fields

definition
mode sequence -> Function means
:: FIELD_12:def 2
  dom it = NAT;
end;

registration
cluster -> NAT-defined for sequence;
end;

definition
let f be Relation;
attr f is Field-yielding means
:: FIELD_12:def 3
  for x being object st x in rng f holds x is Field;
end;

registration
cluster Field-yielding for sequence;
end;

registration
cluster Field-yielding -> 1-sorted-yielding for Function;
end;

definition
let f be Field-yielding sequence;
let i be Element of NAT;
redefine func f.i -> Field;
end;

definition
let f be Field-yielding sequence;
let i be Nat;
redefine func f.i -> Field;
end;

scheme :: FIELD_12:sch 1
RecExField { A() -> Field, P[object,Field,Field] }:
ex f being Field-yielding sequence
  st f.0 = A() & for n being Nat holds P[n,f.n,f.(n+1)]
provided
for n being Nat for x being Field ex y being Field st P[n,x,y];

definition
let f be Field-yielding sequence;
attr f is ascending means
:: FIELD_12:def 4
  for i being Element of NAT holds f.(i+1) is FieldExtension of f.i;
end;

registration
cluster ascending for Field-yielding sequence;
end;

definition
let f be Field-yielding sequence;
func Carrier f -> non empty set equals
:: FIELD_12:def 5
 union(the set of all the carrier of f.i where i is Element of NAT);
end;

theorem :: FIELD_12:11
for f being ascending Field-yielding sequence
for i,j being Element of NAT
for a being Element of f.i holds i <= j implies a in the carrier of f.j;

theorem :: FIELD_12:12
for f being ascending Field-yielding sequence
for i,j being Element of NAT st i <= j holds f.j is FieldExtension of f.i;

theorem :: FIELD_12:13
for f being ascending Field-yielding sequence
for i,j being Element of NAT
for xi,yi being Element of f.i
for xj,yj being Element of f.j
st xi = xj & yi = yj holds xi + yi = xj + yj & xi * yi = xj * yj;

definition
let f be ascending Field-yielding sequence;
func addseq f -> BinOp of Carrier f means
:: FIELD_12:def 6
   for a,b being Element of Carrier f
   ex i being Element of NAT, x,y being Element of f.i
   st x = a & y = b & it.(a,b) = x + y;
end;

definition
let f be ascending Field-yielding sequence;
func multseq f -> BinOp of Carrier f means
:: FIELD_12:def 7
   for a,b being Element of Carrier f
   ex i being Element of NAT, x,y being Element of f.i
   st x = a & y = b & it.(a,b) = x * y;
end;

definition
let f be ascending Field-yielding sequence;
func SeqField f -> strict doubleLoopStr means
:: FIELD_12:def 8
  the carrier of it = Carrier f &
  the addF of it = addseq f &
  the multF of it = multseq f &
  the OneF of it = 1.(f.0) &
  the ZeroF of it = 0.(f.0);
end;

theorem :: FIELD_12:14
for f being ascending Field-yielding sequence
for i being Element of NAT
holds 1.(SeqField f) = 1.(f.i) & 0.(SeqField f) = 0.(f.i);

theorem :: FIELD_12:15
for f being ascending Field-yielding sequence
for a,b being Element of SeqField f
for i being Element of NAT, x,y being Element of f.i
st x = a & y = b holds a + b = x + y & a * b = x * y;

registration
let f be ascending Field-yielding sequence;
cluster SeqField f -> non degenerated;
end;

registration
let f be ascending Field-yielding sequence;
cluster SeqField f -> Abelian
                      add-associative right_zeroed right_complementable;
end;

registration
let f be ascending Field-yielding sequence;
cluster SeqField f -> commutative associative well-unital distributive
                      almost_left_invertible;
end;

theorem :: FIELD_12:16
for f being ascending Field-yielding sequence
for i being Element of NAT holds (f.i) is Subfield of (SeqField f);

theorem :: FIELD_12:17
for E being Field
for f being ascending Field-yielding sequence
st for i being Element of NAT holds (f.i) is Subfield of E
holds (SeqField f) is Subfield of E;

theorem :: FIELD_12:18
for f being ascending Field-yielding sequence
for X being finite Subset of (SeqField f)
ex i being Element of NAT st X c= the carrier of (f.i);

begin :: Maximal Algebraic and Algebraic Closed Fields

definition
let F be Field;
attr F is maximal_algebraic means
:: FIELD_12:def 9
  for E being F-algebraic FieldExtension of F holds E == F;
end;

theorem :: FIELD_12:19
for F being Field holds F is maximal_algebraic iff F is algebraic-closed;

theorem :: FIELD_12:20
for F being Field holds
F is algebraic-closed iff
for p being non constant Polynomial of F holds p is with_roots;

theorem :: FIELD_12:21
for F being Field holds
F is algebraic-closed iff
for p being irreducible Element of the carrier of Polynom-Ring F
holds deg p = 1;

theorem :: FIELD_12:22
for F being Field holds
F is algebraic-closed iff
for p being non constant Polynomial of F holds p splits_in F;

theorem :: FIELD_12:23
for F being Field holds
F is algebraic-closed iff
for p being non constant monic Polynomial of F holds p is Ppoly of F;

theorem :: FIELD_12:24
for F being Field holds
F is algebraic-closed iff
for p,q being Element of the carrier of Polynom-Ring F
holds p,q are_coprime iff p,q have_no_common_roots;

theorem :: FIELD_12:25
for F being Field holds
F is algebraic-closed iff
for E being F-algebraic FieldExtension of F holds E == F;

theorem :: FIELD_12:26
for F being Field holds
F is algebraic-closed iff
for E being F-finite FieldExtension of F holds E == F;

registration
cluster algebraic-closed -> infinite for Field;
end;

begin :: Existence of Algebraic Closures

definition
let F be Field;
mode ClosureSequence of F -> ascending Field-yielding sequence means
:: FIELD_12:def 10
  it.0 = F &
  for i being Element of NAT
  for K being Field,
      E being FieldExtension of K st K = it.i & E = it.(i+1)
  holds for p being non constant Element of the carrier of Polynom-Ring K
        holds p is_with_roots_in E;
end;

theorem :: FIELD_12:27
for f being ascending Field-yielding sequence
for p being Polynomial of (SeqField f)
ex i being Element of NAT st p is Polynomial of (f.i);

registration
let F be Field;
let f be ClosureSequence of F;
cluster SeqField f -> F-extending;
cluster SeqField f -> algebraic-closed;
end;

theorem :: FIELD_12:28
for F being Field ex E being FieldExtension of F st E is algebraic-closed;

definition
let F be Field;
mode AlgebraicClosure of F -> FieldExtension of F means
:: FIELD_12:def 11
  it is F-algebraic &
  it is algebraic-closed;
end;

registration
let F be Field;
cluster -> F-algebraic algebraic-closed for AlgebraicClosure of F;
end;

registration
let F be Field;
cluster F-homomorphic F-monomorphic for algebraic-closed Field;
end;

theorem :: FIELD_12:29
for F being Field ex E being Field st E is AlgebraicClosure of F;

theorem :: FIELD_12:30
for F being Field
for E being F-algebraic FieldExtension of F
ex A being AlgebraicClosure of F st E is Subfield of A;

registration
let F be Field;
let E be F-algebraic FieldExtension of F;
cluster E-extending for AlgebraicClosure of F;
end;

theorem :: FIELD_12:31
for F being Field
for E being F-algebraic FieldExtension of F
for A being AlgebraicClosure of E holds A is AlgebraicClosure of F;

theorem :: FIELD_12:32
for F being Field
for E being FieldExtension of F
for A being AlgebraicClosure of F
st A is E-extending holds A is AlgebraicClosure of E;

theorem :: FIELD_12:33
for F being Field
for A1,A2 being AlgebraicClosure of F st A1 is A2-extending holds A2 == A1;

begin :: Some more Preliminaries

registration
let R being Ring,
    S being R-homomorphic Ring;
cluster S-homomorphic R-homomorphic for Ring;
end;

registration
let R being Ring,
    S being R-homomorphic Ring,
    T being S-homomorphic Ring;
let f being additive Function of R,S,
    g being additive Function of S,T;
cluster g*f -> additive for Function of R,T;
end;

registration
let R being Ring,
    S being R-homomorphic Ring,
    T being S-homomorphic Ring;
let f being multiplicative Function of R,S,
    g being multiplicative Function of S,T;
cluster g*f -> multiplicative for Function of R,T;
end;

registration
let R being Ring,
    S being R-homomorphic Ring,
    T being S-homomorphic Ring;
let f being unity-preserving Function of R,S,
    g being unity-preserving Function of S,T;
cluster g*f -> unity-preserving for Function of R,T;
end;

theorem :: FIELD_12:34
for F being Field
for E being FieldExtension of F holds id F is Monomorphism of F,E;

theorem :: FIELD_12:35
for R being Ring,
    S being R-homomorphic Ring, T being S-homomorphic R-homomorphic Ring
for f being additive Function of R,S, g being additive Function of S,T
holds PolyHom(g*f) = (PolyHom g) * (PolyHom f);

theorem :: FIELD_12:36
for R being Ring,
    S being R-homomorphic Ring, T being R-homomorphic S-homomorphic Ring
for f being additive Function of R,S, g being additive Function of S,T
st g * f = id R holds PolyHom(g*f) = id(Polynom-Ring R);

theorem :: FIELD_12:37
for F1,F2 being Field,
    E being FieldExtension of F1 st F1 == F2 holds E is FieldExtension of F2;

theorem :: FIELD_12:38
for F1,F2 being Field
st F1 == F2 holds 0_.(F1) = 0_.(F2) & 1_.(F1) = 1_.(F2);

theorem :: FIELD_12:39
for F1,F2 being Field
for p being Polynomial of F1 st F1 == F2 holds p is Polynomial of F2;

theorem :: FIELD_12:40
for F1,F2 being Field
for p being non zero Polynomial of F1
st F1 == F2 holds p is non zero Polynomial of F2;

theorem :: FIELD_12:41
for F1,F2 being Field
for p being Polynomial of F1 for q being Polynomial of F2
for a being Element of F1, b being Element of F2
st F1 == F2 & p = q & a = b holds eval(p,a) = eval(q,b);

theorem :: FIELD_12:42
for F1,F2 being Field,
    E1 being FieldExtension of F1, E2 being FieldExtension of F2
for p being Polynomial of F1 for q being Polynomial of F2
for a being Element of E1, b being Element of E2
st F1 == F2 & E1 == E2 & p = q & a = b holds Ext_eval(p,a) = Ext_eval(q,b);

theorem :: FIELD_12:43
for F1,F2 being Field, E being F1-algebraic FieldExtension of F1
st F1 == F2 holds E is F2-algebraic FieldExtension of F2;

theorem :: FIELD_12:44
for F1,F2 being Field, E being AlgebraicClosure of F1
st F1 == F2 holds E is AlgebraicClosure of F2;

definition
let X be set;
attr X is Field-membered means
:: FIELD_12:def 12
  for x being object st x in X holds x is Field;
end;

registration
cluster Field-membered non empty for set;
end;

definition
let X be non empty Field-membered set;
redefine mode Element of X -> Field;
end;

definition
let F be Field;
func SubFields F -> set means
:: FIELD_12:def 13
  for o being object holds
  o in it iff (ex K being strict Field st o = K & K is Subfield of F);
end;

registration
let F be Field;
cluster SubFields F -> non empty Field-membered;
end;

theorem :: FIELD_12:45
for F,K being Field holds K in SubFields F iff K is strict Subfield of F;

begin :: Uniqueness of Algebraic Closures

definition
let F be Field, E be FieldExtension of F;
let L be F-monomorphic Field;
let f be Monomorphism of F,L;
func Ext_Set(f,E) -> non empty set equals
:: FIELD_12:def 14
  { [K,g] where K is Element of SubFields(E), g is Function of K,L :
    ex K1 being FieldExtension of F,
       g1 being Function of K1,L
    st K1 = K & g1 = g & g1 is monomorphism f-extending };
end;

registration
let F be Field, E be FieldExtension of F;
let L be F-monomorphic Field;
let f be Monomorphism of F,L;
cluster -> pair for Element of Ext_Set(f,E);
end;

definition
let F be Field, E be FieldExtension of F;
let L be F-monomorphic Field;
let f be Monomorphism of F,L;
let p be Element of Ext_Set(f,E);
redefine func p`1 -> strict FieldExtension of F;
end;

definition
let F be Field, E be FieldExtension of F;
let L be F-monomorphic Field;
let f be Monomorphism of F,L;
let p be Element of Ext_Set(f,E);
redefine func p`2 -> Function of (p`1),L;
end;

theorem :: FIELD_12:46
for F being Field, E being FieldExtension of F,
    L being F-monomorphic Field,
    f being Monomorphism of F,L
for K being strict FieldExtension of F,
    g being Function of K,L st g is monomorphism
holds [K,g] in Ext_Set(f,E) iff
      (E is FieldExtension of K & F is Subfield of K & g is f-extending);

definition
let F be Field, E be FieldExtension of F;
let L be F-monomorphic Field;
let f be Monomorphism of F,L;
let p,q be Element of Ext_Set(f,E);
pred p <= q means
:: FIELD_12:def 15
  q`1 is FieldExtension of p`1 &
  for K being FieldExtension of p`1, g being Function of K,L
      st K = q`1 & g = q`2 holds g is (p`2)-extending;
end;

definition
let F be Field, E be FieldExtension of F;
let L be F-monomorphic Field;
let f be Monomorphism of F,L;
let S be non empty Subset of Ext_Set(f,E);
attr S is ascending means
:: FIELD_12:def 16
  for p,q being Element of S holds p <= q or q <= p;
end;

registration
let F be Field, E be FieldExtension of F;
let L be F-monomorphic Field;
let f be Monomorphism of F,L;
cluster ascending for non empty Subset of Ext_Set(f,E);
end;

theorem :: FIELD_12:47
for F being Field, E being FieldExtension of F
for L being F-monomorphic Field,
    f being Monomorphism of F,L
for p being Element of Ext_Set(f,E) holds p <= p;

theorem :: FIELD_12:48
for F being Field, E being FieldExtension of F
for L being F-monomorphic Field,
    f being Monomorphism of F,L
for p,q being Element of Ext_Set(f,E) st p <= q & q <= p holds p = q;

theorem :: FIELD_12:49
for F being Field, E being FieldExtension of F
for L being F-monomorphic Field,
    f being Monomorphism of F,L
for p,q,r being Element of Ext_Set(f,E) st p <= q & q <= r holds p <= r;

definition
let F be Field, E be FieldExtension of F;
let L be F-monomorphic Field;
let f be Monomorphism of F,L;
let S be non empty Subset of Ext_Set(f,E);
func unionCarrier(S,f,E) -> non empty set equals
:: FIELD_12:def 17
  union(the set of all the carrier of p`1 where p is Element of S);
end;

definition
let F be Field, E be FieldExtension of F;
let L be F-monomorphic Field;
let f be Monomorphism of F,L;
let S be ascending non empty Subset of Ext_Set(f,E);
func unionAdd(S,f,E) -> BinOp of unionCarrier(S,f,E) means
:: FIELD_12:def 18
   for a,b being Element of unionCarrier(S,f,E)
   ex p being Element of S, x,y being Element of p`1
   st x = a & y = b & it.(a,b) = x + y;
func unionMult(S,f,E) -> BinOp of unionCarrier(S,f,E) means
:: FIELD_12:def 19
   for a,b being Element of unionCarrier(S,f,E)
   ex p being Element of S, x,y being Element of p`1
   st x = a & y = b & it.(a,b) = x * y;
end;

definition
let F be Field, E be FieldExtension of F;
let L be F-monomorphic Field;
let f be Monomorphism of F,L;
let S be ascending non empty Subset of Ext_Set(f,E);
func unionOne(S,f,E) -> Element of unionCarrier(S,f,E) means
:: FIELD_12:def 20
  ex p being Element of S st it = 1.(p`1);
func unionZero(S,f,E) -> Element of unionCarrier(S,f,E) means
:: FIELD_12:def 21
  ex p being Element of S st it = 0.(p`1);
end;

definition
let F be Field, E be FieldExtension of F;
let L be F-monomorphic Field;
let f be Monomorphism of F,L;
let S be ascending non empty Subset of Ext_Set(f,E);
func unionField(S,f,E) -> strict doubleLoopStr means
:: FIELD_12:def 22
  the carrier of it = unionCarrier(S,f,E) &
  the addF of it = unionAdd(S,f,E) &
  the multF of it = unionMult(S,f,E) &
  the OneF of it = unionOne(S,f,E) &
  the ZeroF of it = unionZero(S,f,E);
end;

theorem :: FIELD_12:50
for F being Field, E being FieldExtension of F,
    L being F-monomorphic Field
for f being Monomorphism of F,L,
    S being non empty Subset of Ext_Set(f,E)
for p,q being Element of S
for a being Element of p`1 holds p <= q implies a in the carrier of q`1;

theorem :: FIELD_12:51
for F being Field, E being FieldExtension of F,
    L being F-monomorphic Field
for f being Monomorphism of F,L,
    S being ascending non empty Subset of Ext_Set(f,E)
for p being Element of S
holds 1.unionField(S,f,E) = 1.(p`1) & 0.unionField(S,f,E) = 0.(p`1);

theorem :: FIELD_12:52
for F being Field, E being FieldExtension of F,
    L being F-monomorphic Field
for f being Monomorphism of F,L,
    S being ascending non empty Subset of Ext_Set(f,E)
for a,b being Element of unionField(S,f,E)
for p being Element of S, x,y being Element of p`1
st x = a & y = b holds a + b = x + y & a * b = x * y;

registration
let F be Field, E be FieldExtension of F;
let L be F-monomorphic Field;
let f be Monomorphism of F,L;
let S be ascending non empty Subset of Ext_Set(f,E);
cluster unionField(S,f,E) -> non degenerated;
end;

registration
let F be Field, E be FieldExtension of F;
let L be F-monomorphic Field;
let f be Monomorphism of F,L;
let S be ascending non empty Subset of Ext_Set(f,E);
cluster unionField(S,f,E) -> Abelian
                             add-associative right_zeroed right_complementable;
end;

registration
let F be Field, E be FieldExtension of F;
let L be F-monomorphic Field;
let f be Monomorphism of F,L;
let S be ascending non empty Subset of Ext_Set(f,E);
cluster unionField(S,f,E) -> commutative associative well-unital distributive
                             almost_left_invertible;
end;

theorem :: FIELD_12:53
for F being Field, E being FieldExtension of F,
    L be F-monomorphic Field
for f being Monomorphism of F,L
for S being ascending non empty Subset of Ext_Set(f,E)
for p being Element of S
holds p`1 is Subfield of unionField(S,f,E);

theorem :: FIELD_12:54
for F being Field, E being FieldExtension of F,
    L be F-monomorphic Field
for f being Monomorphism of F,L
for S being ascending non empty Subset of Ext_Set(f,E)
holds F is Subfield of unionField(S,f,E);

theorem :: FIELD_12:55
for F being Field, E being FieldExtension of F,
    L be F-monomorphic Field
for f being Monomorphism of F,L
for S being ascending non empty Subset of Ext_Set(f,E)
holds unionField(S,f,E) is Subfield of E;

registration
let F be Field, E be FieldExtension of F;
let L be F-monomorphic Field;
let f be Monomorphism of F,L;
let S be ascending non empty Subset of Ext_Set(f,E);
cluster unionField(S,f,E) -> F-extending;
end;

definition
let F be Field, E be FieldExtension of F;
let L be F-monomorphic Field;
let f be Monomorphism of F,L;
let S be ascending non empty Subset of Ext_Set(f,E);
func unionExt(S,f,E) -> Function of unionField(S,f,E),L means
:: FIELD_12:def 23
  for p being Element of S holds it|(the carrier of (p`1)) = p`2;
end;

theorem :: FIELD_12:56
for F being Field, E being FieldExtension of F,
    L be F-monomorphic Field
for f being Monomorphism of F,L
for S being ascending non empty Subset of Ext_Set(f,E)
holds unionExt(S,f,E) is monomorphism f-extending;

definition
let F be Field, E be FieldExtension of F;
let L be F-monomorphic Field;
let f be Monomorphism of F,L;
let S be ascending non empty Subset of Ext_Set(f,E);
func upper_bound S -> Element of Ext_Set(f,E) equals
:: FIELD_12:def 24
  [ unionField(S,f,E), unionExt(S,f,E) ];
end;

theorem :: FIELD_12:57
for F being Field, E being FieldExtension of F,
    L being F-monomorphic Field,
    f being Monomorphism of F,L
for S being ascending non empty Subset of Ext_Set(f,E)
for p being Element of S holds p <= upper_bound S;

theorem :: FIELD_12:58
for F being Field,
    E being FieldExtension of F
for a being F-algebraic Element of E
for L being F-monomorphic algebraic-closed Field,
    f being Monomorphism of F,L
ex g being Function of FAdj(F,{a}),L st g is monomorphism f-extending;

theorem :: FIELD_12:59
for F being Field,
    E being F-algebraic FieldExtension of F
for L being F-monomorphic algebraic-closed Field,
    f being Monomorphism of F,L
ex g being Function of E,L st g is monomorphism f-extending;

theorem :: FIELD_12:60
for F being Field,
    E being FieldExtension of F,
    L being F-homomorphic E-homomorphic Field
for f being Homomorphism of F,L for g being Homomorphism of E,L
st g is f-extending holds (Image f) is Subfield of (Image g);

theorem :: FIELD_12:61
for F being Field,
    A being AlgebraicClosure of F,
    L being A-monomorphic A-homomorphic Field
for g being Monomorphism of A,L holds (Image g) is algebraic-closed;

theorem :: FIELD_12:62
for F being Field,
    L being F-monomorphic F-homomorphic Field,
    A being AlgebraicClosure of F
for f being Monomorphism of F,L st L is AlgebraicClosure of (Image f)
for g being Function of A,L
st g is monomorphism f-extending holds g is isomorphism;

theorem :: FIELD_12:63
for F being Field
for A1,A2 being AlgebraicClosure of F holds A1,A2 are_isomorphic_over F;


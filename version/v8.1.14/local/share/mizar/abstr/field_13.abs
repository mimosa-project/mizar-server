:: Normal Extensions
::  by Christoph Schwarzweller
:: 
:: Received June 30, 2023
:: Copyright (c) 2023 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies ARYTM_3, VECTSP_1, ALGSTR_0, TARSKI, STRUCT_0, SUBSET_1,
      SUPINF_2, GROUP_6, NAT_1, MESFUNC1, C0SP1, FUNCT_2, UPROOTS, ORDERS_1,
      POLYNOM1, POLYNOM2, POLYNOM3, FUNCSDOM, HURWITZ, FINSEQ_1, QUOFIELD,
      CARD_3, FDIFF_1, FUNCT_1, RELAT_1, CARD_1, XBOOLE_0, NUMBERS, PRE_POLY,
      POLYNOM5, GROUP_1, ZFMISC_1, MOD_4, GLIB_000, REALSET1, PARTFUN1,
      ORDINAL1, YELLOW_8, RING_2, RING_3, MSSUBFAM, RLVECT_1, ALGNUM_1,
      ARYTM_1, FOMODEL1, FINSET_1, RFINSEQ, LATTICES, XXREAL_0, GAUSSINT,
      NEWTON, VECTSP_2, EC_PF_1, FUNCOP_1, XCMPLX_0, FIELD_6, FIELD_8, FUNCT_4,
      RING_5, FIELD_1, FIELD_4, FUNCT_7, BINOP_1, FIELD_9, FIELD_10, FIELD_12,
      CATALG_1, ORDINAL4, FIELD_13;
 notations TARSKI, XBOOLE_0, SUBSET_1, DOMAIN_1, RELAT_1, RELSET_1, FUNCT_1,
      ORDINAL1, FUNCT_2, ZFMISC_1, PARTFUN1, STRUCT_0, CARD_1, NUMBERS,
      ENUMSET1, BINOP_1, REALSET1, XCMPLX_0, XXREAL_0, NAT_1, NAT_D, FUNCOP_1,
      ORDERS_1, FUNCT_4, FUNCT_7, FINSET_1, PRE_POLY, FINSEQ_1, RFINSEQ,
      ALGSEQ_1, POLYNOM1, POLYNOM2, POLYNOM3, POLYNOM4, POLYNOM5, POLYNOM7,
      UPROOTS, GROUP_1, GROUP_4, GROUP_6, RECDEF_1, MOD_4, BINOM, ALGSTR_0,
      QUOFIELD, RLVECT_1, VECTSP_2, HURWITZ, VECTSP_1, C0SP1, EC_PF_1,
      RATFUNC1, GAUSSINT, RING_2, RING_3, RING_4, RING_5, ALGNUM_1, FIELD_1,
      FIELD_4, FIELD_5, FIELD_6, FIELD_7, FIELD_8, FIELD_9, FIELD_11, FIELD_12,
      FIELD_10;
 constructors FINSOP_1, POLYNOM4, FUNCT_7, NAT_D, RATFUNC1, REALSET1, BINOM,
      RINGCAT1, ALGSEQ_1, GROUP_4, ALGNUM_1, RING_5, FIELD_8, FIELD_9,
      FIELD_11, FIELD_12, ORDERS_1, POLYNOM2, RFINSEQ, RECDEF_1, FIELD_10;
 registrations XBOOLE_0, ORDINAL1, RELSET_1, FUNCOP_1, XCMPLX_0, XXREAL_0,
      XREAL_0, NAT_1, INT_1, MEMBERED, STRUCT_0, VECTSP_1, FINSEQ_1, ALGSTR_1,
      GCD_1, POLYNOM4, VALUED_0, FUNCT_2, ALGSTR_0, POLYNOM3, SUBSET_1,
      RLVECT_1, PRE_POLY, FUNCT_1, CARD_1, RINGCAT1, FINSET_1, RATFUNC1,
      POLYNOM2, GAUSSINT, RELAT_1, MOD_4, POLYNOM7, RING_2, RING_4, RING_5,
      REALSET1, POLYNOM1, POLYNOM5, FIELD_7, FIELD_8, FIELD_12, FIELD_9,
      FIELD_4, FIELD_5, FIELD_6, FIELD_10;
 requirements NUMERALS, SUBSET, BOOLE, REAL, ARITHM;


begin :: Preliminaries

definition
let Y be non empty set;
let y1,y2,y3 be Element of Y;
redefine func {y1,y2,y3} -> Subset of Y;
end;

registration
let R be domRing;
let p,q be constant Polynomial of R;
cluster p *' q -> constant;
end;

registration
let R be Ring;
cluster -> R-homomorphic R-monomorphic for RingExtension of R;
end;

registration
let F be Field;
let p be non constant Element of the carrier of Polynom-Ring F;
let E be SplittingField of p;
cluster Roots(E,p) -> non empty;
end;

registration
let R be Ring,
    S be RingExtension of R,
    T be RingExtension of S;
cluster R-fixing for Homomorphism of S,T;
cluster R-fixing for Monomorphism of S,T;
end;

theorem :: FIELD_13:1
for R being Ring,
    S being Subring of R
for F being non empty FinSequence of the carrier of R,
    G being non empty FinSequence of the carrier of S
st F = G holds Product F = Product G;

theorem :: FIELD_13:2
for F being Field
for G being non empty FinSequence of the carrier of Polynom-Ring F
holds Product G = 0_.(F) iff ex i being Element of dom G st G.i = 0_.(F);

theorem :: FIELD_13:3
for F being Field
for G being non empty FinSequence of the carrier of Polynom-Ring F
st for i being Element of dom G holds G.i <> 0_.(F)
for q being Polynomial of F st q = Product G
for i being Element of dom G,
    p being Polynomial of F st p = G.i holds deg p <= deg q;

theorem :: FIELD_13:4
for F being Field,
    E being FieldExtension of F
for G being non empty FinSequence of the carrier of Polynom-Ring F
for q being Polynomial of F st q = Product G
for a being Element of E
st ex i being Element of dom G,
      p being Polynomial of F st p = G.i & Ext_eval(p,a) = 0.E
holds Ext_eval(q,a) = 0.E;

theorem :: FIELD_13:5
for F being Field
for G being non empty FinSequence of the carrier of Polynom-Ring F
for q being non constant Polynomial of F st q = Product G
holds q splits_in F iff
      for i being Element of dom G, p being Polynomial of F
      st p = G.i holds p is constant or p splits_in F;

theorem :: FIELD_13:6
for F being Field,
    E being FieldExtension of F
for G being non empty FinSequence of the carrier of Polynom-Ring F
for q being non constant Polynomial of F st q = Product G
holds q splits_in E iff
      for i being Element of dom G, p being Polynomial of F
      st p = G.i holds p is constant or p splits_in E;

theorem :: FIELD_13:7
for F being Field,
    E being FieldExtension of F
for p being non constant Polynomial of F
for q being non zero Polynomial of F
st p *' q splits_in E holds p splits_in E;

theorem :: FIELD_13:8
for n being Nat
for F being Field, E being FieldExtension of F,
    p being Polynomial of n,F, q being Polynomial of n,E
st p = q holds Support q = Support p;

theorem :: FIELD_13:9
for n being Nat
for F being Field, E being FieldExtension of F,
    p being Polynomial of n,F, q being Polynomial of n,E,
    x being Function of n,E
st p = q holds Ext_eval(p,x) = eval(q,x);

theorem :: FIELD_13:10
for n being Nat
for F being Field, E being FieldExtension of F,
    a being Element of F, b being Element of E st a = b holds a|(n,F) = b|(n,E)
;

theorem :: FIELD_13:11
for F being Field,
    E1 being FieldExtension of F
for E2 being Field st E1 == E2 holds E2 is FieldExtension of F;

theorem :: FIELD_13:12
for F1,F2 being Field
for p being Ppoly of F1 st F1 == F2 holds p is Ppoly of F2;

theorem :: FIELD_13:13
for F being Field,
    E being FieldExtension of F
for p being Polynomial of F for q being Polynomial of E
for a being Element of F, b being Element of E
st p = q & a = b holds a * p = b * q;

theorem :: FIELD_13:14
for F1,F2 being Field
for p being Polynomial of F1 for a being Element of F1
for q being Polynomial of F2 for b being Element of F2
st F1 == F2 holds p = q & a = b implies a * p = b * q;

theorem :: FIELD_13:15
for F being Field,
    E1,E2 being FieldExtension of F
for p being Polynomial of F
st E1 == E2 holds p splits_in E1 implies p splits_in E2;

theorem :: FIELD_13:16
for F being Field,
    E1,E2 being FieldExtension of F
for p being non constant Element of the carrier of Polynom-Ring F
st E1 == E2 holds E1 is SplittingField of p implies E2 is SplittingField of p;

theorem :: FIELD_13:17
for F being Field
for p being linear Element of the carrier of Polynom-Ring F
holds F is SplittingField of p;

registration
let F be Field;
let E be FieldExtension of F;
cluster non empty finite F-algebraic for Subset of E;
end;

registration
let F be Field,
    E be FieldExtension of F;
let a be F-algebraic Element of E;
cluster {a} -> F-algebraic for Subset of E;
end;

registration
let F be Field,
    E be FieldExtension of F;
let T1,T2 be F-algebraic Subset of E;
cluster T1 \/ T2 -> F-algebraic for Subset of E;
end;

registration
let F be Field,
    E be FieldExtension of F;
let T1 be F-algebraic Subset of E;
let T2 be Subset of E;
cluster T1 /\ T2 -> F-algebraic for Subset of E;
cluster T1 \ T2 -> F-algebraic for Subset of E;
end;

definition
let F be Field,
    E be FieldExtension of F;
let T be non empty F-algebraic Subset of E;
redefine mode Element of T -> Element of E;
end;

registration
let F be Field,
    E be FieldExtension of F;
let T be non empty F-algebraic Subset of E;
cluster -> F-algebraic for Element of T;
end;

definition
let F be Field,
    E1,E2 be FieldExtension of F;
let h be Function of E1,E2;
let T be Subset of E1;
redefine func h.:T -> Subset of E2;
end;

theorem :: FIELD_13:18
for F being Field,
    E being FieldExtension of F
for T1 being Subset of E, T2 being Subset of E
for E1 being FieldExtension of FAdj(F,T2), T3 being Subset of E1
st E1 = E & T1 = T3 holds FAdj(F,T1\/T2) = FAdj(FAdj(F,T2),T3);

theorem :: FIELD_13:19
for F being Field,
    E being FieldExtension of F,
    K being E-extending FieldExtension of F
for T1 being finite F-algebraic Subset of E,
    T2 being Subset of K st T1 = T2 holds FAdj(F,T1) = FAdj(F,T2);

theorem :: FIELD_13:20
for F1,F2 being Field,
    p1 being Element of the carrier of Polynom-Ring F1
for p2 being Element of the carrier of Polynom-Ring F2
for E1 being FieldExtension of F1,
    E2 being FieldExtension of F2
st E1 = E2 & p1 = p2 holds Roots(E1,p1) = Roots(E2,p2);

theorem :: FIELD_13:21
for F being Field,
    E,K being FieldExtension of F,
    U1 being FieldExtension of E, U2 being FieldExtension of K
for T1 being Subset of U1, T2 being Subset of U2
st U1 = U2 & T1 = T2 & E == K holds FAdj(E,T1) = FAdj(K,T2);

theorem :: FIELD_13:22
for F being Field,
    E being FieldExtension of F,
    K being E-extending FieldExtension of F
for T1 being Subset of K,
    T2 being finite Subset of K
st T1 c= T2 & E == FAdj(F,T1) holds FAdj(E,T2) = FAdj(F,T2);

theorem :: FIELD_13:23
for F1 being Field,
    p1 being non constant Element of the carrier of Polynom-Ring F1
for F2 being FieldExtension of F1,
    p2 being non constant Element of the carrier of Polynom-Ring F2
for E being SplittingField of p2
for T being F1-algebraic Subset of F2 st T c= Roots(E,p2) & F2 == FAdj(F1,T)
holds p1 = p2 implies E is SplittingField of p1;

theorem :: FIELD_13:24
for F being Field,
    E being FieldExtension of F,
    K being F-extending FieldExtension of E
for p being non constant Element of the carrier of Polynom-Ring F
st p splits_in E holds Roots(K,p) = Roots(E,p);

theorem :: FIELD_13:25
for F1 being Field,
    F2 being F1-homomorphic Field
for h being Homomorphism of F1,F2
for a being Element of F1 holds (PolyHom h).(X-a) = X-(h.a);

theorem :: FIELD_13:26
for F1 being Field,
    F2 being F1-isomorphic F1-homomorphic Field
for h being Isomorphism of F1,F2
for E1 being FieldExtension of F1, E2 be FieldExtension of F2
for a being Element of E1, b be Element of E2
for p being irreducible Element of the carrier of Polynom-Ring F1
st Ext_eval(p,a) = 0.E1 & Ext_eval((PolyHom h).p,b) = 0.E2
holds Psi(a,b,h,p).a = b;


begin :: Preliminaries about Ring Adjunctions

definition
let R1,R2 be Ring;
redefine pred R1 == R2 means
:: FIELD_13:def 1
  R1 is Subring of R2 & R2 is Subring of R1;
end;

theorem :: FIELD_13:27
for R being Ring holds R == R;

theorem :: FIELD_13:28
for R1,R2 being Ring st R1 == R2 holds R2 == R1;

theorem :: FIELD_13:29
for R1,R2,R3 being Ring st R1 == R2 & R2 == R3 holds R1 == R3;

theorem :: FIELD_13:30
for R being Ring,
    S being RingExtension of R
for T1,T2 being Subset of S
st T1 c= T2 holds RAdj(R,T1) is Subring of RAdj(R,T2);

theorem :: FIELD_13:31
for R being Ring,
    S being RingExtension of R
for T1,T2 being Subset of S
for S1 being RingExtension of RAdj(R,T2), T3 being Subset of S1
st S1 = S & T1 = T3 holds RAdj(R,T1\/T2) = RAdj(RAdj(R,T2),T3);

theorem :: FIELD_13:32
for R being Ring
for S being RingExtension of R
for T being Subset of S holds RAdj(R,T) == R iff T is Subset of R;

definition
let n be Nat;
let R,S be non degenerated comRing;
let x be Function of n,S;
func hom_Ext_eval(x,R) -> Function of Polynom-Ring(n,R),S means
:: FIELD_13:def 2
  for p being Polynomial of n,R holds it.p = Ext_eval(p,x);
end;

registration
let n be Nat;
let R be non degenerated comRing,
    S be comRingExtension of R;
let x be Function of n,S;
cluster hom_Ext_eval(x,R) -> additive multiplicative unity-preserving;
end;

theorem :: FIELD_13:33
for n being Nat
for F being Field
for E being FieldExtension of F holds E is (Polynom-Ring(n,F))-homomorphic;

registration
let n be Nat;
let F be Field;
cluster (Polynom-Ring(n,F))-homomorphic for FieldExtension of F;
end;

theorem :: FIELD_13:34
for n being Nat
for F,E being Field
for x being Function of n,E
holds rng hom_Ext_eval(x,F)
    = the set of all Ext_eval(p,x) where p is Polynomial of n,F;

definition
let n be Nat;
let F be Field, E be FieldExtension of F;
let x be Function of n,E;
func Image_hom_Ext_eval(x,F) -> strict doubleLoopStr means
:: FIELD_13:def 3
  the carrier of it = rng hom_Ext_eval(x,F) &
  the addF of it = (the addF of E)||(rng hom_Ext_eval(x,F)) &
  the multF of it = (the multF of E)||(rng hom_Ext_eval(x,F)) &
  the OneF of it = 1.E &
  the ZeroF of it = 0.E;
end;

registration
let n be Nat;
let F be Field, E be FieldExtension of F;
let x be Function of n,E;
cluster Image_hom_Ext_eval(x,F) -> non degenerated;
end;

registration
let n be Nat;
let F be Field, E be FieldExtension of F;
let x be Function of n,E;
cluster Image_hom_Ext_eval(x,F)
              -> Abelian add-associative right_zeroed right_complementable;
end;

registration
let n be Nat;
let F be Field, E be FieldExtension of F;
let x be Function of n,E;
cluster Image_hom_Ext_eval(x,F)
              -> commutative associative well-unital distributive;
end;

theorem :: FIELD_13:35
for n being Nat
for F being Field,
    E being FieldExtension of F
for x being Function of n,E holds F is Subring of Image_hom_Ext_eval(x,F);

definition
let F be Field;
let T be finite Subset of F;
let x be Function of (card T),F;
attr x is T-evaluating means
:: FIELD_13:def 4
  x is one-to-one & rng x = T;
end;

registration
let F be Field;
let T be finite Subset of F;
cluster T-evaluating for Function of (card T),F;
end;

registration
let F be Field;
let T be finite Subset of F;
cluster T-evaluating -> T-valued one-to-one for Function of (card T),F;
end;

theorem :: FIELD_13:36
for F being Field,
    E being FieldExtension of F
for T being non empty finite Subset of E
for b being bag of (card T)
for x being T-evaluating Function of (card T),E
holds eval(b,x) in the carrier of RAdj(F,T);

theorem :: FIELD_13:37
for F being Field,
    E being FieldExtension of F
for T being non empty finite Subset of E
for p being Polynomial of (card T),F
for x being T-evaluating Function of (card T),E
holds Ext_eval(p,x) in the carrier of RAdj(F,T);

theorem :: FIELD_13:38
for F being Field,
    E being FieldExtension of F
for T being non empty finite Subset of E
for x being T-evaluating Function of (card T),E
holds RAdj(F,T) = Image_hom_Ext_eval(x,F);

theorem :: FIELD_13:39
for F being Field,
    E being FieldExtension of F
for T being non empty finite Subset of E
for x being T-evaluating Function of (card T),E
holds the carrier of RAdj(F,T) =
      the set of all Ext_eval(p,x) where p is Polynomial of (card T),F;

theorem :: FIELD_13:40
for F being Field,
    E being FieldExtension of F
for T being finite Subset of E
holds T is F-algebraic implies FAdj(F,T) = RAdj(F,T);


begin :: On Fixing Monomorphisms

registration
let R be Ring;
let S be RingExtension of R;
cluster R-fixing for Homomorphism of S;
cluster R-fixing for Monomorphism of S;
cluster R-fixing for Automorphism of S;
end;

theorem :: FIELD_13:41
for F being Field,
    E being FieldExtension of F, K being FieldExtension of E
for p being Element of the carrier of Polynom-Ring F
for h being F-fixing Homomorphism of E,K holds (PolyHom h).p = p;

theorem :: FIELD_13:42
for F being Field,
    E being FieldExtension of F, K being FieldExtension of E
for p being Element of the carrier of Polynom-Ring F
for a being Element of E, h being F-fixing Homomorphism of E,K
holds h.(Ext_eval(p,a)) = Ext_eval(p,h.a);

theorem :: FIELD_13:43
for F being Field,
    E being FieldExtension of F
for h being F-fixing Monomorphism of E
for p being non zero Element of the carrier of Polynom-Ring F
holds h .: Roots(E,p) = Roots(E,p);

theorem :: FIELD_13:44
for F being Field,
    E being F-algebraic FieldExtension of F
for h being F-fixing Monomorphism of E holds the carrier of E c= rng h;

theorem :: FIELD_13:45
for F being Field,
    E being F-algebraic FieldExtension of F
for h being F-fixing Monomorphism of E holds h is Automorphism of E;

registration
let F be Field,
    E be F-algebraic FieldExtension of F;
cluster -> isomorphism for F-fixing Monomorphism of E;
end;

theorem :: FIELD_13:46
for F being Field,
    E being FieldExtension of F,
    K being F-extending FieldExtension of E
for h being F-fixing Monomorphism of E,K
for T being F-algebraic Subset of E holds h .: T is F-algebraic;

theorem :: FIELD_13:47
for F being Field,
    E being FieldExtension of F,
    K being F-extending FieldExtension of E
for h being F-fixing Monomorphism of E,K
for T being non empty finite Subset of E
for b being bag of (card T)
for x being T-evaluating Function of (card T),E
holds h.eval(b,x) in the carrier of RAdj(F,h.:T);

theorem :: FIELD_13:48
for F being Field,
    E being FieldExtension of F,
    K being F-extending FieldExtension of E
for h being F-fixing Monomorphism of E,K
for T being non empty finite Subset of E
for p being Polynomial of (card T),F
for x being T-evaluating Function of (card T),E
holds h.Ext_eval(p,x) in the carrier of RAdj(F,h.:T);

theorem :: FIELD_13:49
for F being Field,
    E being FieldExtension of F,
    K being F-extending FieldExtension of E
for h being F-fixing Monomorphism of E,K
for T being non empty finite F-algebraic Subset of E
holds h.:(the carrier of FAdj(F,T)) c= the carrier of FAdj(F,h.:T);

theorem :: FIELD_13:50
for F being Field,
    E being FieldExtension of F,
    K being E-extending FieldExtension of F
for T being finite F-algebraic Subset of K
st T c= the carrier of E holds FAdj(F,T) is Subfield of E;

theorem :: FIELD_13:51
for F being Field,
    E being FieldExtension of F,
    K being E-extending FieldExtension of F
for h being F-fixing Homomorphism of E,(K qua FieldExtension of E)
for T being finite F-algebraic Subset of E
st h.:T c= the carrier of E holds FAdj(F,h.:T) is Subfield of E;

theorem :: FIELD_13:52
for F being Field,
    E being FieldExtension of F,
    K being F-extending FieldExtension of E
for h being F-fixing Monomorphism of E,K
for T being non empty finite F-algebraic Subset of E
st h.:T c= the carrier of E
holds h.:(the carrier of FAdj(F,T)) c= the carrier of E;

theorem :: FIELD_13:53
for F being Field,
    E being FieldExtension of F,
    K being F-extending FieldExtension of E
for h being F-fixing Monomorphism of E,K
for p being non constant Element of the carrier of Polynom-Ring F
st p splits_in E holds h .: Roots(E,p) c= the carrier of E;


begin :: Normal Extensions

definition
let F be Field;
let E be FieldExtension of F;
attr E is F-normal means
:: FIELD_13:def 5
  E is F-algebraic &
  for p being irreducible Element of the carrier of Polynom-Ring F
  st p is_with_roots_in E holds p splits_in E;
end;

registration
let F be Field;
cluster F-normal -> F-algebraic for FieldExtension of F;
end;

registration
let F be Field;
cluster F-quadratic -> F-normal for FieldExtension of F;
cluster -> F-normal for AlgebraicClosure of F;
end;

registration
let F be Field;
cluster F-algebraic F-normal for FieldExtension of F;
end;

registration
cluster FAdj(F_Rat,{3-Root(2)}) -> non F_Rat-normal;
end;

theorem :: FIELD_13:54
for F being Field,
    E being F-algebraic FieldExtension of F
holds E is F-normal iff
      for a being Element of E holds MinPoly(a,F) splits_in E;

theorem :: FIELD_13:55
for F being Field,
    E being F-finite FieldExtension of F
holds E is F-normal iff
      ex p being non constant Element of the carrier of Polynom-Ring F
      st E is SplittingField of p;

theorem :: FIELD_13:56
for F being Field,
    E being F-finite FieldExtension of F
holds E is F-normal iff
      for K being FieldExtension of E
      for h being F-fixing Monomorphism of E,K holds h is Automorphism of E;

registration
let F be Field;
let p be non constant Element of the carrier of Polynom-Ring F;
cluster -> F-normal for SplittingField of p;
end;

theorem :: FIELD_13:57
for F being Field,
    E being FieldExtension of F
for a being F-algebraic Element of E
holds FAdj(F,{a}) is F-normal iff MinPoly(a,F) splits_in FAdj(F,{a});

theorem :: FIELD_13:58
for F being Field,
    E being FieldExtension of F
for T being non empty finite F-algebraic Subset of E
holds FAdj(F,T) is F-normal iff
      for a being Element of T holds MinPoly(a,F) splits_in FAdj(F,T);

